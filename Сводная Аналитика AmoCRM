/**********************************************************
 * –°–í–û–î–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê AMOcrm ‚Äî –µ–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
 * (PT Sans, —Ç–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, % –ø–æ —ç—Ç–∞–ø–∞–º,
 *  –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ya_map –∏ ya_map#booking, –¥–æ—Ö–æ–¥ AX‚ÜíE)
 **********************************************************/
const SUMMARY_CFG = {
  RA_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  REPORT_SHEET: '–°–í–û–î–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê AMOcrm',
  FONT: 'PT Sans',
  SUCCESS_RE: /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à.*–≤\s*—Ä–ø|—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑)/i, // —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ–º –≥–∏–±–∫–æ
  HEADERS: {
    ID: ['ID','–°–¥–µ–ª–∫–∞.ID'],
    STATUS: ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å'],
    BUDGET: ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç'],
    PHONE: ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    AX: ['–°—É–º–º–∞ ‚ÇΩ'],        // –≤–æ–∑—å–º—ë–º –ü–û–°–õ–ï–î–ù–Æ–Æ –∏–∑ ¬´–°—É–º–º–∞ ‚ÇΩ¬ª (AX)
    SOURCE_TEL: ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ'],
    UTM_SOURCE: ['UTM_SOURCE','utm_source'],
  }
};

// ===== –ü–£–ë–õ–ò–ß–ù–û =====
function buildAmoSummary(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ra = readRA_(ss);
  const rows = ra.rows;
  if (!rows.length) return;

  // ---- –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ ----
  let total = 0, success = 0, revenueAll = 0;
  let withPhone = 0, successWithPhone = 0;

  const byStage = new Map();     // —Å—Ç–∞—Ç—É—Å -> –∫–æ–ª-–≤–æ
  const byChannel = new Map();   // –∫–∞–Ω–∞–ª -> {leads, success, revenue}

  rows.forEach(r=>{
    total += 1;

    const status = asString_(r[ra.idx.status]).trim();
    inc_(byStage, normalizeStage_(status), 1);

    const isSuccess = SUMMARY_CFG.SUCCESS_RE.test(status);
    if (isSuccess) success += 1;

    const phone = asString_(r[ra.idx.phone]).trim();
    const hasPhone = !!cleanDigits_(phone);
    if (hasPhone) {
      withPhone += 1;
      if (isSuccess) successWithPhone += 1;
    }

    const channel = normalizeChannel_(asString_(r[ra.idx.sourceTel]), asString_(r[ra.idx.utmSource]));
    const bucket = byChannel.get(channel) || {leads:0, success:0, revenue:0};
    bucket.leads += 1;

    // –¥–æ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ —É—Å–ø–µ—à–Ω—ã–º
    if (isSuccess) {
      const ax = toNumber_(r[ra.idx.ax]);        // AX ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ
      const budget = toNumber_(r[ra.idx.budget]); // fallback –µ—Å–ª–∏ AX=0
      const sum = (ax > 0 ? ax : budget);
      bucket.success += 1;
      bucket.revenue += sum;
      revenueAll += sum;
    }
    byChannel.set(channel, bucket);
  });

  const avgCheck = success ? revenueAll / success : 0;
  const convAll  = total ? success / total : 0;
  const convTel  = withPhone ? successWithPhone / withPhone : 0;

  // ---- –ü–ª–æ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã ----
  // –¢–æ–ø-5 –ø–æ –¥–æ—Ö–æ–¥—É
  const chanArray = [...byChannel.entries()].map(([ch, v])=>{
    return [ch, v.leads, v.success, v.revenue, (v.success? v.revenue/v.success:0), (v.leads? v.success/v.leads:0)];
  });
  chanArray.sort((a,b)=>b[3]-a[3]); // –ø–æ –¥–æ—Ö–æ–¥—É
  const top5 = chanArray.slice(0,5);

  // –í—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const allChannels = [...chanArray];

  // –≠—Ç–∞–ø—ã: % –æ—Ç –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
  const stages = [...byStage.entries()].map(([st, c])=>{
    return [st, c, (total? c/total:0)];
  }).sort((a,b)=>a[0].localeCompare(b[0], 'ru'));

  // ---- –†–µ–Ω–¥–µ—Ä ----
  const sh = ss.getSheetByName(SUMMARY_CFG.REPORT_SHEET) || ss.insertSheet(SUMMARY_CFG.REPORT_SHEET);
  sh.clear();
  setFontAll_(sh, SUMMARY_CFG.FONT);

  let r = 1, c = 1;

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  drawBand_(sh, r, c, 1, 14, '#153E5C'); // —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
  sh.getRange(r, c, 1, 14).merge().setValue('üèÜ –°–í–û–î–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê AMOcrm')
    .setFontSize(18).setFontWeight('bold').setHorizontalAlignment('left').setVerticalAlignment('middle').setFontColor('#ffffff');
  r += 1;

  // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  sh.getRange(r, c).setValue('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:').setFontWeight('bold');
  sh.getRange(r, c+1).setValue(new Date()).setNumberFormat('dd.MM.yyyy, HH:mm:ss');
  r += 2;

  // ===== –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ =====
  sectionTitle_(sh, r, c, '‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', 9, '#D8EAC6'); r++;
  const headKPI = ['–ú–µ—Ç—Ä–∏–∫–∞','–ó–Ω–∞—á–µ–Ω–∏–µ','–û–ø–∏—Å–∞–Ω–∏–µ'];
  const dataKPI = [
    ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', total, '–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
    ['–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', success, '–û–ø–ª–∞—á–µ–Ω–æ / –£—Å–ø–µ—à–Ω–æ –≤ –†–ü / –£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    ['–û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ', revenueAll, 'AX, –µ—Å–ª–∏ 0 ‚Üí –ë—é–¥–∂–µ—Ç (–¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö)'],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ', avgCheck, '–î–æ—Ö–æ–¥ / –£—Å–ø–µ—à–Ω—ã–µ'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è', convAll, '–£—Å–ø–µ—à–Ω—ã–µ / –í—Å–µ'],
    ['–°–¥–µ–ª–æ–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', withPhone, '–∫–æ–ª-–≤–æ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', convTel, '–£—Å–ø–µ—à–Ω—ã–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º / –í—Å–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º']
  ];
  writeTable_(sh, r, c, headKPI, dataKPI, {moneyCols:[2], percentCols:[2]}); // –æ—Ñ–æ—Ä–º–∏–º –Ω–∏–∂–µ –≤—Ä—É—á–Ω—É—é —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
  // –§–æ—Ä–º–∞—Ç—ã KPI
  formatMoneyCol_(sh, r+1, c+1, dataKPI.length, 1, false);       // ¬´–ó–Ω–∞—á–µ–Ω–∏–µ¬ª ‚Äî —á–∏—Å–ª–∞/–¥–µ–Ω—å–≥–∏/–ø—Ä–æ—Ü–µ–Ω—Ç—ã; –Ω–∏–∂–µ –¥–æ–ø.—Ñ–æ—Ä–º–∞—Ç—ã:
  sh.getRange(r+1, c+2, dataKPI.length, 1).setWrap(true);
  // –î–µ–Ω—å–≥–∏/–ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  sh.getRange(r+1+2, c+1).setNumberFormat('#,##0');             // –û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ
  sh.getRange(r+1+3, c+1).setNumberFormat('#,##0');             // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ
  sh.getRange(r+1+4, c+1).setNumberFormat('0.00%');             // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
  sh.getRange(r+1+6, c+1).setNumberFormat('0.00%');             // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  r += (dataKPI.length + 3);

  // ===== –¢–û–ü-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É =====
  sectionTitle_(sh, r, c, 'üìà –¢–û–ü-5 –ö–ê–ù–ê–õ–û–í –ü–û –î–û–•–û–î–£', 14, '#FFD7C2'); r++;
  const headTop = ['–ö–∞–Ω–∞–ª','–°–¥–µ–ª–∫–∏','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–°—Ä. —á–µ–∫ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è'];
  writeTable_(sh, r, c, headTop, top5);
  // –§–æ—Ä–º–∞—Ç—ã
  formatMoneyCol_(sh, r+1, c+3, top5.length, 1, true);   // –î–æ—Ö–æ–¥
  formatMoneyCol_(sh, r+1, c+4, top5.length, 1, true);   // –°—Ä. —á–µ–∫
  sh.getRange(r+1, c+5, top5.length, 1).setNumberFormat('0.00%');
  r += (top5.length + 3);

  // ===== –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º =====
  sectionTitle_(sh, r, c, 'üß© –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –≠–¢–ê–ü–ê–ú –°–î–ï–õ–û–ö', 9, '#FFE6A8'); r++;
  const headStage = ['–≠—Ç–∞–ø','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ü—Ä–æ—Ü–µ–Ω—Ç'];
  writeTable_(sh, r, c, headStage, stages);
  sh.getRange(r+1, c+1, stages.length, 1).setNumberFormat('#,##0');
  sh.getRange(r+1, c+2, stages.length, 1).setNumberFormat('0.00%');
  r += (stages.length + 3);

  // ===== –î–æ—Ö–æ–¥ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞) =====
  sectionTitle_(sh, r, c, 'üü© –î–û–•–û–î –ü–û –ö–ê–ù–ê–õ–ê–ú', 6, '#CFE9CF'); r++;
  const headAll = ['–ö–∞–Ω–∞–ª','–î–æ—Ö–æ–¥'];
  const dataAll = allChannels.map(a=>[a[0], a[3]]);
  writeTable_(sh, r, c, headAll, dataAll);
  formatMoneyCol_(sh, r+1, c+1, dataAll.length, 1, true);
  const chartStartRow = r, chartRows = Math.max(1, dataAll.length+1);
  r += (dataAll.length + 2);

  // –î–∏–∞–≥—Ä–∞–º–º–∞ (—Å—Ç–æ–ª–±–∏–∫) –ø–æ –¥–æ—Ö–æ–¥—É
  try {
    const old = sh.getCharts(); old.forEach(ch => sh.removeChart(ch));
    const chart = sh.newChart()
      .setChartType(Charts.ChartType.COLUMN)
      .addRange(sh.getRange(chartStartRow, c, chartRows, 2))
      .setOption('title','–î–æ—Ö–æ–¥ –ø–æ –∫–∞–Ω–∞–ª–∞–º')
      .setOption('legend.position','none')
      .setOption('useFirstColumnAsDomain', true)
      .setOption('titleTextStyle',{fontSize:16,bold:true})
      .setOption('hAxis',{slantedText:true, slantedTextAngle:20})
      .setOption('chartArea',{left:40, top:40, width:'80%', height:'55%'})
      .setPosition(chartStartRow+2, 8, 0, 0)
      .build();
    sh.insertChart(chart);
  } catch(e){}

  // –û–±—â–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞
  autoResizeAll_(sh);
}

// –¢—Ä–∏–≥–≥–µ—Ä ¬´–∫–∞–∂–¥—ã–π —á–∞—Å¬ª
function setHourlyTrigger_Summary(){
  ScriptApp.getProjectTriggers().forEach(t=>{
    if (t.getHandlerFunction()==='buildAmoSummary') ScriptApp.deleteTrigger(t);
  });
  ScriptApp.newTrigger('buildAmoSummary').timeBased().everyHours(1).create();
}

/* ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ================= */

function readRA_(ss){
  const sh = ss.getSheetByName(SUMMARY_CFG.RA_SHEET);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+SUMMARY_CFG.RA_SHEET+'"');

  // —à–∞–ø–∫–∞ –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ –≤ ¬´–†–ê–ë–û–ß–ò–ô –ê–ú–û¬ª), –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
  const peek = sh.getRange(1,1,Math.min(5, sh.getLastRow()||5), Math.min(200, sh.getLastColumn()||50)).getValues();
  let headerRow = 2;
  for (let r=0;r<peek.length;r++){
    const row = peek[r].map(String);
    if (row.includes('ID') && (row.includes('–°—Ç–∞—Ç—É—Å') || row.includes('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))) { headerRow = r+1; break; }
  }
  const lastRow = sh.getLastRow(), lastCol = sh.getLastColumn();
  if (lastRow < headerRow+1) return {header:[],rows:[],idx:{}};
  const header = sh.getRange(headerRow,1,1,lastCol).getValues()[0].map(String);
  const rows = sh.getRange(headerRow+1,1,lastRow-headerRow,lastCol).getValues();

  // –∏–Ω–¥–µ–∫—Å—ã
  const idx = {};
  idx.status = findHeaderIndex_(header, SUMMARY_CFG.HEADERS.STATUS);
  idx.budget = findHeaderIndex_(header, SUMMARY_CFG.HEADERS.BUDGET);
  idx.phone  = findHeaderIndex_(header, SUMMARY_CFG.HEADERS.PHONE);
  idx.sourceTel = findHeaderIndex_(header, SUMMARY_CFG.HEADERS.SOURCE_TEL);
  idx.utmSource = findHeaderIndex_(header, SUMMARY_CFG.HEADERS.UTM_SOURCE);
  // AX ‚Äî –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–Æ–Æ ¬´–°—É–º–º–∞ ‚ÇΩ¬ª
  const sumIdxAll = findAllHeaderIndexes_(header, SUMMARY_CFG.HEADERS.AX);
  idx.ax = sumIdxAll.length ? sumIdxAll[sumIdxAll.length-1] : -1;

  return {header, rows, idx};
}

function normalizeStage_(s){
  s = asString_(s).trim();
  if (!s) return '(–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)';
  return s;
}

// –ö–∞–Ω–∞–ª: —Å–ø–µ—Ä–≤–∞ V (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π), –∏–Ω–∞—á–µ W (utm_source). ya_map#booking ‚Üí ya_map.
function normalizeChannel_(telTag, utm){
  let c = asString_(telTag).trim() || asString_(utm).trim();
  if (!c) c = '–ø—Ä—è–º–æ–π —Å —Å–∞–π—Ç–∞';
  const s = c.toLowerCase();
  if (s === 'ya_map#booking') return 'ya_map';
  // –º–æ–∂–µ—à—å –¥–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º–∞–ø–ø–∏–Ω–≥–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  return c;
}

function asString_(v){ return v==null ? '' : String(v); }
function toNumber_(v){
  if (v==null || v==='') return 0;
  const n = Number(String(v).replace(/\s/g,'').replace(',','.'));
  return isNaN(n) ? 0 : n;
}
function cleanDigits_(s){ return String(s||'').replace(/\D/g,''); }

function findHeaderIndex_(header, names){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const name of names){
    const n = String(name).trim().toLowerCase();
    let i = norm.indexOf(n);
    if (i>-1) return i;
    i = norm.findIndex(h => h===n || h.includes(n));
    if (i>-1) return i;
  }
  return -1;
}
function findAllHeaderIndexes_(header, names){
  const out = [];
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const name of names){
    const n = String(name).trim().toLowerCase();
    norm.forEach((h,i)=>{ if (h===n || h.includes(n)) out.push(i); });
  }
  return out;
}

// Map.increment helper
function inc_(map, key, by){ const v = map.get(key)||0; map.set(key, v+(by||1)); }

// ---------- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ----------
function setFontAll_(sh, font){
  const rng = sh.getRange(1,1,Math.max(1, sh.getMaxRows()), Math.max(1, sh.getMaxColumns()));
  rng.setFontFamily(font);
}
function drawBand_(sh, row, col, rows, cols, bg){
  ensureSize_(sh, row+rows-1, col+cols-1);
  sh.getRange(row, col, rows, cols).setBackground(bg);
}
function sectionTitle_(sh, row, col, text, width, bg){
  ensureSize_(sh, row, col+Math.max(1,width)-1);
  const rng = sh.getRange(row, col, 1, Math.max(1,width));
  try{ rng.merge(); }catch(e){}
  rng.setValue(text).setFontWeight('bold').setFontSize(14).setBackground(bg).setBorder(null,null,true,null,false,false,'#4A90E2',SpreadsheetApp.BorderStyle.SOLID);
}
function writeTable_(sh, row, col, header, data, opts){
  opts = opts || {};
  ensureSize_(sh, row + Math.max(1,data.length), col + header.length - 1);
  const headR = sh.getRange(row, col, 1, header.length);
  headR.setValues([header]).setFontWeight('bold').setBackground('#E9F2FB');
  if (data.length) {
    sh.getRange(row+1, col, data.length, header.length).setValues(data.map(r=>r.map(v=>{
      if (v===null || v===undefined || (typeof v==='number' && !isFinite(v))) return '';
      return v;
    })));
  }
  // —Å–µ—Ç–∫–∞ –∏ –∑–µ–±—Ä–∞
  const totalRows = Math.max(1, data.length+1);
  const rng = sh.getRange(row, col, totalRows, header.length);
  rng.setBorder(true,true,true,true,true,true);
  if (data.length){
    const zebra = sh.getRange(row+1, col, data.length, header.length);
    const bgs = [];
    for (let i=0;i<data.length;i++){
      const color = (i%2===0) ? '#F8FCFF' : '#FFFFFF';
      bgs.push(new Array(header.length).fill(color));
    }
    zebra.setBackgrounds(bgs);
  }
}
function formatMoneyCol_(sh, row, col, nRows, nCols, withSpace){
  const fmt = withSpace ? '#,##0' : '#,##0';
  sh.getRange(row, col, nRows, nCols).setNumberFormat(fmt);
}
function ensureSize_(sh, needRow, needCol){
  if (sh.getMaxRows() < needRow) sh.insertRowsAfter(sh.getMaxRows(), needRow - sh.getMaxRows());
  if (sh.getMaxColumns() < needCol) sh.insertColumnsAfter(sh.getMaxColumns(), needCol - sh.getMaxColumns());
}
function autoResizeAll_(sh){
  const cols = sh.getLastColumn();
  for (let c=1;c<=cols;c++) try{ sh.autoResizeColumn(c); }catch(e){}
}

/**********************
 *  –ù–ê–°–¢–†–û–ô–ö–ò –î–ê–®–ë–û–†–î–ê
 **********************/
const DASH = {
  OUT:   '–†–ê–ë–û–ß–ò–ô –ê–ú–û',               // –ª–∏—Å—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫
  SHEET: '–°–í–û–î–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê AMOcrm',  // –ª–∏—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
  // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–∫—Ü–∏–π (–ø–æ —Ç–≤–æ–µ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ)
  KEYS_ROW:   5,   // "–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏" (—Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
  TOP5_ROW:   14,  // "–¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É"
  STAGES_ROW: 23,  // "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º —Å–¥–µ–ª–æ–∫"
  INCOME_ROW: 36   // "–î–æ—Ö–æ–¥ –ø–æ –∫–∞–Ω–∞–ª–∞–º"
};

// —Å—Ç–∞—Ç—É—Å—ã, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–µ
const SUCCESS_STATUSES = ['–û–ø–ª–∞—á–µ–Ω–æ','–£—Å–ø–µ—à–Ω–æ –≤ –†–ü','–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'];

/**********************
 *  –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
 **********************/
function buildAmoDashboard_v2(){
  const ss  = SpreadsheetApp.getActiveSpreadsheet();
  const amo = ss.getSheetByName(DASH.OUT);
  if (!amo) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+DASH.OUT+'"');

  const vals   = amo.getDataRange().getValues();
  const header = (vals[1]||[]).map(String);
  const rows   = vals.slice(2).filter(r=>r.some(x=>String(x).trim()!==''));

  const iCreated   = header.indexOf('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
  const iStatus    = header.indexOf('–°—Ç–∞—Ç—É—Å');
  const iBudget    = header.indexOf('–ë—é–¥–∂–µ—Ç');
  const iUtm       = header.indexOf('UTM_SOURCE');
  const iTelTag    = header.indexOf('R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏');
  const iLastForm  = header.indexOf('–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞');
  const iFormId    = header.indexOf('FORMID');
  const iFormName  = header.indexOf('FORMNAME');
  const iRef       = header.indexOf('REFERER');
  const iDate      = header.indexOf('DATE');

  let iAX = -1; header.forEach((h,i)=>{ if(/—Å—É–º–º–∞\s*‚ÇΩ/i.test(h)) iAX=i; });

  let total=0, succ=0, incomeSum=0;
  const stageCount  = new Map();
  const channelStat = new Map();
  const monthStat   = new Map();

  rows.forEach(r=>{
    const created = r[iCreated]; if(!created) return;
    total++;

    const st  = normalizeStatus_(String(r[iStatus]||''));
    const ok  = SUCCESS_STATUSES.includes(st);
    const rev = revenueFromRow_(r, iAX, iBudget, ok);
    if (ok){ succ++; incomeSum += rev; }

    stageCount.set(st,(stageCount.get(st)||0)+1);

    const chan = normalizeChannel_(r, header, {iTelTag,iUtm,iLastForm,iFormId,iFormName,iRef,iDate});
    const cs = channelStat.get(chan)||{leads:0,succ:0,income:0};
    cs.leads++; if(ok){ cs.succ++; cs.income+=rev; }
    channelStat.set(chan, cs);

    const m = monthKey_(created);
    const ms = monthStat.get(m.key)||{label:m.label, leads:0, succ:0, income:0, order:m.key};
    ms.leads++; if(ok){ ms.succ++; ms.income+=rev; }
    monthStat.set(m.key, ms);
  });

  const avgCheck = succ ? incomeSum/succ : 0;
  const conv     = total ? succ/total : 0;

  const channelsMerged = mergeAliasesAll_(channelStat);
  const chanArr = [...channelsMerged.values()].sort((a,b)=>b.income-a.income);
  const months  = [...monthStat.values()].sort((a,b)=>a.order.localeCompare(b.order));

  const sh = ss.getSheetByName(DASH.SHEET) || ss.insertSheet(DASH.SHEET);
  sh.getRange(1,1,sh.getMaxRows(),sh.getMaxColumns()).setFontFamily('PT Sans');

  // —à—Ç–∞–º–ø
  sh.getRange(2,1,1,2).setValues([['–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', new Date()]]);

  // –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const keys = [
    ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫',        total,     '–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
    ['–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫',     succ,      '–û–ø–ª–∞—á–µ–Ω–æ / –£—Å–ø–µ—à–Ω–æ –≤ –†–ü / –£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    ['–û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ',       incomeSum, 'AX, –µ—Å–ª–∏ 0 ‚Üí –ë—é–¥–∂–µ—Ç (–¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö)'],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ',       avgCheck,  '–î–æ—Ö–æ–¥ / –£—Å–ø–µ—à–Ω—ã–µ'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è',           conv,      '–£—Å–ø–µ—à–Ω—ã–µ / –í—Å–µ'],
    ['–°–¥–µ–ª–æ–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º',  countPhone_(rows, header), '–µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', convPhone_(rows, header), '–£—Å–ø–µ—à–Ω—ã–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º / –í—Å–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º']
  ];
  sh.getRange(DASH.KEYS_ROW,1,keys.length,3).clearContent();
  sh.getRange(DASH.KEYS_ROW,1,keys.length,3).setValues(keys);
  // —Ñ–æ—Ä–º–∞—Ç—ã KPI
  sh.getRange(DASH.KEYS_ROW+2,2,1,1).setNumberFormat('# ##0');  // –¥–æ—Ö–æ–¥
  sh.getRange(DASH.KEYS_ROW+3,2,1,1).setNumberFormat('# ##0');  // —Å—Ä.—á–µ–∫
  sh.getRange(DASH.KEYS_ROW+4,2,1,1).setNumberFormat('0.00%');  // –∫–æ–Ω–≤–µ—Ä—Å–∏—è
  sh.getRange(DASH.KEYS_ROW+6,2,1,1).setNumberFormat('0.00%');  // –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É

  // –¢–û–ü-5
  const topHeader = ['–ö–∞–Ω–∞–ª','–°–¥–µ–ª–∫–∏','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–°—Ä. —á–µ–∫ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è'];
  const top5 = chanArr.slice(0,5).map(c=>[
    c.name, c.leads, c.succ, c.income, c.succ?c.income/c.succ:0, c.leads?c.succ/c.leads:0
  ]);
  sh.getRange(DASH.TOP5_ROW,1,1,topHeader.length).setValues([topHeader]).setFontWeight('bold');
  sh.getRange(DASH.TOP5_ROW+1,1,Math.max(1,top5.length),topHeader.length).clearContent();
  if (top5.length){
    sh.getRange(DASH.TOP5_ROW+1,1,top5.length,topHeader.length).setValues(top5);
    sh.getRange(DASH.TOP5_ROW+1,4,top5.length,1).setNumberFormat('# ##0'); // –î–æ—Ö–æ–¥
    sh.getRange(DASH.TOP5_ROW+1,5,top5.length,1).setNumberFormat('# ##0'); // –°—Ä. —á–µ–∫
    sh.getRange(DASH.TOP5_ROW+1,6,top5.length,1).setNumberFormat('0.00%'); // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
  }

  // –≠—Ç–∞–ø—ã
  const stages = [...stageCount.entries()].sort((a,b)=>b[1]-a[1]).map(([n,c])=>[n,c,total?c/total:0]);
  sh.getRange(DASH.STAGES_ROW,1,1,3).setValues([['–≠—Ç–∞–ø','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–ü—Ä–æ—Ü–µ–Ω—Ç']]).setFontWeight('bold');
  sh.getRange(DASH.STAGES_ROW+1,1,Math.max(1,stages.length),3).clearContent();
  if (stages.length){
    sh.getRange(DASH.STAGES_ROW+1,1,stages.length,3).setValues(stages);
    sh.getRange(DASH.STAGES_ROW+1,2,stages.length,1).setNumberFormat('0');       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    sh.getRange(DASH.STAGES_ROW+1,3,stages.length,1).setNumberFormat('0.00%');   // –ü—Ä–æ—Ü–µ–Ω—Ç
  }

  // –î–æ—Ö–æ–¥ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
  sh.getRange(DASH.INCOME_ROW,1,1,2).setValues([['–ö–∞–Ω–∞–ª','–î–æ—Ö–æ–¥']]).setFontWeight('bold');
  const chBody = chanArr.map(c=>[c.name,c.income]);
  sh.getRange(DASH.INCOME_ROW+1,1,Math.max(1,chBody.length),2).clearContent();
  if (chBody.length){
    sh.getRange(DASH.INCOME_ROW+1,1,chBody.length,2).setValues(chBody);
    sh.getRange(DASH.INCOME_ROW+1,2,chBody.length,1).setNumberFormat('# ##0');
  }

  // –õ–∏–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
  const monthStart = DASH.INCOME_ROW + 2 + chBody.length + 3;
  const mHeader = ['–ú–µ—Å—è—Ü','–õ–∏–¥—ã','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–°—Ä. —á–µ–∫ ‚ÇΩ'];
  const mBody = months.map(m=>[
    m.label, m.leads, m.succ, m.income,
    m.leads? m.succ/m.leads : 0,
    m.succ?  m.income/m.succ : 0
  ]);
  sh.getRange(monthStart,1,1,mHeader.length).setValues([mHeader]).setFontWeight('bold');
  sh.getRange(monthStart+1,1,Math.max(1,mBody.length),mHeader.length).clearContent();
  if (mBody.length){
    sh.getRange(monthStart+1,1,mBody.length,mHeader.length).setValues(mBody);
    sh.getRange(monthStart+1,4,mBody.length,1).setNumberFormat('# ##0');  // –î–æ—Ö–æ–¥
    sh.getRange(monthStart+1,5,mBody.length,1).setNumberFormat('0.00%');  // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    sh.getRange(monthStart+1,6,mBody.length,1).setNumberFormat('# ##0');  // –°—Ä. —á–µ–∫
  }
}

/**********************
 *  –¢–†–ò–ì–ì–ï–†–´ / –ú–ï–ù–Æ
 **********************/
function setHourlyTrigger(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildAmoDashboard_v2')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildAmoDashboard_v2').timeBased().everyHours(1).create();
}

function onOpen(){
  SpreadsheetApp.getUi()
    .createMenu('AMO –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    .addItem('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥', 'buildAmoDashboard_v2')
    .addItem('–ü–æ—Å—Ç–∞–≤–∏—Ç—å hourly-—Ç—Ä–∏–≥–≥–µ—Ä', 'setHourlyTrigger')
    .addToUi();
}

/**********************
 *  –•–ï–õ–ü–ï–†–´
 **********************/
function normalizeStatus_(raw){
  let s = String(raw||'').trim();
  // –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏—Å—Ç–∞–≤–∫–∏/—Ö–≤–æ—Å—Ç—ã
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i,'')
       .replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/,'').trim();

  const rules = [
    [/–æ–ø–ª–∞—á/i,                  '–û–ø–ª–∞—á–µ–Ω–æ'],
    [/—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i,          '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü'],
    [/—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i,          '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    [/–∑–∞–∫—Ä—ã—Ç–æ.*–Ω–µ.*—Ä–µ–∞–ª–∏–∑/i,    '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    [/–∫–æ–Ω—Ç—Ä–æ–ª.*–æ–ø–ª–∞—Ç/i,         '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã'],
    [/–ø–µ—Ä–µ–Ω–æ—Å.*–æ—Ç–∫—Ä—ã—Ç–æ–π.*–¥–∞—Ç/i, '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π'],
    [/–≤–æ–ø—Ä–æ—Å.*–±–∞—Ä—É/i,           '–í–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É'],
    [/–Ω–¥–∑|–Ω–µ\s*–¥–æ–∑–≤–æ–Ω/i,        '–ù–î–ó'],
    [/–∞–≤—Ç–æ.*—Ä–∞—Å–ø—Ä–µ–¥–µ–ª/i,        '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'],
    [/–≤–∑—è–ª.*–≤\s*—Ä–∞–±–æ—Ç—É|–≤ —Ä–∞–±–æ—Ç–µ/i, '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É'],
    [/–æ—Ç–º–µ–Ω–µ–Ω.*—Ä–µ—Å—Ç–æ–ø–ª–µ–π—Å/i,    '–û—Ç–º–µ–Ω–µ–Ω –≤ –†–µ—Å—Ç–æ–ø–ª–µ–π—Å']
  ];
  for (const [re,n] of rules){ if (re.test(s)) return n; }
  return s || '–ù–æ–≤—ã–π –ª–∏–¥';
}

function revenueFromRow_(r, iAX, iBudget, isSuccess){
  const ax = toNumber_(r[iAX]);
  if (isSuccess){
    if (ax && ax>0) return ax;
    return toNumber_(r[iBudget]); // –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –µ—Å–ª–∏ AX = 0
  }
  return 0;
}

function normalizeChannel_(r, header, idx){
  const tel = String(idx.iTelTag>-1 ? (r[idx.iTelTag]||'') : '').trim().toLowerCase();
  if (tel) return mergeAliasName_(tel);

  const utm = String(idx.iUtm>-1 ? (r[idx.iUtm]||'') : '').trim().toLowerCase();
  if (utm) return mergeAliasName_(utm);

  // –ø—Ä—è–º–æ–π —Å–∞–π—Ç (–µ—Å—Ç—å —Å–ª–µ–¥—ã —Ñ–æ—Ä–º—ã, –Ω–æ utm –ø—É—Å—Ç)
  const hasForm = [idx.iLastForm, idx.iFormId, idx.iFormName, idx.iRef, idx.iDate]
    .some(i => i>-1 && String(r[i]||'').trim()!=='');
  if (hasForm) return 'direct_site';

  return '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)';
}

function mergeAliasName_(name){
  if (name==='ya_map#booking') return 'ya_map';
  return name;
}
function mergeAliasesAll_(mapIn){
  const out = new Map();
  for (const [n,v] of mapIn.entries()){
    const k = mergeAliasName_(n);
    const t = out.get(k)||{name:k,leads:0,succ:0,income:0};
    t.leads+=v.leads; t.succ+=v.succ; t.income+=v.income;
    out.set(k,t);
  }
  return out;
}

function monthKey_(d){
  const dt = (d instanceof Date) ? d : new Date(d);
  const y = dt.getFullYear();
  const m = dt.getMonth();
  const MMM = ['–Ø–ù–í','–§–ï–í','–ú–ê–†','–ê–ü–†','–ú–ê–ô','–ò–Æ–ù','–ò–Æ–õ','–ê–í–ì','–°–ï–ù','–û–ö–¢','–ù–û–Ø','–î–ï–ö'][m];
  const label = `${MMM} ‚Äô${String(y).slice(-2)}`;
  // –∫–ª—é—á –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: YYYY-MM
  const key = `${y}-${('0'+(m+1)).slice(-2)}`;
  return {key, label};
}

function countPhone_(rows, header){
  const iPhone = findPhoneIndex_(header);
  if (iPhone<0) return 0;
  let k=0; rows.forEach(r=>{ if (cleanPhone_(r[iPhone])) k++; });
  return k;
}
function convPhone_(rows, header){
  const iPhone = findPhoneIndex_(header);
  const iStatus = header.indexOf('–°—Ç–∞—Ç—É—Å');
  if (iPhone<0 || iStatus<0) return 0;
  let total=0, succ=0;
  rows.forEach(r=>{
    if (cleanPhone_(r[iPhone])){
      total++;
      const st = normalizeStatus_(r[iStatus]);
      if (SUCCESS_STATUSES.includes(st)) succ++;
    }
  });
  return total ? succ/total : 0;
}
function findPhoneIndex_(header){
  const cand = ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'];
  for (const name of cand){
    const i = header.indexOf(name);
    if (i>-1) return i;
  }
  return -1;
}

function toNumber_(v){
  const n = Number(String(v||'').replace(/\s+/g,'').replace(',','.'));
  return isNaN(n)?0:n;
}
function cleanPhone_(s){
  const d = String(s||'').replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1);
  if (d.length>=10) return d.slice(-10);
  return d;
}
