/**********************************************************
 * –°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (End-to-End) –¥–ª—è Google Sheets
 * –ò—Å—Ç–æ—á–Ω–∏–∫–∏: "–†–ê–ë–û–ß–ò–ô –ê–ú–û" + "–†–∞—Å—Ö–æ–¥—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞" + "Guests RP"
 * –î–∞—à–±–æ—Ä–¥ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –Ω–∞ –ª–∏—Å—Ç "–°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê"
 * –®—Ä–∏—Ñ—Ç: PT Sans
 **********************************************************/
const E2E = {
  FONT: 'PT Sans',
  // –õ–∏—Å—Ç—ã
  SHEETS: {
    DEALS: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
    SPEND: '–†–∞—Å—Ö–æ–¥—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',   // –î–∞—Ç–∞ | –ö–∞–Ω–∞–ª | –†–∞—Å—Ö–æ–¥ ‚ÇΩ
    GUESTS: 'Guests RP',           // –¢–µ–ª–µ—Ñ–æ–Ω | TOTAL_AMOUNT/–û–±—â–∞—è —Å—É–º–º–∞/–°—É–º–º–∞
    DASH: '–°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê 2'
  },
  // –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
  SUCCESS: ['–û–ø–ª–∞—á–µ–Ω–æ','–£—Å–ø–µ—à–Ω–æ –≤ –†–ü','–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
  // –°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–ª–æ–Ω–æ–∫
  COLS: {
    created: ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'],
    status:  ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å'],
    budget:  ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç'],
    sumAny:  ['–°—É–º–º–∞ ‚ÇΩ'], // –≤–æ–∑—å–º—ë–º –ü–û–°–õ–ï–î–ù–Æ–Æ "–°—É–º–º–∞ ‚ÇΩ" —Å–ø—Ä–∞–≤–∞ (AX)
    telTag:  ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'],
    utm:     ['UTM_SOURCE','utm_source'],
    phone:   ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    // —Ñ–æ—Ä–º—ã/–ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∏–∑–∏—Ç–∞ —Å —Å–∞–π—Ç–∞ (–¥–ª—è "–ø—Ä—è–º–æ–π —Å–∞–π—Ç")
    lastForm:['–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞','Site.–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞'],
    formId:  ['FORMID'],
    formNm:  ['FORMNAME'],
    ref:     ['REFERER'],
    date:    ['DATE']
  },
  // –°–∏–Ω–æ–Ω–∏–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
  SPEND_COLS: {
    date:   ['–î–∞—Ç–∞','Date'],
    chan:   ['–ö–∞–Ω–∞–ª','Channel'],
    cost:   ['–†–∞—Å—Ö–æ–¥ ‚ÇΩ','Spend','–†–∞—Å—Ö–æ–¥']
  },
  // –°–∏–Ω–æ–Ω–∏–º—ã Guests RP
  GUESTS_COLS: {
    phone: ['–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    total: ['TOTAL_AMOUNT','–û–±—â–∞—è —Å—É–º–º–∞','–°—É–º–º–∞','TOTAL']
  }
};

/********************* –ü–£–ë–õ–ò–ß–ù–û **************************/
function buildE2E(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // 1) –ò—Å—Ç–æ—á–Ω–∏–∫–∏
  const deals = readSheet_(ss, E2E.SHEETS.DEALS);
  const spend = readSheet_(ss, E2E.SHEETS.SPEND);
  const guests= readSheet_(ss, E2E.SHEETS.GUESTS);

  // 2) –ò–Ω–¥–µ–∫—Å—ã —Å–¥–µ–ª–æ–∫
  const i = {
    created: findCol_(deals.header, E2E.COLS.created),
    status:  findCol_(deals.header, E2E.COLS.status),
    budget:  findCol_(deals.header, E2E.COLS.budget),
    telTag:  findCol_(deals.header, E2E.COLS.telTag),
    utm:     findCol_(deals.header, E2E.COLS.utm),
    phone:   findCol_(deals.header, E2E.COLS.phone),
    lastForm:findCol_(deals.header, E2E.COLS.lastForm),
    formId:  findCol_(deals.header, E2E.COLS.formId),
    formNm:  findCol_(deals.header, E2E.COLS.formNm),
    ref:     findCol_(deals.header, E2E.COLS.ref),
    date:    findCol_(deals.header, E2E.COLS.date),
    sumAX:   findRightmost_(deals.header, E2E.COLS.sumAny)
  };

  // 3) –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –ø–æ –º–µ—Å—è—Ü–∞–º
  const sIdx = {
    date: findCol_(spend.header, E2E.SPEND_COLS.date),
    chan: findCol_(spend.header, E2E.SPEND_COLS.chan),
    cost: findCol_(spend.header, E2E.SPEND_COLS.cost)
  };
  const costByChannel = new Map();   // chan -> cost
  const costByMonth   = new Map();   // YYYY-MM -> cost
  spend.rows.forEach(r=>{
    const c = normalizeChannelName_(r[sIdx.chan]);
    const v = toNum_(r[sIdx.cost]);
    const m = ymKey_(r[sIdx.date]).key;
    incMap_(costByChannel, c, v);
    incMap_(costByMonth, m, v);
  });

  // 4) Guests RP: —Ç–µ–ª–µ—Ñ–æ–Ω -> total (LTV-–Ω–∞-—Ç–µ–∫—É—â—É—é-–¥–∞—Ç—É)
  const gIdx = {
    phone: findCol_(guests.header, E2E.GUESTS_COLS.phone),
    total: findCol_(guests.header, E2E.GUESTS_COLS.total)
  };
  const ltvByPhone = new Map();
  guests.rows.forEach(r=>{
    const p = cleanPhone_(r[gIdx.phone]); if (!p) return;
    const v = toNum_(r[gIdx.total]);
    // –≤–æ–∑—å–º—ë–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    ltvByPhone.set(p, Math.max(v, ltvByPhone.get(p)||0));
  });

  // 5) –ü—Ä–æ—Ö–æ–¥ –ø–æ —Å–¥–µ–ª–∫–∞–º
  let totalLeads = 0, totalSuccDeals = 0, totalRevenue = 0;
  const firstSuccessOfPhone = new Map(); // phone -> {date, channel}
  const chanAgg = new Map(); // chan -> {leads, succDeals, revenue, phones:Set() }
  const monthAgg = new Map();// ym -> {leads, succDeals, revenue}

  deals.rows.forEach(r=>{
    const created = r[i.created]; if (!created) return;
    const status  = normalizeStatus_(r[i.status]);
    const ok      = E2E.SUCCESS.includes(status);
    const phone   = cleanPhone_(r[i.phone]);
    const chan    = pickChannel_(r, i);
    const ym      = ymKey_(created).key;

    // –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
    totalLeads++;
    if (ok) totalSuccDeals++;

    // –ø–æ–º–µ—Å—è—á–Ω–æ
    const m = monthAgg.get(ym)||{leads:0,succ:0,rev:0};
    m.leads++; if(ok) m.succ++;
    monthAgg.set(ym, m);

    // –ö–∞–Ω–∞–ª—å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç
    const a = chanAgg.get(chan) || {leads:0, succ:0, rev:0, phones:new Set()};
    a.leads++;
    if (ok){
      a.succ++;
      const rev = revenueFromRow_(r[i.sumAX], r[i.budget]);
      a.rev += rev; totalRevenue += rev;
      // –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –≤–∏–∑–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (phone){
        const cur = firstSuccessOfPhone.get(phone);
        const ts  = toTs_(created);
        if (!cur || ts < cur.ts) firstSuccessOfPhone.set(phone, {ts, chan});
      }
    }
    chanAgg.set(chan, a);
  });

  // 6) –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ –∫–∞–Ω–∞–ª—É (–ø–æ 1-–π —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
  const clientsByChannel = new Map(); // chan -> Set(phones)
  firstSuccessOfPhone.forEach(({chan}, phone)=>{
    const set = clientsByChannel.get(chan)||new Set();
    set.add(phone); clientsByChannel.set(chan, set);
  });

  // 7) –°–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º (+CAC, ROMI, LTV, –∫–æ–Ω–≤–µ—Ä—Å–∏—è)
  const channels = [...chanAgg.entries()].map(([name,a])=>{
    const spend = costByChannel.get(name)||0;
    const clientsSet = clientsByChannel.get(name)||new Set();
    const clients = clientsSet.size;
    const conv = a.leads ? a.succ / a.leads : 0;
    const avgCheck = a.succ ? a.rev / a.succ : 0;
    const cac = clients ? spend / clients : 0;
    const romi = spend ? (a.rev - spend) / spend : 0;

    // LTV: —Å—Ä–µ–¥–Ω–∏–π Guests total –ø–æ —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let ltvSum = 0, ltvCnt = 0;
    clientsSet.forEach(p=>{
      if (ltvByPhone.has(p)){ ltvSum += ltvByPhone.get(p); ltvCnt++; }
    });
    const ltv = ltvCnt ? (ltvSum / ltvCnt) : 0;

    return {name, leads:a.leads, succ:a.succ, clients, revenue:a.rev, spend, cac, romi, conv, avgCheck, ltv};
  });

  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ—Ö–æ–¥—É
  channels.sort((x,y)=>y.revenue - x.revenue);

  // 8) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ KPI
  const totalSpend = [...costByChannel.values()].reduce((s,x)=>s+x,0);
  const totalClients = [...clientsByChannel.values()].reduce((s,set)=>s+set.size,0);
  const totalConv = totalLeads ? totalSuccDeals/totalLeads : 0;
  const totalCAC  = totalClients ? totalSpend/totalClients : 0;
  const totalROMI = totalSpend ? (totalRevenue-totalSpend)/totalSpend : 0;
  const avgCheck  = totalSuccDeals ? totalRevenue/totalSuccDeals : 0;

  // 9) –†–µ–Ω–¥–µ—Ä
  const dash = ss.getSheetByName(E2E.SHEETS.DASH) || ss.insertSheet(E2E.SHEETS.DASH);
  dash.clear();
  dash.getRange(1,1,dash.getMaxRows(),dash.getMaxColumns()).setFontFamily(E2E.FONT);

  let r = 1, c = 1;

  band_(dash, r, c, 1, 16, '#133B5C');
  dash.getRange(r,c,1,16).merge().setValue('üéØ –°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê')
    .setFontColor('#fff').setFontSize(18).setFontWeight('bold').setVerticalAlignment('middle');
  r+=1;
  dash.getRange(r,c).setValue('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:').setFontWeight('bold');
  dash.getRange(r,c+1).setValue(new Date()).setNumberFormat('dd.MM.yyyy, HH:mm:ss'); r+=2;

  // KPI
  section_(dash, r, c, '‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', 10, '#D7ECD9'); r++;
  const kRows = [
    ['–õ–∏–¥—ã', totalLeads, '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫'],
    ['–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏', totalSuccDeals, '–û–ø–ª–∞—á–µ–Ω–æ / –£—Å–ø–µ—à–Ω–æ –≤ –†–ü / –£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    ['–ö–ª–∏–µ–Ω—Ç—ã (—É–Ω–∏–∫.)', totalClients, '–ü–æ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'],
    ['–î–æ—Ö–æ–¥ ‚ÇΩ', totalRevenue, 'AX, –µ—Å–ª–∏ 0 ‚Üí –ë—é–¥–∂–µ—Ç (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ)'],
    ['–†–∞—Å—Ö–æ–¥ ‚ÇΩ', totalSpend, '–°—É–º–º–∞ ¬´–†–∞—Å—Ö–æ–¥—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞¬ª'],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ', avgCheck, '–î–æ—Ö–æ–¥ / –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏'],
    ['CAC ‚ÇΩ', totalCAC, '–†–∞—Å—Ö–æ–¥ / –ö–ª–∏–µ–Ω—Ç—ã (—É–Ω–∏–∫.)'],
    ['ROMI %', totalROMI, '(–î–æ—Ö–æ–¥-–†–∞—Å—Ö–æ–¥)/–†–∞—Å—Ö–æ–¥'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è', totalConv, '–£—Å–ø–µ—à–Ω—ã–µ / –õ–∏–¥—ã']
  ];
  writeTable_(dash, r, c, ['–ú–µ—Ç—Ä–∏–∫–∞','–ó–Ω–∞—á–µ–Ω–∏–µ','–û–ø–∏—Å–∞–Ω–∏–µ'], kRows);
  fmtMoney_(dash, r+3, c+1, 1);   // –î–æ—Ö–æ–¥
  fmtMoney_(dash, r+4, c+1, 1);   // –†–∞—Å—Ö–æ–¥
  fmtMoney_(dash, r+5, c+1, 1);   // –°—Ä. —á–µ–∫
  fmtMoney_(dash, r+6, c+1, 1);   // CAC
  dash.getRange(r+7, c+1).setNumberFormat('0.00%'); // ROMI
  dash.getRange(r+8, c+1).setNumberFormat('0.00%'); // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
  r += kRows.length + 3;

  // –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
  section_(dash, r, c, 'üìà –ö–ê–ù–ê–õ–´ (—Å–∫–≤–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)', 12, '#FFE4CC'); r++;
  const head = ['–ö–∞–Ω–∞–ª','–õ–∏–¥—ã','–£—Å–ø–µ—à–Ω—ã–µ','–ö–ª–∏–µ–Ω—Ç—ã','–î–æ—Ö–æ–¥ ‚ÇΩ','–†–∞—Å—Ö–æ–¥ ‚ÇΩ','CAC ‚ÇΩ','ROMI %','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–°—Ä. —á–µ–∫ ‚ÇΩ','LTV ‚ÇΩ'];
  const body = channels.map(x=>[
    x.name, x.leads, x.succ, x.clients, x.revenue, x.spend, x.cac, x.romi, x.conv, x.avgCheck, x.ltv
  ]);
  writeTable_(dash, r, c, head, body);
  if (body.length){
    fmtMoney_(dash, r+1, c+4, body.length); // –î–æ—Ö–æ–¥
    fmtMoney_(dash, r+1, c+5, body.length); // –†–∞—Å—Ö–æ–¥
    fmtMoney_(dash, r+1, c+6, body.length); // CAC
    dash.getRange(r+1, c+7, body.length, 1).setNumberFormat('0.00%'); // ROMI
    dash.getRange(r+1, c+8, body.length, 1).setNumberFormat('0.00%'); // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    fmtMoney_(dash, r+1, c+9, body.length); // –°—Ä. —á–µ–∫
    fmtMoney_(dash, r+1, c+10, body.length);// LTV
  }
  const chartStart = r; const chartRows = Math.max(2, body.length+1);
  r += body.length + 3;

  // –ü–æ–º–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
  section_(dash, r, c, 'üóìÔ∏è –ü–û –ú–ï–°–Ø–¶–ê–ú', 10, '#E9F2FF'); r++;
  const monthsSorted = [...monthAgg.entries()]
    .map(([key,v])=>({key, label:ymLabel_(key), ...v}))
    .sort((a,b)=>a.key.localeCompare(b.key));
  const mHead = ['–ú–µ—Å—è—Ü','–õ–∏–¥—ã','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–†–∞—Å—Ö–æ–¥ ‚ÇΩ','ROMI %'];
  const mBody = monthsSorted.map(m=>{
    const cost = costByMonth.get(m.key)||0;
    const romi = cost ? (m.rev - cost)/cost : 0;
    return [m.label, m.leads, m.succ, m.rev||0, cost, romi];
  });
  writeTable_(dash, r, c, mHead, mBody);
  if (mBody.length){
    fmtMoney_(dash, r+1, c+3, mBody.length); // –î–æ—Ö–æ–¥
    fmtMoney_(dash, r+1, c+4, mBody.length); // –†–∞—Å—Ö–æ–¥
    dash.getRange(r+1, c+5, mBody.length, 1).setNumberFormat('0.00%');
  }
  r += mBody.length + 2;

  // –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
  try {
    dash.getCharts().forEach(ch=>dash.removeChart(ch));
    const chart = dash.newChart()
      .setChartType(Charts.ChartType.COLUMN)
      .addRange(dash.getRange(chartStart, c, chartRows, 2)) // –ö–∞–Ω–∞–ª | –î–æ—Ö–æ–¥
      .setOption('title','–î–æ—Ö–æ–¥ –ø–æ –∫–∞–Ω–∞–ª–∞–º')
      .setOption('legend.position','none')
      .setOption('useFirstColumnAsDomain', true)
      .setOption('hAxis',{slantedText:true, slantedTextAngle:20})
      .setPosition(chartStart, 10, 0, 0)
      .build();
    dash.insertChart(chart);
  } catch(e){}
}

// –ß–∞—Å–æ–≤–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
function setHourlyTrigger_E2E(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildE2E')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildE2E').timeBased().everyHours(1).create();
}

/********************* –•–ï–õ–ü–ï–†–´ **************************/
function readSheet_(ss, name){
  const sh = ss.getSheetByName(name);
  if (!sh) return {header:[], rows:[]};
  const v = sh.getDataRange().getValues();
  const header = (v[0]||[]).map(String);
  const rows = v.slice(1).filter(r=>r.some(x=>String(x).trim()!==''));
  return {header, rows};
}
function findCol_(header, cand){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const n of cand){
    const k = String(n).trim().toLowerCase();
    let i = norm.indexOf(k);
    if (i>-1) return i;
    i = norm.findIndex(h=>h===k || h.includes(k));
    if (i>-1) return i;
  }
  return -1;
}
function findRightmost_(header, cand){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  let best = -1;
  for (const n of cand){
    const k = String(n).trim().toLowerCase();
    norm.forEach((h,i)=>{ if (h===k || h.includes(k)) best = Math.max(best,i); });
  }
  return best;
}
function normalizeStatus_(raw){
  let s = String(raw||'').trim();
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i,'').replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/,'').trim();
  const rules = [
    [/–æ–ø–ª–∞—á/i,'–û–ø–ª–∞—á–µ–Ω–æ'],
    [/—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i,'–£—Å–ø–µ—à–Ω–æ –≤ –†–ü'],
    [/—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i,'–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ']
  ];
  for (const [re,n] of rules){ if (re.test(s)) return n; }
  return s||'';
}
function revenueFromRow_(ax, budget){
  const A = toNum_(ax);
  if (A>0) return A;
  return toNum_(budget);
}
function toNum_(v){ const n = Number(String(v||'').replace(/\s+/g,'').replace(',','.')); return isNaN(n)?0:n; }
function toTs_(v){ const d = (v instanceof Date)? v : new Date(v); return d.getTime()||0; }
function cleanPhone_(s){
  const d = String(s||'').replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1);
  if (d.length>=10) return d.slice(-10);
  return d;
}
function pickChannel_(r, idx){
  const tel = String(idx.telTag>-1 ? (r[idx.telTag]||'') : '').trim();
  if (tel) return normalizeChannelName_(tel);
  const utm = String(idx.utm>-1 ? (r[idx.utm]||'') : '').trim();
  if (utm) return normalizeChannelName_(utm);
  // –ø—Ä—è–º–æ–π —Å–∞–π—Ç (–æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–æ—Ä–º—É, –Ω–æ utm –ø—É—Å—Ç–æ–π)
  const hasForm = [idx.lastForm,idx.formId,idx.formNm,idx.ref,idx.date]
    .some(i=>i>-1 && String(r[i]||'').trim()!=='');
  return hasForm ? 'direct_site' : '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)';
}
function normalizeChannelName_(s){
  const a = String(s||'').trim().toLowerCase();
  if (a==='ya_map#booking') return 'ya_map';
  return a;
}
function ymKey_(d){
  const dt = (d instanceof Date)? d : new Date(d);
  const y = dt.getFullYear(), m = dt.getMonth()+1;
  return {key:`${y}-${('0'+m).slice(-2)}`};
}
function ymLabel_(key){
  const [y,m] = key.split('-').map(Number);
  const MMM=['–Ø–ù–í','–§–ï–í','–ú–ê–†','–ê–ü–†','–ú–ê–ô','–ò–Æ–ù','–ò–Æ–õ','–ê–í–ì','–°–ï–ù','–û–ö–¢','–ù–û–Ø','–î–ï–ö'][m-1];
  return `${MMM} ‚Äô${String(y).slice(-2)}`;
}
function incMap_(map, k, by){ map.set(k, (map.get(k)||0) + (by||0)); }

// –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
function band_(sh, r,c, rows, cols, bg){ sh.getRange(r,c,rows,cols).setBackground(bg); }
function section_(sh, r,c, title, w, bg){
  const rg = sh.getRange(r,c,1,Math.max(1,w)); try{rg.merge();}catch(e){}
  rg.setValue(title).setBackground(bg).setFontWeight('bold').setFontSize(14)
    .setBorder(null,null,true,null,false,false,'#9BBBD4',SpreadsheetApp.BorderStyle.SOLID);
}
function writeTable_(sh, r,c, head, body){
  const w = head.length, h = Math.max(1, body.length+1);
  sh.getRange(r,c,1,w).setValues([head]).setFontWeight('bold').setBackground('#F3F6FA')
    .setBorder(true,true,true,true,true,true);
  if (body.length){
    const rng = sh.getRange(r+1,c,body.length,w);
    rng.setValues(body);
    // –∑–µ–±—Ä–∞
    const bgs=[]; for(let i=0;i<body.length;i++) bgs.push(new Array(w).fill(i%2? '#FFFFFF':'#FAFDFF'));
    rng.setBackgrounds(bgs).setBorder(true,true,true,true,true,true);
  } else {
    sh.getRange(r+1,c,1,w).setBorder(true,true,true,true,true,true);
  }
}
function fmtMoney_(sh, r,c, n){
  sh.getRange(r,c, n||1, 1).setNumberFormat('# ##0');
}

/********************* –ú–ï–ù–Æ **************************/
function onOpen(){ 
  SpreadsheetApp.getUi()
    .createMenu('E2E –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    .addItem('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∞—à–±–æ—Ä–¥', 'buildE2E')
    .addItem('Hourly-—Ç—Ä–∏–≥–≥–µ—Ä', 'setHourlyTrigger_E2E')
    .addToUi();
}
