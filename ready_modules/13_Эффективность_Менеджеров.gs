/**
 * üë®‚Äçüíº –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Apps Script: https://script.google.com/d/1u77EB0EuYkyO21LhwjVjLJOgHy_dyHZ7TL0rc8yAbbsuLRZG20l0vfUH/edit
 * 2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª: + ‚Üí Script file
 * 3. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª: 13_–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–±–µ–∑ .gs)
 * 4. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ
 * 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Ctrl+S)
 */

/**
 * –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ú–ï–ù–ï–î–ñ–ï–†–û–í
 * –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∏—Ö KPI
 * @fileoverview –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
 */

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * –°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function analyzeManagerPerformance() {
  try {
    logInfo_('MANAGER_PERFORMANCE', '–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
    
    const startTime = new Date();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const managersData = getManagersAnalysisData_();
    
    if (!managersData || managersData.managers.length === 0) {
      logWarning_('MANAGER_PERFORMANCE', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      createEmptyManagersReport_();
      return;
    }
    
    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
    const sheet = getOrCreateSheet_(CONFIG.SHEETS.MANAGER_PERFORMANCE);
    clearSheetData_(sheet);
    applySheetFormatting_(sheet, '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
    
    // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
    createManagersAnalysisStructure_(sheet, managersData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    addManagersAnalysisCharts_(sheet, managersData);
    
    const duration = (new Date() - startTime) / 1000;
    logInfo_('MANAGER_PERFORMANCE', `–ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ ${duration}—Å`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdateTime_(CONFIG.SHEETS.MANAGER_PERFORMANCE);
    
  } catch (error) {
    logError_('MANAGER_PERFORMANCE', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @returns {Object} –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @private
 */
function getManagersAnalysisData_() {
  const rawSheet = getSheet_(CONFIG.SHEETS.RAW_DATA);
  if (!rawSheet) {
    throw new Error('–õ–∏—Å—Ç —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  const rawData = getSheetData_(rawSheet);
  if (rawData.length <= 1) return null;
  
  const headers = rawData[0];
  const rows = rawData.slice(1);
  
  // –ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const managers = analyzeManagers_(headers, rows);
  
  // –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const teamStats = calculateTeamStats_(managers);
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
  const timeAnalysis = analyzeManagersTimePerformance_(headers, rows);
  
  // –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
  const funnelAnalysis = analyzeManagersFunnel_(headers, rows);
  
  // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  const competitiveAnalysis = compareManagers_(managers);
  
  // KPI –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
  const kpiAnalysis = calculateManagerKPIs_(managers, teamStats);
  
  return {
    managers: managers,
    teamStats: teamStats,
    timeAnalysis: timeAnalysis,
    funnelAnalysis: funnelAnalysis,
    competitiveAnalysis: competitiveAnalysis,
    kpiAnalysis: kpiAnalysis,
    totalManagers: managers.length,
    analysisDate: getCurrentDateMoscow_()
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param {Array} rows - –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Array} –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 * @private
 */
function analyzeManagers_(headers, rows) {
  const managerStats = {};
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
  const managerIndex = findHeaderIndex_(headers, '–ú–µ–Ω–µ–¥–∂–µ—Ä') || findHeaderIndex_(headers, '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π');
  const statusIndex = findHeaderIndex_(headers, '–°—Ç–∞—Ç—É—Å');
  const budgetIndex = findHeaderIndex_(headers, '–ë—é–¥–∂–µ—Ç');
  const createdIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
  const closedIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è');
  const channelIndex = findHeaderIndex_(headers, '–ö–∞–Ω–∞–ª');
  const phoneIndex = findHeaderIndex_(headers, '–¢–µ–ª–µ—Ñ–æ–Ω');
  const emailIndex = findHeaderIndex_(headers, 'Email');
  
  if (managerIndex === -1) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞–µ–º –æ–±—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    managerStats['–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä'] = {
      name: '–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä',
      totalLeads: 0,
      wonDeals: 0,
      lostDeals: 0,
      inProgress: 0,
      totalRevenue: 0,
      avgDealValue: 0,
      conversionRate: 0,
      avgDealCycle: 0,
      dealsTimeSum: 0,
      channelDistribution: {},
      monthlyPerformance: {},
      dailyActivity: {},
      clientsWithContact: 0,
      dealSizes: []
    };
  }
  
  rows.forEach(row => {
    const manager = managerIndex !== -1 ? (row[managerIndex] || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') : '–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä';
    const status = row[statusIndex] || '';
    const budget = parseFloat(row[budgetIndex]) || 0;
    const createdDate = parseDate_(row[createdIndex]);
    const closedDate = parseDate_(row[closedIndex]);
    const channel = row[channelIndex] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const phone = row[phoneIndex] || '';
    const email = row[emailIndex] || '';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ—Ç
    if (!managerStats[manager]) {
      managerStats[manager] = {
        name: manager,
        totalLeads: 0,
        wonDeals: 0,
        lostDeals: 0,
        inProgress: 0,
        totalRevenue: 0,
        avgDealValue: 0,
        conversionRate: 0,
        avgDealCycle: 0,
        dealsTimeSum: 0,
        channelDistribution: {},
        monthlyPerformance: {},
        dailyActivity: {},
        clientsWithContact: 0,
        dealSizes: []
      };
    }
    
    const stats = managerStats[manager];
    stats.totalLeads++;
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    if (status === 'success') {
      stats.wonDeals++;
      stats.totalRevenue += budget;
      stats.dealSizes.push(budget);
      
      // –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
      if (createdDate && closedDate && closedDate >= createdDate) {
        const dealCycle = Math.round((closedDate - createdDate) / (1000 * 60 * 60 * 24));
        stats.dealsTimeSum += dealCycle;
      }
    } else if (status === 'failure') {
      stats.lostDeals++;
    } else {
      stats.inProgress++;
    }
    
    // –ö–∞–Ω–∞–ª—ã
    stats.channelDistribution[channel] = (stats.channelDistribution[channel] || 0) + 1;
    
    // –ú–µ—Å—è—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (createdDate) {
      const monthKey = formatDate_(createdDate, 'YYYY-MM');
      if (!stats.monthlyPerformance[monthKey]) {
        stats.monthlyPerformance[monthKey] = { leads: 0, deals: 0, revenue: 0 };
      }
      stats.monthlyPerformance[monthKey].leads++;
      if (status === 'success') {
        stats.monthlyPerformance[monthKey].deals++;
        stats.monthlyPerformance[monthKey].revenue += budget;
      }
      
      // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const dayKey = formatDate_(createdDate, 'YYYY-MM-DD');
      stats.dailyActivity[dayKey] = (stats.dailyActivity[dayKey] || 0) + 1;
    }
    
    // –ü–æ–ª–Ω–æ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (phone || email) {
      stats.clientsWithContact++;
    }
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  return Object.values(managerStats).map(stats => {
    stats.conversionRate = stats.totalLeads > 0 ? (stats.wonDeals / stats.totalLeads * 100) : 0;
    stats.avgDealValue = stats.wonDeals > 0 ? (stats.totalRevenue / stats.wonDeals) : 0;
    stats.avgDealCycle = stats.wonDeals > 0 ? Math.round(stats.dealsTimeSum / stats.wonDeals) : 0;
    stats.contactRate = stats.totalLeads > 0 ? (stats.clientsWithContact / stats.totalLeads * 100) : 0;
    
    // –¢–æ–ø –∫–∞–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    stats.topChannel = Object.entries(stats.channelDistribution)
      .sort(([,a], [,b]) => b - a)[0]?.[0] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã
    stats.activeMonths = Object.keys(stats.monthlyPerformance).length;
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
    stats.activeDays = Object.keys(stats.dailyActivity).length;
    
    // –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏
    if (stats.dealSizes.length > 0) {
      const sortedSizes = stats.dealSizes.sort((a, b) => a - b);
      stats.medianDealSize = sortedSizes[Math.floor(sortedSizes.length / 2)];
      stats.maxDealSize = Math.max(...sortedSizes);
      stats.minDealSize = Math.min(...sortedSizes.filter(size => size > 0));
    } else {
      stats.medianDealSize = 0;
      stats.maxDealSize = 0;
      stats.minDealSize = 0;
    }
    
    // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    const monthlyLeads = Object.values(stats.monthlyPerformance).map(month => month.leads);
    if (monthlyLeads.length > 1) {
      const avgMonthlyLeads = monthlyLeads.reduce((a, b) => a + b, 0) / monthlyLeads.length;
      const variance = monthlyLeads.reduce((sum, leads) => sum + Math.pow(leads - avgMonthlyLeads, 2), 0) / monthlyLeads.length;
      stats.stabilityCoeff = avgMonthlyLeads > 0 ? Math.sqrt(variance) / avgMonthlyLeads : 0;
    } else {
      stats.stabilityCoeff = 0;
    }
    
    return stats;
  }).sort((a, b) => b.totalRevenue - a.totalRevenue);
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @param {Array} managers - –î–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @returns {Object} –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @private
 */
function calculateTeamStats_(managers) {
  const teamStats = {
    totalManagers: managers.length,
    totalLeads: 0,
    totalRevenue: 0,
    totalDeals: 0,
    avgConversionRate: 0,
    avgDealValue: 0,
    avgDealCycle: 0,
    topPerformers: [],
    underPerformers: [],
    medianRevenue: 0
  };
  
  // –°—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  managers.forEach(manager => {
    teamStats.totalLeads += manager.totalLeads;
    teamStats.totalRevenue += manager.totalRevenue;
    teamStats.totalDeals += manager.wonDeals;
  });
  
  // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  if (managers.length > 0) {
    teamStats.avgConversionRate = managers.reduce((sum, mgr) => sum + mgr.conversionRate, 0) / managers.length;
    teamStats.avgDealValue = teamStats.totalDeals > 0 ? teamStats.totalRevenue / teamStats.totalDeals : 0;
    teamStats.avgDealCycle = managers
      .filter(mgr => mgr.avgDealCycle > 0)
      .reduce((sum, mgr) => sum + mgr.avgDealCycle, 0) / Math.max(1, managers.filter(mgr => mgr.avgDealCycle > 0).length);
    
    // –ú–µ–¥–∏–∞–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
    const revenues = managers.map(mgr => mgr.totalRevenue).sort((a, b) => a - b);
    teamStats.medianRevenue = revenues[Math.floor(revenues.length / 2)];
    
    // –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (–≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã –ø–æ –≤—ã—Ä—É—á–∫–µ)
    teamStats.topPerformers = managers.filter(mgr => mgr.totalRevenue > teamStats.medianRevenue);
    
    // –û—Ç—Å—Ç–∞—é—â–∏–µ (–Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã –∏ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π)
    teamStats.underPerformers = managers.filter(mgr => 
      mgr.totalRevenue < teamStats.medianRevenue && 
      mgr.conversionRate < teamStats.avgConversionRate
    );
  }
  
  return teamStats;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param {Array} rows - –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
 * @private
 */
function analyzeManagersTimePerformance_(headers, rows) {
  const timeAnalysis = {
    monthlyTrends: {},
    weeklyActivity: {},
    hourlyActivity: {}
  };
  
  const managerIndex = findHeaderIndex_(headers, '–ú–µ–Ω–µ–¥–∂–µ—Ä') || findHeaderIndex_(headers, '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π');
  const createdIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
  const statusIndex = findHeaderIndex_(headers, '–°—Ç–∞—Ç—É—Å');
  
  rows.forEach(row => {
    const manager = managerIndex !== -1 ? (row[managerIndex] || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') : '–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä';
    const createdDate = parseDate_(row[createdIndex]);
    const status = row[statusIndex] || '';
    
    if (!createdDate) return;
    
    const monthKey = formatDate_(createdDate, 'YYYY-MM');
    const dayOfWeek = createdDate.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    const hour = createdDate.getHours();
    
    // –ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
    if (!timeAnalysis.monthlyTrends[monthKey]) {
      timeAnalysis.monthlyTrends[monthKey] = {};
    }
    if (!timeAnalysis.monthlyTrends[monthKey][manager]) {
      timeAnalysis.monthlyTrends[monthKey][manager] = { leads: 0, deals: 0 };
    }
    timeAnalysis.monthlyTrends[monthKey][manager].leads++;
    if (status === 'success') {
      timeAnalysis.monthlyTrends[monthKey][manager].deals++;
    }
    
    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    if (!timeAnalysis.weeklyActivity[manager]) {
      timeAnalysis.weeklyActivity[manager] = {};
    }
    timeAnalysis.weeklyActivity[manager][dayOfWeek] = (timeAnalysis.weeklyActivity[manager][dayOfWeek] || 0) + 1;
    
    // –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (!timeAnalysis.hourlyActivity[manager]) {
      timeAnalysis.hourlyActivity[manager] = {};
    }
    timeAnalysis.hourlyActivity[manager][hour] = (timeAnalysis.hourlyActivity[manager][hour] || 0) + 1;
  });
  
  return timeAnalysis;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param {Array} rows - –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
 * @private
 */
function analyzeManagersFunnel_(headers, rows) {
  const funnelAnalysis = {};
  
  const managerIndex = findHeaderIndex_(headers, '–ú–µ–Ω–µ–¥–∂–µ—Ä') || findHeaderIndex_(headers, '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π');
  const statusIndex = findHeaderIndex_(headers, '–°—Ç–∞—Ç—É—Å');
  const budgetIndex = findHeaderIndex_(headers, '–ë—é–¥–∂–µ—Ç');
  
  rows.forEach(row => {
    const manager = managerIndex !== -1 ? (row[managerIndex] || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') : '–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä';
    const status = row[statusIndex] || '';
    const budget = parseFloat(row[budgetIndex]) || 0;
    
    if (!funnelAnalysis[manager]) {
      funnelAnalysis[manager] = {
        manager: manager,
        newLeads: 0,
        qualified: 0,
        proposal: 0,
        negotiation: 0,
        closed: 0,
        lost: 0
      };
    }
    
    const funnel = funnelAnalysis[manager];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –≤–æ—Ä–æ–Ω–∫–∏
    if (status === 'success') {
      funnel.closed++;
    } else if (status === 'failure') {
      funnel.lost++;
    } else if (budget > 0) {
      funnel.proposal++;
    } else if (status === 'qualified') {
      funnel.qualified++;
    } else if (status === 'negotiation') {
      funnel.negotiation++;
    } else {
      funnel.newLeads++;
    }
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
  return Object.values(funnelAnalysis).map(funnel => {
    const totalLeads = funnel.newLeads + funnel.qualified + funnel.proposal + funnel.negotiation + funnel.closed + funnel.lost;
    
    funnel.qualificationRate = totalLeads > 0 ? (funnel.qualified / totalLeads * 100) : 0;
    funnel.proposalRate = (funnel.qualified + funnel.proposal) > 0 ? (funnel.proposal / (funnel.qualified + funnel.proposal) * 100) : 0;
    funnel.closingRate = (funnel.proposal + funnel.negotiation + funnel.closed) > 0 ? (funnel.closed / (funnel.proposal + funnel.negotiation + funnel.closed) * 100) : 0;
    funnel.overallConversion = totalLeads > 0 ? (funnel.closed / totalLeads * 100) : 0;
    
    return funnel;
  }).sort((a, b) => b.closed - a.closed);
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π
 * @param {Array} managers - –î–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @returns {Object} –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
 * @private
 */
function compareManagers_(managers) {
  if (managers.length < 2) return { rankings: {}, gaps: {} };
  
  const rankings = {
    byRevenue: [...managers].sort((a, b) => b.totalRevenue - a.totalRevenue),
    byConversion: [...managers].sort((a, b) => b.conversionRate - a.conversionRate),
    byDealValue: [...managers].sort((a, b) => b.avgDealValue - a.avgDealValue),
    bySpeed: [...managers].filter(m => m.avgDealCycle > 0).sort((a, b) => a.avgDealCycle - b.avgDealCycle),
    byVolume: [...managers].sort((a, b) => b.totalLeads - a.totalLeads)
  };
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑—Ä—ã–≤–æ–≤ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const gaps = {};
  
  if (rankings.byRevenue.length >= 2) {
    const top = rankings.byRevenue[0];
    const bottom = rankings.byRevenue[rankings.byRevenue.length - 1];
    
    gaps.revenueGap = {
      topManager: top.name,
      topValue: top.totalRevenue,
      bottomManager: bottom.name,
      bottomValue: bottom.totalRevenue,
      gapMultiple: bottom.totalRevenue > 0 ? top.totalRevenue / bottom.totalRevenue : 0
    };
  }
  
  if (rankings.byConversion.length >= 2) {
    const topConv = rankings.byConversion[0];
    const bottomConv = rankings.byConversion[rankings.byConversion.length - 1];
    
    gaps.conversionGap = {
      topManager: topConv.name,
      topValue: topConv.conversionRate,
      bottomManager: bottomConv.name,
      bottomValue: bottomConv.conversionRate,
      gapDifference: topConv.conversionRate - bottomConv.conversionRate
    };
  }
  
  return { rankings, gaps };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç KPI –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @param {Array} managers - –î–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @param {Object} teamStats - –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Array} KPI –∞–Ω–∞–ª–∏–∑
 * @private
 */
function calculateManagerKPIs_(managers, teamStats) {
  return managers.map(manager => {
    // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π KPI Score (–æ—Ç 0 –¥–æ 100)
    let kpiScore = 0;
    
    // –í–µ—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ KPI
    const weights = {
      revenue: 0.3,        // 30% - –≤—ã—Ä—É—á–∫–∞
      conversion: 0.25,    // 25% - –∫–æ–Ω–≤–µ—Ä—Å–∏—è
      volume: 0.2,         // 20% - –æ–±—ä—ë–º —Ä–∞–±–æ—Ç—ã
      speed: 0.15,         // 15% - —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è
      stability: 0.1       // 10% - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    };
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–∞–Ω–¥—ã
    const revenueScore = teamStats.totalRevenue > 0 ? 
      Math.min(100, (manager.totalRevenue / teamStats.totalRevenue) * 100 * teamStats.totalManagers) : 0;
    
    const conversionScore = Math.min(100, manager.conversionRate);
    
    const volumeScore = teamStats.totalLeads > 0 ? 
      Math.min(100, (manager.totalLeads / teamStats.totalLeads) * 100 * teamStats.totalManagers) : 0;
    
    const speedScore = manager.avgDealCycle > 0 && teamStats.avgDealCycle > 0 ? 
      Math.max(0, 100 - (manager.avgDealCycle / teamStats.avgDealCycle - 1) * 50) : 50;
    
    const stabilityScore = Math.max(0, 100 - manager.stabilityCoeff * 100);
    
    // –ò—Ç–æ–≥–æ–≤—ã–π KPI
    kpiScore = 
      revenueScore * weights.revenue +
      conversionScore * weights.conversion +
      volumeScore * weights.volume +
      speedScore * weights.speed +
      stabilityScore * weights.stability;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    let category;
    if (kpiScore >= 80) category = 'üåü –ó–≤–µ–∑–¥–∞';
    else if (kpiScore >= 60) category = 'üöÄ –°–∏–ª—å–Ω—ã–π';
    else if (kpiScore >= 40) category = 'üìà –°—Ä–µ–¥–Ω–∏–π';
    else if (kpiScore >= 20) category = 'üìâ –°–ª–∞–±—ã–π';
    else category = 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π';
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    const recommendations = [];
    
    if (manager.conversionRate < teamStats.avgConversionRate * 0.8) {
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ª–∏–¥–æ–≤');
    }
    if (manager.avgDealCycle > teamStats.avgDealCycle * 1.3) {
      recommendations.push('–°–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫');
    }
    if (manager.totalLeads < teamStats.totalLeads / teamStats.totalManagers * 0.7) {
      recommendations.push('–£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ª–∏–¥–∞–º–∏');
    }
    if (manager.stabilityCoeff > 0.5) {
      recommendations.push('–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã');
    }
    if (manager.contactRate < 80) {
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    return {
      manager: manager.name,
      kpiScore: Math.round(kpiScore),
      category: category,
      components: {
        revenue: Math.round(revenueScore),
        conversion: Math.round(conversionScore),
        volume: Math.round(volumeScore),
        speed: Math.round(speedScore),
        stability: Math.round(stabilityScore)
      },
      recommendations: recommendations,
      strengths: identifyStrengths_(manager, teamStats),
      weaknesses: identifyWeaknesses_(manager, teamStats)
    };
  }).sort((a, b) => b.kpiScore - a.kpiScore);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function identifyStrengths_(manager, teamStats) {
  const strengths = [];
  
  if (manager.conversionRate > teamStats.avgConversionRate * 1.2) {
    strengths.push('–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è');
  }
  if (manager.avgDealValue > teamStats.avgDealValue * 1.2) {
    strengths.push('–ö—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏');
  }
  if (manager.avgDealCycle > 0 && manager.avgDealCycle < teamStats.avgDealCycle * 0.8) {
    strengths.push('–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ');
  }
  if (manager.stabilityCoeff < 0.3) {
    strengths.push('–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
  }
  if (manager.contactRate > 90) {
    strengths.push('–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏');
  }
  
  return strengths;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
function identifyWeaknesses_(manager, teamStats) {
  const weaknesses = [];
  
  if (manager.conversionRate < teamStats.avgConversionRate * 0.8) {
    weaknesses.push('–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è');
  }
  if (manager.avgDealValue < teamStats.avgDealValue * 0.8) {
    weaknesses.push('–ú–µ–ª–∫–∏–µ —Å–¥–µ–ª–∫–∏');
  }
  if (manager.avgDealCycle > teamStats.avgDealCycle * 1.3) {
    weaknesses.push('–î–æ–ª–≥–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ');
  }
  if (manager.stabilityCoeff > 0.6) {
    weaknesses.push('–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
  }
  if (manager.contactRate < 70) {
    weaknesses.push('–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  return weaknesses;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
 * @param {Object} managersData - –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @private
 */
function createManagersAnalysisStructure_(sheet, managersData) {
  let currentRow = 3;
  
  // 1. –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  sheet.getRange('A3:B3').merge();
  sheet.getRange('A3').setValue('üë• –ö–û–ú–ê–ù–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  applyHeaderStyle_(sheet.getRange('A3:B3'));
  currentRow += 2;
  
  const teamStats = [
    ['–í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', managersData.teamStats.totalManagers],
    ['–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ª–∏–¥–æ–≤:', managersData.teamStats.totalLeads],
    ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:', formatCurrency_(managersData.teamStats.totalRevenue)],
    ['–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã:', `${managersData.teamStats.avgConversionRate.toFixed(1)}%`],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∫–æ–º–∞–Ω–¥—ã:', formatCurrency_(managersData.teamStats.avgDealValue)],
    ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:', managersData.teamStats.avgDealCycle > 0 ? `${Math.round(managersData.teamStats.avgDealCycle)} –¥–Ω.` : '–ù/–î'],
    ['–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', managersData.teamStats.topPerformers.length],
    ['–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:', managersData.teamStats.underPerformers.length]
  ];
  
  sheet.getRange(currentRow, 1, teamStats.length, 2).setValues(teamStats);
  sheet.getRange(currentRow, 1, teamStats.length, 1).setFontWeight('bold');
  currentRow += teamStats.length + 2;
  
  // 2. –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ KPI
  sheet.getRange(currentRow, 1, 1, 7).merge();
  sheet.getRange(currentRow, 1).setValue('üèÜ –†–ï–ô–¢–ò–ù–ì –ú–ï–ù–ï–î–ñ–ï–†–û–í –ü–û KPI');
  applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 7));
  currentRow++;
  
  const kpiHeaders = [['–ú–µ–Ω–µ–¥–∂–µ—Ä', 'KPI Score', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–õ–∏–¥—ã', '–°–¥–µ–ª–∫–∏', '–í—ã—Ä—É—á–∫–∞', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è']];
  sheet.getRange(currentRow, 1, 1, 7).setValues(kpiHeaders);
  applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 7));
  currentRow++;
  
  const kpiData = managersData.kpiAnalysis.map((kpi, index) => {
    const manager = managersData.managers.find(m => m.name === kpi.manager);
    return [
      kpi.manager,
      kpi.kpiScore,
      kpi.category,
      manager.totalLeads,
      manager.wonDeals,
      formatCurrency_(manager.totalRevenue),
      `${manager.conversionRate.toFixed(1)}%`
    ];
  });
  
  if (kpiData.length > 0) {
    sheet.getRange(currentRow, 1, kpiData.length, 7).setValues(kpiData);
    
    // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    kpiData.forEach((row, index) => {
      const categoryCell = sheet.getRange(currentRow + index, 3);
      const kpiCell = sheet.getRange(currentRow + index, 2);
      
      if (row[2].includes('–ó–≤–µ–∑–¥–∞')) {
        categoryCell.setBackground('#d4edda');
        kpiCell.setBackground('#d4edda');
      } else if (row[2].includes('–°–∏–ª—å–Ω—ã–π')) {
        categoryCell.setBackground('#cce5ff');
        kpiCell.setBackground('#cce5ff');
      } else if (row[2].includes('–°—Ä–µ–¥–Ω–∏–π')) {
        categoryCell.setBackground('#fff3cd');
        kpiCell.setBackground('#fff3cd');
      } else if (row[2].includes('–°–ª–∞–±—ã–π')) {
        categoryCell.setBackground('#ffe6cc');
        kpiCell.setBackground('#ffe6cc');
      } else if (row[2].includes('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π')) {
        categoryCell.setBackground('#f8d7da');
        kpiCell.setBackground('#f8d7da');
      }
    });
    
    currentRow += kpiData.length;
  }
  currentRow += 2;
  
  // 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
  sheet.getRange(currentRow, 1, 1, 9).merge();
  sheet.getRange(currentRow, 1).setValue('üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ù–ï–î–ñ–ï–†–û–í');
  applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 9));
  currentRow++;
  
  const detailHeaders = [['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–õ–∏–¥—ã', '–°–¥–µ–ª–∫–∏', '–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏', '–¢–æ–ø –∫–∞–Ω–∞–ª', '–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π', '–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö']];
  sheet.getRange(currentRow, 1, 1, 9).setValues(detailHeaders);
  applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 9));
  currentRow++;
  
  const detailData = managersData.managers.map(manager => [
    manager.name,
    manager.totalLeads,
    manager.wonDeals,
    formatCurrency_(manager.totalRevenue),
    formatCurrency_(manager.avgDealValue),
    manager.avgDealCycle > 0 ? `${manager.avgDealCycle} –¥–Ω.` : '–ù/–î',
    manager.topChannel,
    manager.activeDays,
    `${manager.contactRate.toFixed(1)}%`
  ]);
  
  if (detailData.length > 0) {
    sheet.getRange(currentRow, 1, detailData.length, 9).setValues(detailData);
    currentRow += detailData.length;
  }
  currentRow += 2;
  
  // 4. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const top3Managers = managersData.managers.slice(0, 3);
  top3Managers.forEach((manager, index) => {
    const kpiInfo = managersData.kpiAnalysis.find(kpi => kpi.manager === manager.name);
    
    sheet.getRange(currentRow, 1, 1, 6).merge();
    sheet.getRange(currentRow, 1).setValue(`${index + 1}. ${manager.name.toUpperCase()} - ${kpiInfo.category}`);
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 6));
    currentRow++;
    
    const managerDetails = [
      ['–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:', ''],
      [`‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤`, manager.totalLeads],
      [`‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`, `${manager.wonDeals} (${manager.conversionRate.toFixed(1)}%)`],
      [`‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞`, formatCurrency_(manager.totalRevenue)],
      [`‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫`, formatCurrency_(manager.avgDealValue)],
      [`‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞`, formatCurrency_(manager.medianDealSize)],
      [`‚Ä¢ –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫`, manager.avgDealCycle > 0 ? `${manager.avgDealCycle} –¥–Ω–µ–π` : '–ù/–î'],
      ['–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', ''],
      [`‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤`, manager.activeMonths],
      [`‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π`, manager.activeDays],
      [`‚Ä¢ –¢–æ–ø –∫–∞–Ω–∞–ª`, manager.topChannel],
      [`‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`, `${manager.contactRate.toFixed(1)}%`]
    ];
    
    sheet.getRange(currentRow, 1, managerDetails.length, 2).setValues(managerDetails);
    sheet.getRange(currentRow, 1).setFontWeight('bold');
    sheet.getRange(currentRow + 7, 1).setFontWeight('bold');
    currentRow += managerDetails.length;
    
    // KPI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if (kpiInfo) {
      sheet.getRange(currentRow, 1).setValue('KPI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
      sheet.getRange(currentRow, 1).setFontWeight('bold');
      currentRow++;
      
      const kpiComponents = [
        [`‚Ä¢ –í—ã—Ä—É—á–∫–∞`, `${kpiInfo.components.revenue}/100`],
        [`‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è`, `${kpiInfo.components.conversion}/100`],
        [`‚Ä¢ –û–±—ä—ë–º —Ä–∞–±–æ—Ç—ã`, `${kpiInfo.components.volume}/100`],
        [`‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å`, `${kpiInfo.components.speed}/100`],
        [`‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å`, `${kpiInfo.components.stability}/100`]
      ];
      
      sheet.getRange(currentRow, 1, kpiComponents.length, 2).setValues(kpiComponents);
      currentRow += kpiComponents.length;
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (kpiInfo.recommendations.length > 0) {
        sheet.getRange(currentRow, 1).setValue('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        sheet.getRange(currentRow, 1).setFontWeight('bold');
        currentRow++;
        
        kpiInfo.recommendations.forEach(recommendation => {
          sheet.getRange(currentRow, 1).setValue(`‚Ä¢ ${recommendation}`);
          currentRow++;
        });
      }
    }
    
    currentRow += 2;
  });
  
  // 5. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑—Ä—ã–≤–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
  if (managersData.competitiveAnalysis.gaps.revenueGap) {
    sheet.getRange(currentRow, 1, 1, 4).merge();
    sheet.getRange(currentRow, 1).setValue('üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–†–´–í–û–í –í –ö–û–ú–ê–ù–î–ï');
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    const gap = managersData.competitiveAnalysis.gaps.revenueGap;
    const convGap = managersData.competitiveAnalysis.gaps.conversionGap;
    
    const gapAnalysis = [
      ['–†–∞–∑—Ä—ã–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:', ''],
      [`‚Ä¢ –õ–∏–¥–µ—Ä: ${gap.topManager}`, formatCurrency_(gap.topValue)],
      [`‚Ä¢ –ê—É—Ç—Å–∞–π–¥–µ—Ä: ${gap.bottomManager}`, formatCurrency_(gap.bottomValue)],
      [`‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞`, `–≤ ${gap.gapMultiple.toFixed(1)} —Ä–∞–∑`],
      ['', ''],
      ['–†–∞–∑—Ä—ã–≤ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:', ''],
      [`‚Ä¢ –õ–∏–¥–µ—Ä: ${convGap.topManager}`, `${convGap.topValue.toFixed(1)}%`],
      [`‚Ä¢ –ê—É—Ç—Å–∞–π–¥–µ—Ä: ${convGap.bottomManager}`, `${convGap.bottomValue.toFixed(1)}%`],
      [`‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞`, `${convGap.gapDifference.toFixed(1)} –ø.–ø.`]
    ];
    
    sheet.getRange(currentRow, 1, gapAnalysis.length, 2).setValues(gapAnalysis);
    sheet.getRange(currentRow, 1).setFontWeight('bold');
    sheet.getRange(currentRow + 5, 1).setFontWeight('bold');
    currentRow += gapAnalysis.length;
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
  sheet.autoResizeColumns(1, 9);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –¥–∞–Ω–Ω—ã–º
  const dataRange = sheet.getRange(3, 1, currentRow - 3, 9);
  applyDataStyle_(dataRange);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –∫ –∞–Ω–∞–ª–∏–∑—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
 * @param {Object} managersData - –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
 * @private
 */
function addManagersAnalysisCharts_(sheet, managersData) {
  // 1. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
  if (managersData.managers.length > 0) {
    const revenueChartData = [['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–í—ã—Ä—É—á–∫–∞']].concat(
      managersData.managers.slice(0, 8).map(manager => [manager.name, manager.totalRevenue])
    );
    
    const revenueChart = sheet.insertChart(
      Charts.newColumnChart()
        .setDataRange(sheet.getRange(1, 11, revenueChartData.length, 2))
        .setOption('title', '–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'none' })
        .setOption('hAxis', { title: '–ú–µ–Ω–µ–¥–∂–µ—Ä', slantedText: true })
        .setOption('vAxis', { title: '–í—ã—Ä—É—á–∫–∞, —Ä—É–±.' })
        .setPosition(3, 11, 0, 0)
        .setOption('width', 600)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 11, revenueChartData.length, 2).setValues(revenueChartData);
  }
  
  // 2. –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: –∫–æ–Ω–≤–µ—Ä—Å–∏—è vs –æ–±—ä—ë–º
  if (managersData.managers.length > 0) {
    const scatterData = [['–ö–æ–Ω–≤–µ—Ä—Å–∏—è %', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤', '–ú–µ–Ω–µ–¥–∂–µ—Ä']].concat(
      managersData.managers.map(manager => [manager.conversionRate, manager.totalLeads, manager.name])
    );
    
    const scatterChart = sheet.insertChart(
      Charts.newScatterChart()
        .setDataRange(sheet.getRange(1, 14, scatterData.length, 3))
        .setOption('title', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è vs –û–±—ä—ë–º —Ä–∞–±–æ—Ç—ã')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'none' })
        .setOption('hAxis', { title: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %' })
        .setOption('vAxis', { title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤' })
        .setPosition(3, 18, 0, 0)
        .setOption('width', 500)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 14, scatterData.length, 3).setValues(scatterData);
  }
  
  // 3. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ KPI –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (managersData.kpiAnalysis.length > 0) {
    const categoryCount = {};
    managersData.kpiAnalysis.forEach(kpi => {
      const category = kpi.category.replace(/^[^\w]+\s/, ''); // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
      categoryCount[category] = (categoryCount[category] || 0) + 1;
    });
    
    const categoryChartData = [['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']].concat(
      Object.entries(categoryCount).map(([category, count]) => [category, count])
    );
    
    const categoryChart = sheet.insertChart(
      Charts.newPieChart()
        .setDataRange(sheet.getRange(1, 18, categoryChartData.length, 2))
        .setOption('title', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'right' })
        .setOption('chartArea', { width: '80%', height: '80%' })
        .setPosition(25, 11, 0, 0)
        .setOption('width', 500)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 18, categoryChartData.length, 2).setValues(categoryChartData);
  }
  
  // 4. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ KPI Score
  if (managersData.kpiAnalysis.length > 0) {
    const kpiChartData = [['–ú–µ–Ω–µ–¥–∂–µ—Ä', 'KPI Score']].concat(
      managersData.kpiAnalysis.map(kpi => [kpi.manager, kpi.kpiScore])
    );
    
    const kpiChart = sheet.insertChart(
      Charts.newColumnChart()
        .setDataRange(sheet.getRange(1, 21, kpiChartData.length, 2))
        .setOption('title', 'KPI Score –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'none' })
        .setOption('hAxis', { title: '–ú–µ–Ω–µ–¥–∂–µ—Ä', slantedText: true })
        .setOption('vAxis', { title: 'KPI Score', minValue: 0, maxValue: 100 })
        .setPosition(25, 18, 0, 0)
        .setOption('width', 600)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 21, kpiChartData.length, 2).setValues(kpiChartData);
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
 * @private
 */
function createEmptyManagersReport_() {
  const sheet = getOrCreateSheet_(CONFIG.SHEETS.MANAGER_PERFORMANCE);
  clearSheetData_(sheet);
  applySheetFormatting_(sheet, '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
  
  sheet.getRange('A3').setValue('‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
  sheet.getRange('A3').setFontSize(14).setFontWeight('bold');
  sheet.getRange('A5').setValue('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
  sheet.getRange('A6').setValue('‚Ä¢ –í –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã');
  sheet.getRange('A7').setValue('‚Ä¢ –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Å–¥–µ–ª–æ–∫');
  sheet.getRange('A8').setValue('‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CRM');
  
  updateLastUpdateTime_(CONFIG.SHEETS.MANAGER_PERFORMANCE);
}
