/**
 * üìÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ú–µ—Å—è—Ü–µ–≤ - –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Apps Script: https://script.google.com/d/1u77EB0EuYkyO21LhwjVjLJOgHy_dyHZ7TL0rc8yAbbsuLRZG20l0vfUH/edit
 * 2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª: + ‚Üí Script file
 * 3. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª: 14_–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_–ú–µ—Å—è—Ü–µ–≤ (–±–µ–∑ .gs)
 * 4. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ
 * 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Ctrl+S)
 */

/**
 * –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –ú–ï–°–Ø–¶–ê–ú
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
 * @fileoverview –ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
 */

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * –°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
 */
function generateMonthlyComparison() {
  try {
    logInfo_('MONTHLY_COMPARISON', '–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
    
    const startTime = new Date();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const monthlyData = getMonthlyComparisonData_();
    
    if (!monthlyData || monthlyData.monthlyStats.length === 0) {
      logWarning_('MONTHLY_COMPARISON', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      createEmptyMonthlyReport_();
      return;
    }
    
    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
    const sheet = getOrCreateSheet_(CONFIG.SHEETS.MONTHLY_COMPARISON);
    clearSheetData_(sheet);
    applySheetFormatting_(sheet, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º');
    
    // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
    createMonthlyComparisonStructure_(sheet, monthlyData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    addMonthlyComparisonCharts_(sheet, monthlyData);
    
    const duration = (new Date() - startTime) / 1000;
    logInfo_('MONTHLY_COMPARISON', `–ú–µ—Å—è—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${duration}—Å`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdateTime_(CONFIG.SHEETS.MONTHLY_COMPARISON);
    
  } catch (error) {
    logError_('MONTHLY_COMPARISON', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @returns {Object} –î–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @private
 */
function getMonthlyComparisonData_() {
  const rawSheet = getSheet_(CONFIG.SHEETS.RAW_DATA);
  if (!rawSheet) {
    throw new Error('–õ–∏—Å—Ç —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  const rawData = getSheetData_(rawSheet);
  if (rawData.length <= 1) return null;
  
  const headers = rawData[0];
  const rows = rawData.slice(1);
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const monthlyStats = generateMonthlyStats_(headers, rows);
  
  // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–µ–≤
  const comparison = compareMonthlyPerformance_(monthlyStats);
  
  // –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
  const trendAnalysis = analyzeMonthlyTrends_(monthlyStats);
  
  // –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  const seasonalAnalysis = analyzeSeasonalPatterns_(monthlyStats);
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø–æ–º–µ—Å—è—á–Ω–æ
  const channelAnalysis = analyzeMonthlyChannels_(headers, rows);
  
  // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
  const forecasting = generateMonthlyForecasts_(monthlyStats);
  
  // –ê–Ω–æ–º–∞–ª–∏–∏ –∏ –≤—ã–±—Ä–æ—Å—ã
  const anomalies = detectMonthlyAnomalies_(monthlyStats);
  
  return {
    monthlyStats: monthlyStats,
    comparison: comparison,
    trendAnalysis: trendAnalysis,
    seasonalAnalysis: seasonalAnalysis,
    channelAnalysis: channelAnalysis,
    forecasting: forecasting,
    anomalies: anomalies,
    totalMonths: monthlyStats.length,
    analysisDate: getCurrentDateMoscow_()
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param {Array} rows - –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Array} –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @private
 */
function generateMonthlyStats_(headers, rows) {
  const monthlyStats = {};
  
  const createdIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
  const statusIndex = findHeaderIndex_(headers, '–°—Ç–∞—Ç—É—Å');
  const budgetIndex = findHeaderIndex_(headers, '–ë—é–¥–∂–µ—Ç');
  const channelIndex = findHeaderIndex_(headers, '–ö–∞–Ω–∞–ª');
  const sourceIndex = findHeaderIndex_(headers, 'UTM Source');
  const closedIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è');
  
  rows.forEach(row => {
    const createdDate = parseDate_(row[createdIndex]);
    if (!createdDate) return;
    
    const monthKey = formatDate_(createdDate, 'YYYY-MM');
    const monthName = `${getMonthName_(createdDate.getMonth())} ${createdDate.getFullYear()}`;
    const status = row[statusIndex] || '';
    const budget = parseFloat(row[budgetIndex]) || 0;
    const channel = row[channelIndex] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const source = row[sourceIndex] || 'direct';
    const closedDate = parseDate_(row[closedIndex]);
    
    if (!monthlyStats[monthKey]) {
      monthlyStats[monthKey] = {
        monthKey: monthKey,
        monthName: monthName,
        year: createdDate.getFullYear(),
        month: createdDate.getMonth() + 1,
        quarter: Math.floor(createdDate.getMonth() / 3) + 1,
        totalLeads: 0,
        successfulDeals: 0,
        failedDeals: 0,
        inProgressDeals: 0,
        totalRevenue: 0,
        avgDealValue: 0,
        conversionRate: 0,
        avgDealCycle: 0,
        channels: {},
        sources: {},
        dealCycles: [],
        workingDays: 0,
        leadsPerWorkingDay: 0,
        revenuePerWorkingDay: 0
      };
    }
    
    const monthStats = monthlyStats[monthKey];
    monthStats.totalLeads++;
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    if (status === 'success') {
      monthStats.successfulDeals++;
      monthStats.totalRevenue += budget;
      
      // –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
      if (closedDate && closedDate >= createdDate) {
        const dealCycle = Math.round((closedDate - createdDate) / (1000 * 60 * 60 * 24));
        monthStats.dealCycles.push(dealCycle);
      }
    } else if (status === 'failure') {
      monthStats.failedDeals++;
    } else {
      monthStats.inProgressDeals++;
    }
    
    // –ö–∞–Ω–∞–ª—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    monthStats.channels[channel] = (monthStats.channels[channel] || 0) + 1;
    monthStats.sources[source] = (monthStats.sources[source] || 0) + 1;
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
  return Object.values(monthlyStats)
    .map(monthStats => {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      monthStats.conversionRate = monthStats.totalLeads > 0 ? 
        (monthStats.successfulDeals / monthStats.totalLeads * 100) : 0;
      monthStats.avgDealValue = monthStats.successfulDeals > 0 ? 
        (monthStats.totalRevenue / monthStats.successfulDeals) : 0;
      monthStats.avgDealCycle = monthStats.dealCycles.length > 0 ?
        Math.round(monthStats.dealCycles.reduce((a, b) => a + b, 0) / monthStats.dealCycles.length) : 0;
      
      // –†–∞–±–æ—á–∏–µ –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ)
      monthStats.workingDays = getWorkingDaysInMonth_(monthStats.year, monthStats.month - 1);
      monthStats.leadsPerWorkingDay = monthStats.workingDays > 0 ? 
        Math.round(monthStats.totalLeads / monthStats.workingDays * 10) / 10 : 0;
      monthStats.revenuePerWorkingDay = monthStats.workingDays > 0 ? 
        Math.round(monthStats.totalRevenue / monthStats.workingDays) : 0;
      
      // –¢–æ–ø –∫–∞–Ω–∞–ª –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ—Å—è—Ü–∞
      monthStats.topChannel = Object.entries(monthStats.channels)
        .sort(([,a], [,b]) => b - a)[0]?.[0] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      monthStats.topSource = Object.entries(monthStats.sources)
        .sort(([,a], [,b]) => b - a)[0]?.[0] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      
      return monthStats;
    })
    .sort((a, b) => a.monthKey.localeCompare(b.monthKey));
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
 * @param {Array} monthlyStats - –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Object} –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
 * @private
 */
function compareMonthlyPerformance_(monthlyStats) {
  if (monthlyStats.length < 2) return { monthToMonth: [], bestMonths: {}, worstMonths: {} };
  
  const comparison = {
    monthToMonth: [],
    bestMonths: {},
    worstMonths: {},
    yearOverYear: []
  };
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É
  for (let i = 1; i < monthlyStats.length; i++) {
    const current = monthlyStats[i];
    const previous = monthlyStats[i - 1];
    
    comparison.monthToMonth.push({
      currentMonth: current.monthName,
      previousMonth: previous.monthName,
      leadsChange: calculateGrowthRate_(previous.totalLeads, current.totalLeads),
      revenueChange: calculateGrowthRate_(previous.totalRevenue, current.totalRevenue),
      conversionChange: previous.conversionRate > 0 ? 
        ((current.conversionRate - previous.conversionRate) / previous.conversionRate * 100) : 0,
      dealValueChange: calculateGrowthRate_(previous.avgDealValue, current.avgDealValue)
    });
  }
  
  // –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –º–µ—Å—è—Ü—ã
  const sortedByRevenue = [...monthlyStats].sort((a, b) => b.totalRevenue - a.totalRevenue);
  const sortedByLeads = [...monthlyStats].sort((a, b) => b.totalLeads - a.totalLeads);
  const sortedByConversion = [...monthlyStats].sort((a, b) => b.conversionRate - a.conversionRate);
  
  comparison.bestMonths = {
    byRevenue: sortedByRevenue[0],
    byLeads: sortedByLeads[0],
    byConversion: sortedByConversion[0]
  };
  
  comparison.worstMonths = {
    byRevenue: sortedByRevenue[sortedByRevenue.length - 1],
    byLeads: sortedByLeads[sortedByLeads.length - 1],
    byConversion: sortedByConversion[sortedByConversion.length - 1]
  };
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–¥ –∫ –≥–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç)
  const yearGroups = {};
  monthlyStats.forEach(month => {
    const monthNum = month.month;
    if (!yearGroups[monthNum]) yearGroups[monthNum] = [];
    yearGroups[monthNum].push(month);
  });
  
  Object.keys(yearGroups).forEach(monthNum => {
    const monthsData = yearGroups[monthNum].sort((a, b) => a.year - b.year);
    if (monthsData.length >= 2) {
      for (let i = 1; i < monthsData.length; i++) {
        comparison.yearOverYear.push({
          month: getMonthName_(parseInt(monthNum) - 1),
          currentYear: monthsData[i].year,
          previousYear: monthsData[i - 1].year,
          leadsChange: calculateGrowthRate_(monthsData[i - 1].totalLeads, monthsData[i].totalLeads),
          revenueChange: calculateGrowthRate_(monthsData[i - 1].totalRevenue, monthsData[i].totalRevenue)
        });
      }
    }
  });
  
  return comparison;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
 * @param {Array} monthlyStats - –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Object} –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
 * @private
 */
function analyzeMonthlyTrends_(monthlyStats) {
  if (monthlyStats.length < 3) return { trends: {}, movingAverages: {}, acceleration: {} };
  
  const leads = monthlyStats.map(m => m.totalLeads);
  const revenue = monthlyStats.map(m => m.totalRevenue);
  const conversion = monthlyStats.map(m => m.conversionRate);
  const dealValue = monthlyStats.map(m => m.avgDealValue);
  
  const trends = {
    leads: calculateTrendDirection_(leads),
    revenue: calculateTrendDirection_(revenue),
    conversion: calculateTrendDirection_(conversion),
    dealValue: calculateTrendDirection_(dealValue)
  };
  
  // –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (3 –º–µ—Å—è—Ü–∞)
  const movingAverages = {
    leads: calculateMovingAverage_(leads, 3),
    revenue: calculateMovingAverage_(revenue, 3),
    conversion: calculateMovingAverage_(conversion, 3)
  };
  
  // –£—Å–∫–æ—Ä–µ–Ω–∏–µ/–∑–∞–º–µ–¥–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞
  const acceleration = {};
  if (monthlyStats.length >= 6) {
    const recentGrowth = calculateAverageGrowth_(revenue.slice(-3));
    const earlierGrowth = calculateAverageGrowth_(revenue.slice(-6, -3));
    
    acceleration.revenue = {
      recent: recentGrowth,
      earlier: earlierGrowth,
      isAccelerating: recentGrowth > earlierGrowth,
      change: recentGrowth - earlierGrowth
    };
  }
  
  return { trends, movingAverages, acceleration };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 * @param {Array} monthlyStats - –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Object} –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
 * @private
 */
function analyzeSeasonalPatterns_(monthlyStats) {
  const seasonalAnalysis = {
    quarters: {
      'Q1': { months: [], avgLeads: 0, avgRevenue: 0, avgConversion: 0 },
      'Q2': { months: [], avgLeads: 0, avgRevenue: 0, avgConversion: 0 },
      'Q3': { months: [], avgLeads: 0, avgRevenue: 0, avgConversion: 0 },
      'Q4': { months: [], avgLeads: 0, avgRevenue: 0, avgConversion: 0 }
    },
    monthlyAverages: {},
    peakMonths: [],
    lowMonths: []
  };
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
  monthlyStats.forEach(month => {
    const quarterKey = `Q${month.quarter}`;
    seasonalAnalysis.quarters[quarterKey].months.push(month);
  });
  
  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
  Object.keys(seasonalAnalysis.quarters).forEach(quarter => {
    const months = seasonalAnalysis.quarters[quarter].months;
    if (months.length > 0) {
      seasonalAnalysis.quarters[quarter].avgLeads = 
        Math.round(months.reduce((sum, m) => sum + m.totalLeads, 0) / months.length);
      seasonalAnalysis.quarters[quarter].avgRevenue = 
        Math.round(months.reduce((sum, m) => sum + m.totalRevenue, 0) / months.length);
      seasonalAnalysis.quarters[quarter].avgConversion = 
        Math.round(months.reduce((sum, m) => sum + m.conversionRate, 0) / months.length * 10) / 10;
    }
  });
  
  // –°—Ä–µ–¥–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º –≥–æ–¥–∞ (1-12)
  for (let monthNum = 1; monthNum <= 12; monthNum++) {
    const monthsData = monthlyStats.filter(m => m.month === monthNum);
    if (monthsData.length > 0) {
      seasonalAnalysis.monthlyAverages[monthNum] = {
        monthName: getMonthName_(monthNum - 1),
        avgLeads: Math.round(monthsData.reduce((sum, m) => sum + m.totalLeads, 0) / monthsData.length),
        avgRevenue: Math.round(monthsData.reduce((sum, m) => sum + m.totalRevenue, 0) / monthsData.length),
        years: monthsData.length
      };
    }
  }
  
  // –ü–∏–∫–æ–≤—ã–µ –∏ —Å–ª–∞–±—ã–µ –º–µ—Å—è—Ü—ã
  const sortedByPerformance = Object.values(seasonalAnalysis.monthlyAverages)
    .sort((a, b) => b.avgRevenue - a.avgRevenue);
  
  seasonalAnalysis.peakMonths = sortedByPerformance.slice(0, 3);
  seasonalAnalysis.lowMonths = sortedByPerformance.slice(-3).reverse();
  
  return seasonalAnalysis;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –º–µ—Å—è—Ü–∞–º
 * @param {Array} headers - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param {Array} rows - –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
 * @private
 */
function analyzeMonthlyChannels_(headers, rows) {
  const channelAnalysis = {};
  
  const createdIndex = findHeaderIndex_(headers, '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
  const channelIndex = findHeaderIndex_(headers, '–ö–∞–Ω–∞–ª');
  const statusIndex = findHeaderIndex_(headers, '–°—Ç–∞—Ç—É—Å');
  const budgetIndex = findHeaderIndex_(headers, '–ë—é–¥–∂–µ—Ç');
  
  rows.forEach(row => {
    const createdDate = parseDate_(row[createdIndex]);
    if (!createdDate) return;
    
    const monthKey = formatDate_(createdDate, 'YYYY-MM');
    const monthName = `${getMonthName_(createdDate.getMonth())} ${createdDate.getFullYear()}`;
    const channel = row[channelIndex] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const status = row[statusIndex] || '';
    const budget = parseFloat(row[budgetIndex]) || 0;
    
    if (!channelAnalysis[monthKey]) {
      channelAnalysis[monthKey] = {
        monthKey: monthKey,
        monthName: monthName,
        channels: {}
      };
    }
    
    if (!channelAnalysis[monthKey].channels[channel]) {
      channelAnalysis[monthKey].channels[channel] = {
        leads: 0,
        conversions: 0,
        revenue: 0,
        conversionRate: 0
      };
    }
    
    const channelStats = channelAnalysis[monthKey].channels[channel];
    channelStats.leads++;
    
    if (status === 'success') {
      channelStats.conversions++;
      channelStats.revenue += budget;
    }
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
  Object.values(channelAnalysis).forEach(monthData => {
    Object.keys(monthData.channels).forEach(channel => {
      const channelStats = monthData.channels[channel];
      channelStats.conversionRate = channelStats.leads > 0 ? 
        (channelStats.conversions / channelStats.leads * 100) : 0;
    });
  });
  
  return Object.values(channelAnalysis);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
 * @param {Array} monthlyStats - –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Object} –ü—Ä–æ–≥–Ω–æ–∑—ã
 * @private
 */
function generateMonthlyForecasts_(monthlyStats) {
  if (monthlyStats.length < 6) return { forecasts: [], reliability: 'low' };
  
  const lastMonths = monthlyStats.slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
  
  // –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
  const leadsTrend = calculateLinearTrend_(lastMonths.map(m => m.totalLeads));
  const revenueTrend = calculateLinearTrend_(lastMonths.map(m => m.totalRevenue));
  
  // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –º–µ—Å—è—Ü–∞
  const forecasts = [];
  const lastMonth = monthlyStats[monthlyStats.length - 1];
  
  for (let i = 1; i <= 3; i++) {
    const forecastDate = new Date(lastMonth.year, lastMonth.month - 1 + i, 1);
    const forecastMonthName = `${getMonthName_(forecastDate.getMonth())} ${forecastDate.getFullYear()}`;
    
    const forecastLeads = Math.round(leadsTrend.slope * (lastMonths.length + i) + leadsTrend.intercept);
    const forecastRevenue = Math.round(revenueTrend.slope * (lastMonths.length + i) + revenueTrend.intercept);
    
    forecasts.push({
      monthName: forecastMonthName,
      forecastLeads: Math.max(0, forecastLeads),
      forecastRevenue: Math.max(0, forecastRevenue),
      confidence: i === 1 ? '–≤—ã—Å–æ–∫–∞—è' : i === 2 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è'
    });
  }
  
  // –û—Ü–µ–Ω–∫–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
  const reliability = leadsTrend.r2 > 0.7 ? 'high' : leadsTrend.r2 > 0.4 ? 'medium' : 'low';
  
  return { forecasts, reliability, trendStrength: leadsTrend.r2 };
}

/**
 * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
 * @param {Array} monthlyStats - –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * @returns {Array} –ê–Ω–æ–º–∞–ª–∏–∏
 * @private
 */
function detectMonthlyAnomalies_(monthlyStats) {
  if (monthlyStats.length < 6) return [];
  
  const anomalies = [];
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const leads = monthlyStats.map(m => m.totalLeads);
  const revenue = monthlyStats.map(m => m.totalRevenue);
  const conversion = monthlyStats.map(m => m.conversionRate);
  
  const leadsStats = calculateStats_(leads);
  const revenueStats = calculateStats_(revenue);
  const conversionStats = calculateStats_(conversion);
  
  // –ò—â–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ (–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ 1.5 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
  monthlyStats.forEach(month => {
    const leadsZScore = Math.abs((month.totalLeads - leadsStats.mean) / leadsStats.std);
    const revenueZScore = Math.abs((month.totalRevenue - revenueStats.mean) / revenueStats.std);
    const conversionZScore = Math.abs((month.conversionRate - conversionStats.mean) / conversionStats.std);
    
    if (leadsZScore > 1.5) {
      anomalies.push({
        month: month.monthName,
        type: month.totalLeads > leadsStats.mean ? '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' : '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        metric: '–õ–∏–¥—ã',
        value: month.totalLeads,
        expected: Math.round(leadsStats.mean),
        deviation: `${leadsZScore.toFixed(1)}œÉ`
      });
    }
    
    if (revenueZScore > 1.5 && month.totalRevenue > 0) {
      anomalies.push({
        month: month.monthName,
        type: month.totalRevenue > revenueStats.mean ? '–í—ã—Å–æ–∫–∞—è –≤—ã—Ä—É—á–∫–∞' : '–ù–∏–∑–∫–∞—è –≤—ã—Ä—É—á–∫–∞',
        metric: '–í—ã—Ä—É—á–∫–∞',
        value: formatCurrency_(month.totalRevenue),
        expected: formatCurrency_(revenueStats.mean),
        deviation: `${revenueZScore.toFixed(1)}œÉ`
      });
    }
    
    if (conversionZScore > 1.5) {
      anomalies.push({
        month: month.monthName,
        type: month.conversionRate > conversionStats.mean ? '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è' : '–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è',
        metric: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
        value: `${month.conversionRate.toFixed(1)}%`,
        expected: `${conversionStats.mean.toFixed(1)}%`,
        deviation: `${conversionZScore.toFixed(1)}œÉ`
      });
    }
  });
  
  return anomalies.slice(0, 8); // –¢–æ–ø 8 –∞–Ω–æ–º–∞–ª–∏–π
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
 * @param {Object} monthlyData - –î–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @private
 */
function createMonthlyComparisonStructure_(sheet, monthlyData) {
  let currentRow = 3;
  
  // 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ
  sheet.getRange('A3:B3').merge();
  sheet.getRange('A3').setValue('üìÖ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –ü–ï–†–ò–û–î');
  applyHeaderStyle_(sheet.getRange('A3:B3'));
  currentRow += 2;
  
  const firstMonth = monthlyData.monthlyStats[0];
  const lastMonth = monthlyData.monthlyStats[monthlyData.monthlyStats.length - 1];
  const totalLeads = monthlyData.monthlyStats.reduce((sum, m) => sum + m.totalLeads, 0);
  const totalRevenue = monthlyData.monthlyStats.reduce((sum, m) => sum + m.totalRevenue, 0);
  
  const periodInfo = [
    ['–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:', `${firstMonth.monthName} - ${lastMonth.monthName}`],
    ['–í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤:', monthlyData.totalMonths],
    ['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤:', totalLeads],
    ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:', formatCurrency_(totalRevenue)],
    ['–°—Ä–µ–¥–Ω–µ–µ –ª–∏–¥–æ–≤ –≤ –º–µ—Å—è—Ü:', Math.round(totalLeads / monthlyData.totalMonths)],
    ['–°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:', formatCurrency_(totalRevenue / monthlyData.totalMonths)]
  ];
  
  sheet.getRange(currentRow, 1, periodInfo.length, 2).setValues(periodInfo);
  sheet.getRange(currentRow, 1, periodInfo.length, 1).setFontWeight('bold');
  currentRow += periodInfo.length + 2;
  
  // 2. –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –º–µ—Å—è—Ü—ã
  sheet.getRange(currentRow, 1, 1, 6).merge();
  sheet.getRange(currentRow, 1).setValue('üèÜ –õ–£–ß–®–ò–ï –ò –•–£–î–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´');
  applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 6));
  currentRow++;
  
  const bestWorstHeaders = [['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–õ—É—á—à–∏–π –º–µ—Å—è—Ü', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–•—É–¥—à–∏–π –º–µ—Å—è—Ü', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–†–∞–∑–Ω–∏—Ü–∞']];
  sheet.getRange(currentRow, 1, 1, 6).setValues(bestWorstHeaders);
  applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 6));
  currentRow++;
  
  const bestWorstData = [
    [
      '–í—ã—Ä—É—á–∫–∞',
      monthlyData.comparison.bestMonths.byRevenue.monthName,
      formatCurrency_(monthlyData.comparison.bestMonths.byRevenue.totalRevenue),
      monthlyData.comparison.worstMonths.byRevenue.monthName,
      formatCurrency_(monthlyData.comparison.worstMonths.byRevenue.totalRevenue),
      `–≤ ${(monthlyData.comparison.bestMonths.byRevenue.totalRevenue / 
        Math.max(1, monthlyData.comparison.worstMonths.byRevenue.totalRevenue)).toFixed(1)} —Ä–∞–∑`
    ],
    [
      '–õ–∏–¥—ã',
      monthlyData.comparison.bestMonths.byLeads.monthName,
      monthlyData.comparison.bestMonths.byLeads.totalLeads,
      monthlyData.comparison.worstMonths.byLeads.monthName,
      monthlyData.comparison.worstMonths.byLeads.totalLeads,
      `–≤ ${(monthlyData.comparison.bestMonths.byLeads.totalLeads / 
        Math.max(1, monthlyData.comparison.worstMonths.byLeads.totalLeads)).toFixed(1)} —Ä–∞–∑`
    ],
    [
      '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
      monthlyData.comparison.bestMonths.byConversion.monthName,
      `${monthlyData.comparison.bestMonths.byConversion.conversionRate.toFixed(1)}%`,
      monthlyData.comparison.worstMonths.byConversion.monthName,
      `${monthlyData.comparison.worstMonths.byConversion.conversionRate.toFixed(1)}%`,
      `+${(monthlyData.comparison.bestMonths.byConversion.conversionRate - 
        monthlyData.comparison.worstMonths.byConversion.conversionRate).toFixed(1)} –ø.–ø.`
    ]
  ];
  
  sheet.getRange(currentRow, 1, bestWorstData.length, 6).setValues(bestWorstData);
  currentRow += bestWorstData.length + 2;
  
  // 3. –î–µ—Ç–∞–ª—å–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  sheet.getRange(currentRow, 1, 1, 9).merge();
  sheet.getRange(currentRow, 1).setValue('üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú');
  applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 9));
  currentRow++;
  
  const monthlyHeaders = [['–ú–µ—Å—è—Ü', '–õ–∏–¥—ã', '–°–¥–µ–ª–∫–∏', '–í—ã—Ä—É—á–∫–∞', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏', '–õ–∏–¥—ã/–¥–µ–Ω—å', '–¢–æ–ø –∫–∞–Ω–∞–ª']];
  sheet.getRange(currentRow, 1, 1, 9).setValues(monthlyHeaders);
  applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 9));
  currentRow++;
  
  const monthlyDetailsData = monthlyData.monthlyStats.map(month => [
    month.monthName,
    month.totalLeads,
    month.successfulDeals,
    formatCurrency_(month.totalRevenue),
    `${month.conversionRate.toFixed(1)}%`,
    formatCurrency_(month.avgDealValue),
    month.avgDealCycle > 0 ? `${month.avgDealCycle} –¥–Ω.` : '–ù/–î',
    month.leadsPerWorkingDay,
    month.topChannel
  ]);
  
  if (monthlyDetailsData.length > 0) {
    sheet.getRange(currentRow, 1, monthlyDetailsData.length, 9).setValues(monthlyDetailsData);
    currentRow += monthlyDetailsData.length;
  }
  currentRow += 2;
  
  // 4. –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
  if (monthlyData.trendAnalysis.trends) {
    sheet.getRange(currentRow, 1, 1, 4).merge();
    sheet.getRange(currentRow, 1).setValue('üìà –¢–†–ï–ù–î–û–í–´–ô –ê–ù–ê–õ–ò–ó');
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    const trendHeaders = [['–ú–µ—Ç—Ä–∏–∫–∞', '–¢—Ä–µ–Ω–¥', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–û—Ü–µ–Ω–∫–∞']];
    sheet.getRange(currentRow, 1, 1, 4).setValues(trendHeaders);
    applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    const trends = monthlyData.trendAnalysis.trends;
    const trendData = [
      ['–õ–∏–¥—ã', trends.leads.direction, trends.leads.direction === '–†–æ—Å—Ç' ? 'üìà' : trends.leads.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? 'üìâ' : '‚û°Ô∏è', 
       trends.leads.direction === '–†–æ—Å—Ç' ? '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ' : trends.leads.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' : '–°—Ç–∞–±–∏–ª—å–Ω–æ'],
      ['–í—ã—Ä—É—á–∫–∞', trends.revenue.direction, trends.revenue.direction === '–†–æ—Å—Ç' ? 'üìà' : trends.revenue.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? 'üìâ' : '‚û°Ô∏è',
       trends.revenue.direction === '–†–æ—Å—Ç' ? '–û—Ç–ª–∏—á–Ω–æ' : trends.revenue.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? '–ö—Ä–∏—Ç–∏—á–Ω–æ' : '–°—Ç–∞–±–∏–ª—å–Ω–æ'],
      ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è', trends.conversion.direction, trends.conversion.direction === '–†–æ—Å—Ç' ? 'üìà' : trends.conversion.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? 'üìâ' : '‚û°Ô∏è',
       trends.conversion.direction === '–†–æ—Å—Ç' ? '–£–ª—É—á—à–∞–µ—Ç—Å—è' : trends.conversion.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? '–£—Ö—É–¥—à–∞–µ—Ç—Å—è' : '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'],
      ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', trends.dealValue.direction, trends.dealValue.direction === '–†–æ—Å—Ç' ? 'üìà' : trends.dealValue.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? 'üìâ' : '‚û°Ô∏è',
       trends.dealValue.direction === '–†–æ—Å—Ç' ? '–†–∞—Å—Ç—ë—Ç –∫–∞—á–µ—Å—Ç–≤–æ' : trends.dealValue.direction === '–°–Ω–∏–∂–µ–Ω–∏–µ' ? '–°–Ω–∏–∂–∞–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ' : '–°—Ç–∞–±–∏–ª—å–Ω–æ']
    ];
    
    sheet.getRange(currentRow, 1, trendData.length, 4).setValues(trendData);
    
    // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
    trendData.forEach((row, index) => {
      const directionCell = sheet.getRange(currentRow + index, 3);
      const evaluationCell = sheet.getRange(currentRow + index, 4);
      
      if (row[2] === 'üìà') {
        directionCell.setBackground(CONFIG.COLORS.SUCCESS_LIGHT);
        evaluationCell.setBackground(CONFIG.COLORS.SUCCESS_LIGHT);
      } else if (row[2] === 'üìâ') {
        directionCell.setBackground(CONFIG.COLORS.ERROR_LIGHT);
        evaluationCell.setBackground(CONFIG.COLORS.ERROR_LIGHT);
      }
    });
    
    currentRow += trendData.length + 2;
  }
  
  // 5. –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  if (monthlyData.seasonalAnalysis && monthlyData.seasonalAnalysis.peakMonths.length > 0) {
    sheet.getRange(currentRow, 1, 1, 4).merge();
    sheet.getRange(currentRow, 1).setValue('üóìÔ∏è –°–ï–ó–û–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´');
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    // –ü–∏–∫–æ–≤—ã–µ –º–µ—Å—è—Ü—ã
    sheet.getRange(currentRow, 1).setValue('–õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –≥–æ–¥–∞:');
    sheet.getRange(currentRow, 1).setFontWeight('bold');
    currentRow++;
    
    monthlyData.seasonalAnalysis.peakMonths.forEach((month, index) => {
      sheet.getRange(currentRow, 1).setValue(`${index + 1}. ${month.monthName}`);
      sheet.getRange(currentRow, 2).setValue(`${month.avgLeads} –ª–∏–¥–æ–≤`);
      sheet.getRange(currentRow, 3).setValue(formatCurrency_(month.avgRevenue));
      currentRow++;
    });
    currentRow++;
    
    // –°–ª–∞–±—ã–µ –º–µ—Å—è—Ü—ã
    sheet.getRange(currentRow, 1).setValue('–°–ª–∞–±—ã–µ –º–µ—Å—è—Ü—ã –≥–æ–¥–∞:');
    sheet.getRange(currentRow, 1).setFontWeight('bold');
    currentRow++;
    
    monthlyData.seasonalAnalysis.lowMonths.forEach((month, index) => {
      sheet.getRange(currentRow, 1).setValue(`${index + 1}. ${month.monthName}`);
      sheet.getRange(currentRow, 2).setValue(`${month.avgLeads} –ª–∏–¥–æ–≤`);
      sheet.getRange(currentRow, 3).setValue(formatCurrency_(month.avgRevenue));
      currentRow++;
    });
    currentRow += 2;
  }
  
  // 6. –ü—Ä–æ–≥–Ω–æ–∑—ã
  if (monthlyData.forecasting.forecasts.length > 0) {
    sheet.getRange(currentRow, 1, 1, 4).merge();
    sheet.getRange(currentRow, 1).setValue('üîÆ –ü–†–û–ì–ù–û–ó –ù–ê –ë–õ–ò–ñ–ê–ô–®–ò–ï –ú–ï–°–Ø–¶–´');
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    sheet.getRange(currentRow, 1).setValue(`–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: ${
      monthlyData.forecasting.reliability === 'high' ? '–í—ã—Å–æ–∫–∞—è' :
      monthlyData.forecasting.reliability === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–ù–∏–∑–∫–∞—è'
    }`);
    sheet.getRange(currentRow, 1).setFontWeight('bold');
    currentRow += 2;
    
    const forecastHeaders = [['–ú–µ—Å—è—Ü', '–ü—Ä–æ–≥–Ω–æ–∑ –ª–∏–¥–æ–≤', '–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']];
    sheet.getRange(currentRow, 1, 1, 4).setValues(forecastHeaders);
    applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 4));
    currentRow++;
    
    const forecastData = monthlyData.forecasting.forecasts.map(forecast => [
      forecast.monthName,
      forecast.forecastLeads,
      formatCurrency_(forecast.forecastRevenue),
      forecast.confidence
    ]);
    
    sheet.getRange(currentRow, 1, forecastData.length, 4).setValues(forecastData);
    currentRow += forecastData.length + 2;
  }
  
  // 7. –ê–Ω–æ–º–∞–ª–∏–∏
  if (monthlyData.anomalies.length > 0) {
    sheet.getRange(currentRow, 1, 1, 5).merge();
    sheet.getRange(currentRow, 1).setValue('‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ê–ù–û–ú–ê–õ–ò–ò');
    applyHeaderStyle_(sheet.getRange(currentRow, 1, 1, 5));
    currentRow++;
    
    const anomalyHeaders = [['–ú–µ—Å—è—Ü', '–¢–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏', '–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']];
    sheet.getRange(currentRow, 1, 1, 5).setValues(anomalyHeaders);
    applySubheaderStyle_(sheet.getRange(currentRow, 1, 1, 5));
    currentRow++;
    
    const anomalyData = monthlyData.anomalies.map(anomaly => [
      anomaly.month,
      anomaly.type,
      anomaly.metric,
      typeof anomaly.value === 'string' ? anomaly.value : anomaly.value.toString(),
      anomaly.deviation
    ]);
    
    sheet.getRange(currentRow, 1, anomalyData.length, 5).setValues(anomalyData);
    
    // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
    anomalyData.forEach((row, index) => {
      const typeCell = sheet.getRange(currentRow + index, 2);
      if (row[1].includes('–í—ã—Å–æ–∫–∞—è') || row[1].includes('–í—ã—Å–æ–∫–∏–π')) {
        typeCell.setBackground(CONFIG.COLORS.SUCCESS_LIGHT);
      } else if (row[1].includes('–ù–∏–∑–∫–∞—è') || row[1].includes('–ù–∏–∑–∫–∏–π')) {
        typeCell.setBackground(CONFIG.COLORS.WARNING_LIGHT);
      }
    });
    
    currentRow += anomalyData.length;
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
  sheet.autoResizeColumns(1, 9);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –¥–∞–Ω–Ω—ã–º
  const dataRange = sheet.getRange(3, 1, currentRow - 3, 9);
  applyDataStyle_(dataRange);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –∫ –º–µ—Å—è—á–Ω–æ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
 * @param {Object} monthlyData - –î–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @private
 */
function addMonthlyComparisonCharts_(sheet, monthlyData) {
  // 1. –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –≤—ã—Ä—É—á–∫–∏
  if (monthlyData.monthlyStats.length > 0) {
    const dynamicsChartData = [['–ú–µ—Å—è—Ü', '–õ–∏–¥—ã', '–í—ã—Ä—É—á–∫–∞ (—Ç—ã—Å. —Ä—É–±.)']].concat(
      monthlyData.monthlyStats.map(month => [
        month.monthName.substring(0, 7), // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month.totalLeads,
        Math.round(month.totalRevenue / 1000)
      ])
    );
    
    const dynamicsChart = sheet.insertChart(
      Charts.newLineChart()
        .setDataRange(sheet.getRange(1, 11, dynamicsChartData.length, 3))
        .setOption('title', '–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'top' })
        .setOption('hAxis', { title: '–ú–µ—Å—è—Ü', slantedText: true })
        .setOption('vAxes', {
          0: { title: '–õ–∏–¥—ã' },
          1: { title: '–í—ã—Ä—É—á–∫–∞, —Ç—ã—Å. —Ä—É–±.' }
        })
        .setOption('series', {
          0: { targetAxisIndex: 0, color: '#4285f4' },
          1: { targetAxisIndex: 1, color: '#34a853' }
        })
        .setPosition(3, 11, 0, 0)
        .setOption('width', 800)
        .setOption('height', 400)
        .build()
    );
    
    sheet.getRange(1, 11, dynamicsChartData.length, 3).setValues(dynamicsChartData);
  }
  
  // 2. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  if (monthlyData.monthlyStats.length > 0) {
    const conversionChartData = [['–ú–µ—Å—è—Ü', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è %']].concat(
      monthlyData.monthlyStats.map(month => [
        month.monthName.substring(0, 7),
        month.conversionRate
      ])
    );
    
    const conversionChart = sheet.insertChart(
      Charts.newLineChart()
        .setDataRange(sheet.getRange(1, 15, conversionChartData.length, 2))
        .setOption('title', '–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'none' })
        .setOption('hAxis', { title: '–ú–µ—Å—è—Ü', slantedText: true })
        .setOption('vAxis', { title: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %' })
        .setOption('curveType', 'function')
        .setPosition(3, 21, 0, 0)
        .setOption('width', 600)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 15, conversionChartData.length, 2).setValues(conversionChartData);
  }
  
  // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª–æ–≤
  if (monthlyData.seasonalAnalysis && monthlyData.seasonalAnalysis.quarters) {
    const quarterChartData = [['–ö–≤–∞—Ä—Ç–∞–ª', '–°—Ä–µ–¥–Ω–∏–µ –ª–∏–¥—ã', '–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ (—Ç—ã—Å.)']];
    
    Object.entries(monthlyData.seasonalAnalysis.quarters).forEach(([quarter, data]) => {
      if (data.months.length > 0) {
        quarterChartData.push([
          quarter,
          data.avgLeads,
          Math.round(data.avgRevenue / 1000)
        ]);
      }
    });
    
    if (quarterChartData.length > 1) {
      const quarterChart = sheet.insertChart(
        Charts.newColumnChart()
          .setDataRange(sheet.getRange(1, 18, quarterChartData.length, 3))
          .setOption('title', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª–æ–≤')
          .setOption('titleTextStyle', { fontSize: 14, bold: true })
          .setOption('legend', { position: 'top' })
          .setOption('hAxis', { title: '–ö–≤–∞—Ä—Ç–∞–ª' })
          .setOption('vAxes', {
            0: { title: '–õ–∏–¥—ã' },
            1: { title: '–í—ã—Ä—É—á–∫–∞, —Ç—ã—Å. —Ä—É–±.' }
          })
          .setOption('series', {
            0: { targetAxisIndex: 0, color: '#4285f4' },
            1: { targetAxisIndex: 1, color: '#34a853' }
          })
          .setPosition(25, 11, 0, 0)
          .setOption('width', 500)
          .setOption('height', 350)
          .build()
      );
      
      sheet.getRange(1, 18, quarterChartData.length, 3).setValues(quarterChartData);
    }
  }
  
  // 4. –ü—Ä–æ–≥–Ω–æ–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
  if (monthlyData.forecasting.forecasts.length > 0) {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    const forecastChartData = [['–ú–µ—Å—è—Ü', '–§–∞–∫—Ç –ª–∏–¥—ã', '–ü—Ä–æ–≥–Ω–æ–∑ –ª–∏–¥—ã']];
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const recentMonths = monthlyData.monthlyStats.slice(-6);
    recentMonths.forEach(month => {
      forecastChartData.push([month.monthName.substring(0, 7), month.totalLeads, null]);
    });
    
    // –ü—Ä–æ–≥–Ω–æ–∑—ã
    monthlyData.forecasting.forecasts.forEach(forecast => {
      forecastChartData.push([
        forecast.monthName.substring(0, 7),
        null,
        forecast.forecastLeads
      ]);
    });
    
    const forecastChart = sheet.insertChart(
      Charts.newLineChart()
        .setDataRange(sheet.getRange(1, 22, forecastChartData.length, 3))
        .setOption('title', '–ü—Ä–æ–≥–Ω–æ–∑ –ª–∏–¥–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã')
        .setOption('titleTextStyle', { fontSize: 14, bold: true })
        .setOption('legend', { position: 'top' })
        .setOption('hAxis', { title: '–ú–µ—Å—è—Ü', slantedText: true })
        .setOption('vAxis', { title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤' })
        .setOption('series', {
          0: { color: '#4285f4', lineWidth: 2 },
          1: { color: '#ea4335', lineWidth: 2, lineDashStyle: [4, 4] }
        })
        .setPosition(25, 21, 0, 0)
        .setOption('width', 600)
        .setOption('height', 350)
        .build()
    );
    
    sheet.getRange(1, 22, forecastChartData.length, 3).setValues(forecastChartData);
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
 */

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
 */
function getWorkingDaysInMonth_(year, month) {
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  let workingDays = 0;
  
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month, day);
    const dayOfWeek = date.getDay();
    if (dayOfWeek !== 0 && dayOfWeek !== 6) { // –ù–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –Ω–µ —Å—É–±–±–æ—Ç–∞
      workingDays++;
    }
  }
  
  return workingDays;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
 */
function calculateTrendDirection_(values) {
  if (values.length < 3) return { direction: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', slope: 0 };
  
  const trend = calculateLinearTrend_(values);
  let direction;
  
  if (Math.abs(trend.slope) < 0.1) direction = '–°—Ç–∞–±–∏–ª—å–Ω–æ';
  else if (trend.slope > 0) direction = '–†–æ—Å—Ç';
  else direction = '–°–Ω–∏–∂–µ–Ω–∏–µ';
  
  return { direction: direction, slope: trend.slope };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
 */
function calculateLinearTrend_(values) {
  const n = values.length;
  if (n < 2) return { slope: 0, intercept: 0, r2: 0 };
  
  const sumX = (n * (n - 1)) / 2;
  const sumY = values.reduce((a, b) => a + b, 0);
  const sumXY = values.reduce((sum, y, x) => sum + x * y, 0);
  const sumXX = (n * (n - 1) * (2 * n - 1)) / 6;
  const sumYY = values.reduce((sum, y) => sum + y * y, 0);
  
  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
  const intercept = (sumY - slope * sumX) / n;
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤
  const yMean = sumY / n;
  const ssRes = values.reduce((sum, y, x) => {
    const predicted = slope * x + intercept;
    return sum + Math.pow(y - predicted, 2);
  }, 0);
  const ssTot = values.reduce((sum, y) => sum + Math.pow(y - yMean, 2), 0);
  const r2 = ssTot > 0 ? 1 - (ssRes / ssTot) : 0;
  
  return { slope, intercept, r2 };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞
 */
function calculateAverageGrowth_(values) {
  if (values.length < 2) return 0;
  
  let totalGrowth = 0;
  let validPairs = 0;
  
  for (let i = 1; i < values.length; i++) {
    if (values[i - 1] > 0) {
      totalGrowth += ((values[i] - values[i - 1]) / values[i - 1]) * 100;
      validPairs++;
    }
  }
  
  return validPairs > 0 ? totalGrowth / validPairs : 0;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
function calculateStats_(values) {
  const n = values.length;
  const mean = values.reduce((a, b) => a + b, 0) / n;
  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / n;
  const std = Math.sqrt(variance);
  
  return { mean, std, variance };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π –æ—Ç—á—ë—Ç –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
 * @private
 */
function createEmptyMonthlyReport_() {
  const sheet = getOrCreateSheet_(CONFIG.SHEETS.MONTHLY_COMPARISON);
  clearSheetData_(sheet);
  applySheetFormatting_(sheet, '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º');
  
  sheet.getRange('A3').setValue('‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
  sheet.getRange('A3').setFontSize(14).setFontWeight('bold');
  sheet.getRange('A5').setValue('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
  sheet.getRange('A6').setValue('‚Ä¢ –í —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤');
  sheet.getRange('A7').setValue('‚Ä¢ –î–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
  sheet.getRange('A8').setValue('‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö');
  
  updateLastUpdateTime_(CONFIG.SHEETS.MONTHLY_COMPARISON);
}
