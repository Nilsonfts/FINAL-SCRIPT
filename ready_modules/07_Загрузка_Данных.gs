/**
 * üì• –ó–∞–≥—Ä—É–∑–∫–∞ –î–∞–Ω–Ω—ã—Ö - –ò–º–ø–æ—Ä—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Apps Script: https://script.google.com/d/1u77EB0EuYkyO21LhwjVjLJOgHy_dyHZ7TL0rc8yAbbsuLRZG20l0vfUH/edit
 * 2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª: + ‚Üí Script file
 * 3. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª: 07_–ó–∞–≥—Ä—É–∑–∫–∞_–î–∞–Ω–Ω—ã—Ö (–±–µ–∑ .gs)
 * 4. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ
 * 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Ctrl+S)
 */

/**
 * –ú–û–î–£–õ–¨ –ò–ú–ü–û–†–¢–ê –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (AmoCRM, —Ñ–æ—Ä–º—ã —Å–∞–π—Ç–∞, CTI)
 * @fileoverview –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
 */
function syncAllData() {
  try {
    logInfo_('DATA_SYNC', '–ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    const startTime = new Date();
    const results = {
      amocrm: { success: false, records: 0, error: null },
      forms: { success: false, records: 0, error: null },
      calls: { success: false, records: 0, error: null },
      metrica: { success: false, records: 0, error: null }
    };
    
    // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM
    try {
      logInfo_('DATA_SYNC', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è AmoCRM...');
      const amocrmResult = syncAmoCrmData_();
      results.amocrm = amocrmResult;
      logInfo_('DATA_SYNC', `AmoCRM: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${amocrmResult.records} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      results.amocrm.error = error.message;
      logError_('DATA_SYNC', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ AmoCRM', error);
    }
    
    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
    try {
      logInfo_('DATA_SYNC', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º —Å–∞–π—Ç–∞...');
      const formsResult = syncWebFormsData_();
      results.forms = formsResult;
      logInfo_('DATA_SYNC', `–§–æ—Ä–º—ã —Å–∞–π—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${formsResult.records} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      results.forms.error = error.message;
      logError_('DATA_SYNC', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º —Å–∞–π—Ç–∞', error);
    }
    
    // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ CTI
    try {
      logInfo_('DATA_SYNC', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è CTI...');
      const callsResult = syncCallTrackingData_();
      results.calls = callsResult;
      logInfo_('DATA_SYNC', `CTI: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${callsResult.records} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      results.calls.error = error.message;
      logError_('DATA_SYNC', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CTI', error);
    }
    
    // 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
    try {
      logInfo_('DATA_SYNC', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏...');
      const metricaResult = syncYandexMetricaData_();
      results.metrica = metricaResult;
      logInfo_('DATA_SYNC', `–ú–µ—Ç—Ä–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${metricaResult.records} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      results.metrica.error = error.message;
      logError_('DATA_SYNC', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ú–µ—Ç—Ä–∏–∫–∏', error);
    }
    
    // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try {
      logInfo_('DATA_SYNC', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      updateConsolidatedData_();
    } catch (error) {
      logError_('DATA_SYNC', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
    }
    
    const duration = (new Date() - startTime) / 1000;
    const totalRecords = results.amocrm.records + results.forms.records + results.calls.records + results.metrica.records;
    
    logInfo_('DATA_SYNC', `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}—Å. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalRecords} –∑–∞–ø–∏—Å–µ–π`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    const hasErrors = Object.values(results).some(result => result.error);
    if (hasErrors) {
      sendErrorNotification_(results);
    }
    
    return results;
    
  } catch (error) {
    logError_('DATA_SYNC', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', error);
    throw error;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function syncAmoCrmData_() {
  const apiUrl = PropertiesService.getScriptProperties().getProperty('AMOCRM_API_URL');
  const apiToken = PropertiesService.getScriptProperties().getProperty('AMOCRM_API_TOKEN');
  
  if (!apiUrl || !apiToken) {
    throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM');
  }
  
  let totalRecords = 0;
  const batchSize = 250; // AmoCRM –ª–∏–º–∏—Ç
  let page = 1;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const lastSync = getLastSyncTime_('amocrm');
  const syncTime = getCurrentDateMoscow_();
  
  try {
    do {
      const response = fetchAmoCrmDeals_(apiUrl, apiToken, page, batchSize, lastSync);
      
      if (!response || !response._embedded || !response._embedded.leads) {
        break;
      }
      
      const leads = response._embedded.leads;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      const processedRecords = processAmoCrmLeads_(leads);
      totalRecords += processedRecords;
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –æ–∂–∏–¥–∞–ª–∏ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (leads.length < batchSize) {
        break;
      }
      
      page++;
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (page > 100) {
        logWarning_('DATA_SYNC', '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü AmoCRM (100)');
        break;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      Utilities.sleep(200);
      
    } while (true);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setLastSyncTime_('amocrm', syncTime);
    
    return {
      success: true,
      records: totalRecords,
      error: null
    };
    
  } catch (error) {
    logError_('AMOCRM_SYNC', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ AmoCRM', error);
    return {
      success: false,
      records: totalRecords,
      error: error.message
    };
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API AmoCRM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
 * @param {string} apiUrl - URL API
 * @param {string} apiToken - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
 * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
 * @param {Date} lastSync - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @returns {Object} –û—Ç–≤–µ—Ç API
 * @private
 */
function fetchAmoCrmDeals_(apiUrl, apiToken, page, limit, lastSync) {
  const url = `${apiUrl}/api/v4/leads`;
  const params = {
    limit: limit,
    page: page,
    'with': 'contacts,companies,custom_fields_values',
    'order[updated_at]': 'asc'
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (lastSync) {
    params['filter[updated_at][from]'] = Math.floor(lastSync.getTime() / 1000);
  }
  
  const queryString = Object.keys(params)
    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
    .join('&');
  
  const options = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${apiToken}`,
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = UrlFetchApp.fetch(`${url}?${queryString}`, options);
    
    if (response.getResponseCode() === 204) {
      return null; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    }
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`AmoCRM API error: ${response.getResponseCode()} - ${response.getContentText()}`);
    }
    
    return JSON.parse(response.getContentText());
    
  } catch (error) {
    logError_('AMOCRM_API', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM API: ${url}`, error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ AmoCRM –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
 * @param {Array} leads - –ú–∞—Å—Å–∏–≤ —Å–¥–µ–ª–æ–∫
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 * @private
 */
function processAmoCrmLeads_(leads) {
  if (!leads || leads.length === 0) return 0;
  
  const sheet = getOrCreateSheet_(CONFIG.SHEETS.RAW_DATA);
  const existingData = getSheetData_(sheet);
  const headers = existingData[0] || [];
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  ensureHeaders_(sheet, CONFIG.HEADERS.LEADS_RAW);
  
  const processedRows = [];
  
  leads.forEach(lead => {
    try {
      const processedLead = processAmoCrmLead_(lead);
      if (processedLead) {
        processedRows.push(processedLead);
      }
    } catch (error) {
      logError_('AMOCRM_PROCESS', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ ID ${lead.id}`, error);
    }
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–º
  if (processedRows.length > 0) {
    appendRowsToSheet_(sheet, processedRows);
  }
  
  return processedRows.length;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –∏–∑ AmoCRM
 * @param {Object} lead - –°–¥–µ–ª–∫–∞ AmoCRM
 * @returns {Array} –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
 * @private
 */
function processAmoCrmLead_(lead) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  const leadId = lead.id;
  const leadName = lead.name || '';
  const budget = lead.price || 0;
  const statusId = lead.status_id;
  const pipelineId = lead.pipeline_id;
  const responsibleUserId = lead.responsible_user_id;
  const createdAt = new Date(lead.created_at * 1000);
  const updatedAt = new Date(lead.updated_at * 1000);
  const closedAt = lead.closed_at ? new Date(lead.closed_at * 1000) : null;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  const status = getLeadStatusByAmoCrmId_(statusId);
  const isWon = status === 'success';
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º UTM –º–µ—Ç–∫–∏ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
  const utmData = extractUtmFromCustomFields_(lead.custom_fields_values || []);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const contactData = extractContactData_(lead);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
  const channel = determineChannel_(utmData, {
    referrer: extractCustomField_(lead.custom_fields_values, '–†–µ—Ñ–µ—Ä–µ—Ä'),
    tel_source: extractCustomField_(lead.custom_fields_values, '–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–≤–æ–Ω–∫–∞')
  });
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
  return [
    leadId,                                    // ID —Å–¥–µ–ª–∫–∏
    leadName,                                  // –ù–∞–∑–≤–∞–Ω–∏–µ
    formatDate_(createdAt, 'full'),           // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    formatDate_(updatedAt, 'full'),           // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    closedAt ? formatDate_(closedAt, 'full') : '', // –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    status,                                    // –°—Ç–∞—Ç—É—Å
    budget,                                    // –ë—é–¥–∂–µ—Ç
    channel,                                   // –ö–∞–Ω–∞–ª
    utmData.utm_source || '',                 // UTM Source
    utmData.utm_medium || '',                 // UTM Medium
    utmData.utm_campaign || '',               // UTM Campaign
    utmData.utm_content || '',                // UTM Content
    utmData.utm_term || '',                   // UTM Term
    contactData.name || '',                   // –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    contactData.phone || '',                  // –¢–µ–ª–µ—Ñ–æ–Ω
    contactData.email || '',                  // Email
    extractCustomField_(lead.custom_fields_values, '–ì–æ—Ä–æ–¥') || '', // –ì–æ—Ä–æ–¥
    responsibleUserId,                        // –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    pipelineId,                               // –í–æ—Ä–æ–Ω–∫–∞
    statusId,                                 // ID —Å—Ç–∞—Ç—É—Å–∞
    'AmoCRM',                                 // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    getCurrentDateMoscow_().toISOString()     // –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  ];
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞ (—á–µ—Ä–µ–∑ Google –§–æ—Ä–º—ã –∏–ª–∏ –≤–µ–±-—Ö—É–∫–∏)
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function syncWebFormsData_() {
  // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –§–æ—Ä–º
  // –∏–ª–∏ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Ö—É–∫–∏
  
  try {
    let totalRecords = 0;
    
    // –ü—Ä–∏–º–µ—Ä: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google –§–æ—Ä–º
    const formsData = getGoogleFormsData_();
    if (formsData && formsData.length > 0) {
      totalRecords += processWebFormsData_(formsData);
    }
    
    // –ü—Ä–∏–º–µ—Ä: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –≤—ã–≥—Ä—É–∑–∫–∏
    const fileData = getWebFormsFromFile_();
    if (fileData && fileData.length > 0) {
      totalRecords += processWebFormsData_(fileData);
    }
    
    return {
      success: true,
      records: totalRecords,
      error: null
    };
    
  } catch (error) {
    return {
      success: false,
      records: 0,
      error: error.message
    };
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª-—Ç—Ä–µ–∫–∏–Ω–≥–∞
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function syncCallTrackingData_() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∫–æ–ª–ª-—Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞
    const callData = getCallTrackingData_();
    
    if (!callData || callData.length === 0) {
      return {
        success: true,
        records: 0,
        error: null
      };
    }
    
    const processedRecords = processCallTrackingData_(callData);
    
    return {
      success: true,
      records: processedRecords,
      error: null
    };
    
  } catch (error) {
    return {
      success: false,
      records: 0,
      error: error.message
    };
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function syncYandexMetricaData_() {
  const metricaToken = PropertiesService.getScriptProperties().getProperty('YANDEX_METRICA_TOKEN');
  const counterId = PropertiesService.getScriptProperties().getProperty('YANDEX_METRICA_COUNTER_ID');
  
  if (!metricaToken || !counterId) {
    logWarning_('METRICA_SYNC', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏');
    return {
      success: true,
      records: 0,
      error: null
    };
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
    const dateRange = createDateRange_('week');
    const metricaData = fetchYandexMetricaData_(metricaToken, counterId, dateRange);
    
    if (!metricaData || metricaData.length === 0) {
      return {
        success: true,
        records: 0,
        error: null
      };
    }
    
    const processedRecords = processYandexMetricaData_(metricaData);
    
    return {
      success: true,
      records: processedRecords,
      error: null
    };
    
  } catch (error) {
    return {
      success: false,
      records: 0,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Date|null} –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function getLastSyncTime_(source) {
  try {
    const properties = PropertiesService.getScriptProperties();
    const lastSyncStr = properties.getProperty(`LAST_SYNC_${source.toUpperCase()}`);
    
    if (lastSyncStr) {
      return new Date(lastSyncStr);
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    return addDays_(getCurrentDateMoscow_(), -7);
    
  } catch (error) {
    logWarning_('SYNC_TIME', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${source}`, error);
    return addDays_(getCurrentDateMoscow_(), -7);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
 * @param {Date} syncTime - –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function setLastSyncTime_(source, syncTime) {
  try {
    const properties = PropertiesService.getScriptProperties();
    properties.setProperty(`LAST_SYNC_${source.toUpperCase()}`, syncTime.toISOString());
  } catch (error) {
    logWarning_('SYNC_TIME', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${source}`, error);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç UTM –º–µ—Ç–∫–∏ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π AmoCRM
 * @param {Array} customFields - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
 * @returns {Object} UTM –¥–∞–Ω–Ω—ã–µ
 * @private
 */
function extractUtmFromCustomFields_(customFields) {
  const utm = {};
  
  if (!customFields) return utm;
  
  customFields.forEach(field => {
    const fieldName = field.field_name ? field.field_name.toLowerCase() : '';
    const value = field.values && field.values[0] ? field.values[0].value : '';
    
    if (fieldName.includes('utm_source') || fieldName.includes('–∏—Å—Ç–æ—á–Ω–∏–∫')) {
      utm.utm_source = value;
    } else if (fieldName.includes('utm_medium') || fieldName.includes('–∫–∞–Ω–∞–ª')) {
      utm.utm_medium = value;
    } else if (fieldName.includes('utm_campaign') || fieldName.includes('–∫–∞–º–ø–∞–Ω–∏—è')) {
      utm.utm_campaign = value;
    } else if (fieldName.includes('utm_content')) {
      utm.utm_content = value;
    } else if (fieldName.includes('utm_term')) {
      utm.utm_term = value;
    }
  });
  
  return utm;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–¥–µ–ª–∫–∏ AmoCRM
 * @param {Object} lead - –°–¥–µ–ª–∫–∞
 * @returns {Object} –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @private
 */
function extractContactData_(lead) {
  const contact = {
    name: '',
    phone: '',
    email: ''
  };
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  if (lead._embedded && lead._embedded.contacts && lead._embedded.contacts.length > 0) {
    const firstContact = lead._embedded.contacts[0];
    contact.name = firstContact.name || '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (firstContact.custom_fields_values) {
      firstContact.custom_fields_values.forEach(field => {
        if (field.field_code === 'PHONE' && field.values && field.values[0]) {
          contact.phone = field.values[0].value;
        } else if (field.field_code === 'EMAIL' && field.values && field.values[0]) {
          contact.email = field.values[0].value;
        }
      });
    }
  }
  
  return contact;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è
 * @param {Array} customFields - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
 * @param {string} fieldName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
 * @returns {string} –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
 * @private
 */
function extractCustomField_(customFields, fieldName) {
  if (!customFields || !fieldName) return '';
  
  const field = customFields.find(f => 
    f.field_name && f.field_name.toLowerCase().includes(fieldName.toLowerCase())
  );
  
  if (field && field.values && field.values[0]) {
    return field.values[0].value || '';
  }
  
  return '';
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function updateConsolidatedData_() {
  try {
    logInfo_('DATA_CONSOLIDATION', '–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    clearHeadersCache_();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö
    
    logInfo_('DATA_CONSOLIDATION', '–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
  } catch (error) {
    logError_('DATA_CONSOLIDATION', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @param {Object} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * @private
 */
function sendErrorNotification_(results) {
  try {
    const emailRecipients = CONFIG.EMAIL_NOTIFICATIONS.RECIPIENTS;
    if (!emailRecipients || emailRecipients.length === 0) return;
    
    const errors = Object.entries(results)
      .filter(([source, result]) => result.error)
      .map(([source, result]) => `${source}: ${result.error}`)
      .join('\n');
    
    if (errors) {
      const subject = '–û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
      const body = `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n${errors}\n\n–í—Ä–µ–º—è: ${formatDate_(getCurrentDateMoscow_(), 'full')}`;
      
      MailApp.sendEmail({
        to: emailRecipients.join(','),
        subject: subject,
        body: body
      });
    }
    
  } catch (error) {
    logError_('EMAIL_NOTIFICATION', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', error);
  }
}
