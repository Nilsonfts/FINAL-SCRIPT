/******************************************************
 * –¢–û–ü-40 –ö–õ–ò–ï–ù–¢–û–í (—Å—É–º–º–∞/–≤–∏–∑–∏—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ Guests RP)
 * - –°—É–º–º–∞  = Guests RP, —Å—Ç–æ–ª–±–µ—Ü ¬´–û–±—â–∞—è —Å—É–º–º–∞¬ª
 * - –í–∏–∑–∏—Ç–æ–≤= Guests RP, —Å—Ç–æ–ª–±–µ—Ü ¬´–ö–æ–ª-–≤–æ –≤–∏–∑–∏—Ç–æ–≤¬ª
 * - –ö–æ–≥–¥–∞ –±—ã–ª = ¬´–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç¬ª (Guests RP)
 * - –ö–∞–Ω–∞–ª/–ú–µ–Ω–µ–¥–∂–µ—Ä/ID/–ì–æ—Å—Ç–µ–π = –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ –∏–∑ ¬´–†–ê–ë–û–ß–ò–ô –ê–ú–û¬ª
 ******************************************************/

const TOP40G_CFG = {
  GUESTS_SHEET: 'Guests RP',           // –∏—â–µ–º ¬´–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ¬ª
  RA_SHEET:     '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  OUT_SHEET:    '–¢–û–ü-40 –ö–õ–ò–ï–ù–¢–û–í',
  FONT:         'PT Sans',
  TITLE_BG:     '#FFE97F',
  HEADER_BG:    '#E9F2FB',
  ZEBRA1:       '#FFFFFF',
  ZEBRA2:       '#F8FCFF',
  SUCCESS_RE:   [/–æ–ø–ª–∞—á/i, /—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i, /—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i],
  // –≤–∞–ª–∏–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ª—é–±–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
  G_HEADERS: {
    name:   ['–∏–º—è','name'],
    phone:  ['—Ç–µ–ª–µ—Ñ–æ–Ω','phone'],
    visits: ['–∫–æ–ª-–≤–æ –≤–∏–∑–∏—Ç–æ–≤','–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤','–≤–∏–∑–∏—Ç–æ–≤','–∫–æ–ª-–≤–æ –ø–æ—Å–µ—â'],
    sum:    ['–æ–±—â–∞—è —Å—É–º–º–∞','—Å—É–º–º–∞ –≤—Å–µ–≥–æ','–∏—Ç–æ–≥–æ –ø–æ –≥–æ—Å—Ç—é'],
    first:  ['–ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç'],
    last:   ['–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç']
  }
};

/* ==================== MAIN ==================== */
function buildTop40ClientsFromGuests(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // ----- Guests RP: —Ç–µ–ª–µ—Ñ–æ–Ω -> {name, visits, sum, first, last}
  const guests = readGuestsFlexible_(ss);
  if (!guests.size) throw new Error('Guests RP –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  // ----- –ê–ú–û: –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  const amo = readAmoLastSuccessByPhone_(ss);

  // ----- —Å–æ–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
  const list = [];
  for (const [phone, g] of guests.entries()){
    const a = amo.get(phone) || {};
    list.push({
      name:   g.name || a.fio || phone,
      phone,
      visits: g.visits,
      total:  g.sum,
      when:   g.last || a.when || '',
      chan:   a.chan || 'direct_site',
      mgr:    a.manager || '',
      guests: a.guests || '',
      id:     a.id || ''
    });
  }

  // ----- –¢–û–ü-40 –ø–æ —Å—É–º–º–µ (Guests RP)
  const top = list
    .filter(x => Number(x.total) > 0)
    .sort((a,b)=>b.total - a.total)
    .slice(0,40);

  // ----- –≤—ã–≤–æ–¥
  const sh = ss.getSheetByName(TOP40G_CFG.OUT_SHEET) || ss.insertSheet(TOP40G_CFG.OUT_SHEET);
  sh.clear();
  sh.setFrozenRows(2);

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  sh.getRange(1,1,1,10).merge()
    .setValue('üíé –¢–û–ü-40 –ö–õ–ò–ï–ù–¢–û–í ‚Äî –ø–æ —Å—É–º–º–µ –≤—ã—Ä—É—á–∫–∏ (Guests RP)')
    .setFontFamily(TOP40G_CFG.FONT).setFontSize(18).setFontWeight('bold')
    .setHorizontalAlignment('left').setVerticalAlignment('middle')
    .setBackground(TOP40G_CFG.TITLE_BG);

  // –¢–∞–±–ª–∏—Ü–∞
  const header = ['#','–ö–ª–∏–µ–Ω—Ç','–¢–µ–ª–µ—Ñ–æ–Ω','–í–∏–∑–∏—Ç–æ–≤','–ì–æ—Å—Ç–µ–π','ID —Å–¥–µ–ª–∫–∏','–°—É–º–º–∞ ‚ÇΩ','–ö–æ–≥–¥–∞ –±—ã–ª','–ö–∞–∫ –∑–∞—à—ë–ª (–∫–∞–Ω–∞–ª)','–ú–µ–Ω–µ–¥–∂–µ—Ä'];
  const start = 3;
  sh.getRange(start,1,1,header.length).setValues([header])
    .setFontWeight('bold').setBackground(TOP40G_CFG.HEADER_BG);

  let body = [];
  if (top.length){
    body = top.map((x,i)=>[
      i+1,
      x.name,
      x.phone,
      x.visits,
      x.guests===''?'':x.guests,
      x.id,
      x.total,
      x.when,
      x.chan,
      x.mgr
    ]);
    sh.getRange(start+1,1,body.length,header.length).setValues(body);
  } else {
    sh.getRange(start+1,1,1,header.length).setValues([new Array(header.length).fill('')]);
  }

  // –§–æ—Ä–º–∞—Ç—ã –∏ –∫—Ä–∞—Å–æ—Ç–∞
  const n = Math.max(1, body.length);
  const bodyRange = sh.getRange(start+1,1,n,header.length);
  bodyRange.setFontFamily(TOP40G_CFG.FONT);
  sh.getRange(1,1,Math.max(3,n+2),header.length).setFontFamily(TOP40G_CFG.FONT);

  // –ó–µ–±—Ä–∞
  if (body.length){
    const bgs = [];
    for (let r=0;r<body.length;r++){
      const color = (r%2===0) ? TOP40G_CFG.ZEBRA1 : TOP40G_CFG.ZEBRA2;
      bgs.push(new Array(header.length).fill(color));
    }
    bodyRange.setBackgrounds(bgs);
  }

  // –ß–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  if (n>0){
    sh.getRange(start+1,1,n,1).setNumberFormat('0');            // #
    sh.getRange(start+1,3,n,1).setNumberFormat('@');            // —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç
    sh.getRange(start+1,4,n,1).setNumberFormat('0');            // –≤–∏–∑–∏—Ç–æ–≤
    sh.getRange(start+1,5,n,1).setNumberFormat('0');            // –≥–æ—Å—Ç–µ–π
    sh.getRange(start+1,6,n,1).setNumberFormat('@');            // ID
    sh.getRange(start+1,7,n,1).setNumberFormat('# ##0');        // —Å—É–º–º–∞
    sh.getRange(start+1,8,n,1).setNumberFormat('dd.MM.yyyy');   // –∫–æ–≥–¥–∞ –±—ã–ª
    // –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    sh.getRange(start+1,4,n,2).setHorizontalAlignment('center');
    sh.getRange(start+1,7,n,1).setHorizontalAlignment('right');
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∏–º –¢–û–ü-10
  const top10 = Math.min(10, body.length);
  if (top10>0) sh.getRange(start+1,1,top10,header.length).setBackground('#FFF7D6');

  // –ì—Ä–∞–Ω–∏—Ü—ã
  sh.getRange(start,1,Math.max(1,n+1),header.length)
    .setBorder(true,true,true,true,true,true);

  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (—á—Ç–æ–±—ã –Ω–µ ¬´—Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–æ¬ª)
  // B (–∫–ª–∏–µ–Ω—Ç), C(—Ç–µ–ª–µ—Ñ–æ–Ω), D/E (—á–∏—Å–ª–∞), F(ID), G(—Å—É–º–º–∞), H(–¥–∞—Ç–∞), I(–∫–∞–Ω–∞–ª), J(–º–µ–Ω–µ–¥–∂–µ—Ä)
  try{
    sh.setColumnWidths(1, 1, 36);     // #
    sh.setColumnWidths(2, 1, 180);    // –ö–ª–∏–µ–Ω—Ç
    sh.setColumnWidths(3, 1, 110);    // –¢–µ–ª–µ—Ñ–æ–Ω
    sh.setColumnWidths(4, 1, 70);     // –í–∏–∑–∏—Ç–æ–≤
    sh.setColumnWidths(5, 1, 70);     // –ì–æ—Å—Ç–µ–π
    sh.setColumnWidths(6, 1, 110);    // ID —Å–¥–µ–ª–∫–∏
    sh.setColumnWidths(7, 1, 110);    // –°—É–º–º–∞
    sh.setColumnWidths(8, 1, 110);    // –ö–æ–≥–¥–∞ –±—ã–ª
    sh.setColumnWidths(9, 1, 130);    // –ö–∞–Ω–∞–ª
    sh.setColumnWidths(10,1, 180);    // –ú–µ–Ω–µ–¥–∂–µ—Ä
  }catch(e){}

  // –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (–¢–û–ü-15 –ø–æ —Å—É–º–º–µ)
  try {
    // —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ
    sh.getCharts().forEach(ch => sh.removeChart(ch));
    const count = Math.min(15, body.length);
    if (count > 0){
      const chart = sh.newChart()
        .setChartType(Charts.ChartType.COLUMN)
        .addRange(sh.getRange(start,2, count+1, 1))  // –∏–º–µ–Ω–∞ (B)
        .addRange(sh.getRange(start,7, count+1, 1))  // —Å—É–º–º–∞ (G)
        .setOption('title', '–¢–û–ü-15 –≥–æ—Å—Ç–µ–π –ø–æ —Å—É–º–º–µ (Guests RP)')
        .setOption('legend', { position: 'none' })
        .setOption('hAxis', { slantedText: true, slantedTextAngle: 20 })
        .setOption('chartArea', { left: 40, top: 40, width: '85%', height: '60%' })
        .setPosition(3, 12, 0, 0) // –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–µ–µ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å –∫–æ–ª–æ–Ω–∫–∏ L)
        .build();
      sh.insertChart(chart);
    }
  } catch(e) {}

}

/* ======= OPTIONAL: hourly trigger ======= */
function setHourlyTrigger_Top40Guests(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildTop40ClientsFromGuests')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildTop40ClientsFromGuests').timeBased().everyHours(1).create();
}

/* ================== HELPERS ================== */

// –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç –ø–æ ¬´–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–º—É¬ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
function findSheetApprox_(ss, target){
  const want = String(target).toLowerCase().replace(/\s+/g,'');
  let sh = ss.getSheetByName(target);
  if (sh) return sh;
  for (const s of ss.getSheets()){
    const nm = s.getName().toLowerCase().replace(/\s+/g,'');
    if (nm.includes(want)) return s;
  }
  return null;
}

// —á–∏—Ç–∞–µ–º Guests RP –≥–∏–±–∫–æ: —à–∞–ø–∫–∞ –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö, –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
function readGuestsFlexible_(ss){
  const sh = findSheetApprox_(ss, TOP40G_CFG.GUESTS_SHEET);
  if (!sh) return new Map();

  const vals = sh.getDataRange().getValues();
  if (!vals.length) return new Map();

  const headerRow = detectHeaderRow_(vals, TOP40G_CFG.G_HEADERS) ?? 0;
  const header = (vals[headerRow]||[]).map(String);
  const rows = vals.slice(headerRow+1).filter(r=>r.some(x=>String(x).trim()!==''));

  const idx = {
    name:   findSmartIdx_(header, TOP40G_CFG.G_HEADERS.name),
    phone:  findSmartIdx_(header, TOP40G_CFG.G_HEADERS.phone),
    visits: findSmartIdx_(header, TOP40G_CFG.G_HEADERS.visits),
    sum:    findSmartIdx_(header, TOP40G_CFG.G_HEADERS.sum),
    first:  findSmartIdx_(header, TOP40G_CFG.G_HEADERS.first),
    last:   findSmartIdx_(header, TOP40G_CFG.G_HEADERS.last)
  };

  if (idx.phone<0 || idx.sum<0 || idx.visits<0) return new Map();

  const map = new Map();
  rows.forEach(r=>{
    const ph = cleanPhone_(r[idx.phone]);
    if (!ph) return;
    const name   = safeStr_(r[idx.name]);
    const visits = toInt_(r[idx.visits]);
    const sum    = money_(r[idx.sum]);
    const first  = idx.first>=0 ? r[idx.first] : '';
    const last   = idx.last>=0  ? r[idx.last]  : '';
    const cur = map.get(ph);
    if (!cur || (sum > cur.sum)){
      map.set(ph, {name, visits, sum, first, last});
    }
  });
  return map;
}

// –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —à–∞–ø–∫–∏ (–≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö) –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
function detectHeaderRow_(vals, keys){
  const MAX = Math.min(5, vals.length);
  for (let r=0; r<MAX; r++){
    const row = (vals[r]||[]).map(String);
    const hasPhone  = findSmartIdx_(row, keys.phone)  >= 0;
    const hasSum    = findSmartIdx_(row, keys.sum)    >= 0;
    const hasVisits = findSmartIdx_(row, keys.visits) >= 0;
    if (hasPhone && hasSum && hasVisits) return r;
  }
  return null;
}

// ¬´—É–º–Ω—ã–π¬ª –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function findSmartIdx_(header, variants){
  const norm = header.map(h=>normHeader_(h));
  for (const v of variants){
    const key = normHeader_(v);
    let i = norm.indexOf(key);
    if (i>-1) return i;
    i = norm.findIndex(h => h.includes(key) || key.includes(h));
    if (i>-1) return i;
  }
  return -1;
}
function normHeader_(s){
  return String(s||'')
    .toLowerCase()
    .replace(/[‚ÇΩ,.;:()|]/g,' ')
    .replace(/[-‚Äì‚Äî]/g,' ')
    .replace(/\s+/g,' ')
    .trim();
}

// —á–∏—Ç–∞–µ–º –ê–ú–û: –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
function readAmoLastSuccessByPhone_(ss){
  const sh = ss.getSheetByName(TOP40G_CFG.RA_SHEET);
  if (!sh) return new Map();
  const {header, rows} = readTable_(sh);

  const i = {
    status:  findIdx_(header, ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å']),
    phone:   findIdx_(header, ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone']),
    id:      findIdx_(header, ['ID','–°–¥–µ–ª–∫–∞.ID']),
    guests:  findIdx_(header, ['–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π','–°–¥–µ–ª–∫–∞.–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π']),
    manager: findIdx_(header, ['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π','–°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']),
    telTag:  findIdx_(header, ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ']),
    utm:     findIdx_(header, ['UTM_SOURCE','utm_source']),
    last:    findIdx_(header, ['–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç']),
    book:    findIdx_(header, ['–î–∞—Ç–∞ –±—Ä–æ–Ω–∏']),
    created: findIdx_(header, ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'])
  };

  const map = new Map();
  rows.forEach(r=>{
    const st = String(r[i.status]||'');
    const ok = TOP40G_CFG.SUCCESS_RE.some(re=>re.test(st));
    if (!ok) return;

    const phone = cleanPhone_(r[i.phone]);
    if (!phone) return;

    const when = r[i.last] || r[i.book] || r[i.created] || '';
    const chan = normalizeChan_(String(r[i.telTag]||''), String(r[i.utm]||''));
    const mgr  = String(r[i.manager]||'').trim();
    const guests = toInt_(r[i.guests]);
    const id   = (r[i.id]==null)?'':String(r[i.id]).trim();

    const cur = map.get(phone);
    if (!cur || toTs_(when) > toTs_(cur.when)){
      map.set(phone, {when, chan, manager: mgr, guests, id, fio: ''});
    }
  });
  return map;
}

/* ---- generic table read ---- */
function readTable_(sh){
  const vals = sh.getDataRange().getValues();
  if (!vals.length) return {header:[], rows:[]};
  const headerRow = (vals[1] && vals[1].some(v=>String(v).trim()!==''))
    ? 1 : 0; // —É –ê–ú–û —à–∞–ø–∫–∞ –æ–±—ã—á–Ω–æ –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ
  const header = (vals[headerRow]||[]).map(String);
  const rows = vals.slice(headerRow+1).filter(r=>r.some(x=>String(x).trim()!==''));
  return {header, rows};
}

/* ---- header find helpers ---- */
function normStr_(s){ return String(s||'').trim().toLowerCase().replace(/\s+/g,' '); }
function findIdx_(header, variants){
  const norm = header.map(h=>normStr_(h));
  for (const v of variants){
    const key = normStr_(v);
    let i = norm.indexOf(key);
    if (i>-1) return i;
    i = norm.findIndex(h => h===key || h.includes(key));
    if (i>-1) return i;
  }
  return -1;
}

/* ---- parsing helpers ---- */
function safeStr_(v){ return String(v==null?'':v).trim(); }
function cleanPhone_(v){
  const d = String(v||'').replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1);
  if (d.length>=10) return d.slice(-10);
  return d;
}
function toInt_(v){
  const n = parseInt(String(v||'').replace(/\s/g,''),10);
  return isNaN(n) ? '' : n;
}
function money_(v){
  const s = String(v||'').replace(/[^\d,.\-]/g,'').replace(/,/g,'.');
  const n = Number(s);
  return isNaN(n) ? 0 : n;
}
function toTs_(v){
  if (!v) return 0;
  if (v instanceof Date) return v.getTime();
  const t = Date.parse(String(v));
  return isNaN(t) ? 0 : t;
}
function normalizeChan_(telTag, utm){
  let c = (telTag || '').trim() || (utm || '').trim();
  const s = c.toLowerCase();
  if (s === 'ya_map#booking') c = 'ya_map';
  if (!c) c = 'direct_site';
  return c;
}
