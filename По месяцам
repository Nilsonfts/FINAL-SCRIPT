/**********************************************************
 * –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê (–Ω–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥)
 * –ò—Å—Ç–æ—á–Ω–∏–∫: –ª–∏—Å—Ç "–†–ê–ë–û–ß–ò–ô –ê–ú–û"
 * –õ–∏—Å—Ç –≤—ã–≤–æ–¥–∞: "–ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê"
 * –®—Ä–∏—Ñ—Ç: PT Sans
 **********************************************************/
const MONTHLY_CFG = {
  SOURCE: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  OUT:    '–ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê',
  FONT:   'PT Sans',
  SUCCESS: ['–û–ø–ª–∞—á–µ–Ω–æ','–£—Å–ø–µ—à–Ω–æ –≤ –†–ü','–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
  COLS: {
    created:  ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'],
    status:   ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å'],
    budget:   ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç'],
    sumAny:   ['–°—É–º–º–∞ ‚ÇΩ'],               // –≤–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ø—Ä–∞–≤–∞ (AX)
    telTag:   ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'],
    utm:      ['UTM_SOURCE','utm_source'],
    lastForm: ['–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞','Site.–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞'],
    formId:   ['FORMID'],
    formNm:   ['FORMNAME'],
    ref:      ['REFERER'],
    date:     ['DATE']
  }
};

/* ========= –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ========= */
function buildMonthlyDynamics(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const src = ss.getSheetByName(MONTHLY_CFG.SOURCE);
  if (!src) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+MONTHLY_CFG.SOURCE+'"');

  // —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const vals = src.getDataRange().getValues();
  const header = (vals[1]||[]).map(String);
  const rows = vals.slice(2).filter(r => r.some(x=>String(x).trim()!==''));

  const i = {
    created : findCol_(header, MONTHLY_CFG.COLS.created),
    status  : findCol_(header, MONTHLY_CFG.COLS.status),
    budget  : findCol_(header, MONTHLY_CFG.COLS.budget),
    sumAX   : rightmostCol_(header, MONTHLY_CFG.COLS.sumAny),
    telTag  : findCol_(header, MONTHLY_CFG.COLS.telTag),
    utm     : findCol_(header, MONTHLY_CFG.COLS.utm),
    lastForm: findCol_(header, MONTHLY_CFG.COLS.lastForm),
    formId  : findCol_(header, MONTHLY_CFG.COLS.formId),
    formNm  : findCol_(header, MONTHLY_CFG.COLS.formNm),
    ref     : findCol_(header, MONTHLY_CFG.COLS.ref),
    date    : findCol_(header, MONTHLY_CFG.COLS.date)
  };

  // –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∫–∞–Ω–∞–ª–∞–º (–¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞)
  const byMonth = new Map(); // ym -> {leads,succ,rev}
  const byMonthChan = new Map(); // ym -> Map(chan -> {leads,succ,rev})

  rows.forEach(r=>{
    const created = r[i.created]; if (!created) return;
    const ym = ymKey_(created).key;

    const st = normalizeStatus_(r[i.status]);
    const ok = MONTHLY_CFG.SUCCESS.includes(st);
    const rev = ok ? revenue_(r[i.sumAX], r[i.budget]) : 0;

    const m = byMonth.get(ym) || {leads:0,succ:0,rev:0};
    m.leads++; if(ok){ m.succ++; m.rev += rev; }
    byMonth.set(ym, m);

    // –ø–æ –∫–∞–Ω–∞–ª–∞–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª—É—á–∞–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    const chan = normalizeChannel_(r, i);
    const dict = byMonthChan.get(ym) || new Map();
    const c = dict.get(chan) || {leads:0,succ:0,rev:0};
    c.leads++; if(ok){ c.succ++; c.rev += rev; }
    dict.set(chan, c);
    byMonthChan.set(ym, dict);
  });

  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã
  const months = [...byMonth.entries()]
    .map(([key,v])=>({key, label:ymLabel_(key), ...v}))
    .sort((a,b)=>a.key.localeCompare(b.key));

  // —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
  months.forEach((m, idx)=>{
    m.avg = m.succ ? m.rev/m.succ : 0;
    m.conv = m.leads ? m.succ/m.leads : 0;
    const prev = idx>0 ? months[idx-1] : null;
    const base = prev ? prev.rev : 0;
    m.growth = base ? (m.rev - base)/base : 0; // —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
    m.trend = m.growth > 0.05 ? 'üìà' : (m.growth < -0.05 ? 'üìâ' : '‚ûñ');
  });

  // –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  const last = months.length ? months[months.length-1].key : null;
  const chanMap = last ? byMonthChan.get(last) || new Map() : new Map();
  const chanRows = [...chanMap.entries()]
    .map(([name,v])=>[name, v.leads, v.succ, v.rev, v.leads? v.succ/v.leads : 0])
    .sort((a,b)=>b[3]-a[3]);

  // —Ä–µ–Ω–¥–µ—Ä
  const sh = ss.getSheetByName(MONTHLY_CFG.OUT) || ss.insertSheet(MONTHLY_CFG.OUT);
  sh.clear();
  sh.getRange(1,1,sh.getMaxRows(),sh.getMaxColumns()).setFontFamily(MONTHLY_CFG.FONT);

  let r = 1, c = 1;

  // –∑–∞–≥–æ–ª–æ–≤–æ–∫
  band_(sh, r, c, 1, 8, '#2D7D46');
  sh.getRange(r,c,1,8).merge().setValue('üìä –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê')
    .setFontColor('#fff').setFontSize(16).setFontWeight('bold').setVerticalAlignment('middle');
  r+=1;
  sh.getRange(r,c).setValue('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:').setFontWeight('bold');
  sh.getRange(r,c+1).setValue(new Date()).setNumberFormat('dd.MM.yyyy, HH:mm:ss');
  r+=2;

  // —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Å—è—Ü–µ–≤
  const head = ['–ú–µ—Å—è—Ü','–°–¥–µ–ª–∫–∏','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–°—Ä. —á–µ–∫ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–†–æ—Å—Ç –∫ –ø—Ä–µ–¥. –º–µ—Å—è—Ü—É','–¢—Ä–µ–Ω–¥'];
  const body = months.map(m=>[
    m.label, m.leads, m.succ, m.rev, m.avg, m.conv, m.growth, m.trend
  ]);
  writeTable_(sh, r, c, head, body);
  if (body.length){
    fmtMoney_(sh, r+1, c+3, body.length); // –î–æ—Ö–æ–¥
    fmtMoney_(sh, r+1, c+4, body.length); // –°—Ä. —á–µ–∫
    sh.getRange(r+1, c+5, body.length, 1).setNumberFormat('0.00%'); // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    sh.getRange(r+1, c+6, body.length, 1).setNumberFormat('0.00%'); // –†–æ—Å—Ç
  }
  r += body.length + 2;

  // –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  const lastLabel = months.length ? months[months.length-1].label : '';
  section_(sh, r, c, `–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ ${lastLabel} –ø–æ –∫–∞–Ω–∞–ª–∞–º:`, 8, '#E3F1E8'); r++;

  const headC = ['–ö–∞–Ω–∞–ª','–°–¥–µ–ª–∫–∏','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è'];
  writeTable_(sh, r, c, headC, chanRows);
  if (chanRows.length){
    fmtMoney_(sh, r+1, c+3, chanRows.length);
    sh.getRange(r+1, c+4, chanRows.length, 1).setNumberFormat('0.00%');
  }
}

/* ===== –¢–†–ò–ì–ì–ï–† ===== */
function setMonthlyTrigger(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildMonthlyDynamics')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildMonthlyDynamics').timeBased().everyHours(1).create();
}
function onOpen(){
  SpreadsheetApp.getUi()
    .createMenu('Monthly')
    .addItem('–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É', 'buildMonthlyDynamics')
    .addItem('Hourly-—Ç—Ä–∏–≥–≥–µ—Ä', 'setMonthlyTrigger')
    .addToUi();
}

/* ===== –•–ï–õ–ü–ï–†–´ ===== */
function findCol_(header, list){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const name of list){
    const k = String(name).trim().toLowerCase();
    let i = norm.indexOf(k);
    if (i>-1) return i;
    i = norm.findIndex(h => h===k || h.includes(k));
    if (i>-1) return i;
  }
  return -1;
}
function rightmostCol_(header, list){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  let best = -1;
  for (const name of list){
    const k = String(name).trim().toLowerCase();
    norm.forEach((h,i)=>{ if (h===k || h.includes(k)) best = Math.max(best,i); });
  }
  return best;
}
function normalizeStatus_(raw){
  let s = String(raw||'').trim();
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i,'').replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/,'').trim();
  const rules = [
    [/–æ–ø–ª–∞—á/i,'–û–ø–ª–∞—á–µ–Ω–æ'],
    [/—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i,'–£—Å–ø–µ—à–Ω–æ –≤ –†–ü'],
    [/—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i,'–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ']
  ];
  for (const [re,n] of rules){ if (re.test(s)) return n; }
  return s || '';
}
function revenue_(ax, budget){
  const AX = toNum_(ax);
  return AX>0 ? AX : toNum_(budget);
}
function normalizeChannel_(r, i){
  const tel = String(i.telTag>-1 ? (r[i.telTag]||'') : '').trim().toLowerCase();
  if (tel) return unifyChan_(tel);
  const utm = String(i.utm>-1 ? (r[i.utm]||'') : '').trim().toLowerCase();
  if (utm) return unifyChan_(utm);
  const hasForm = [i.lastForm,i.formId,i.formNm,i.ref,i.date].some(ix => ix>-1 && String(r[ix]||'').trim()!=='');
  return hasForm ? 'direct_site' : '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)';
}
function unifyChan_(s){ return s==='ya_map#booking' ? 'ya_map' : s; }
function ymKey_(d){
  const dt = (d instanceof Date) ? d : new Date(d);
  const y = dt.getFullYear(), m = dt.getMonth()+1;
  return {key:`${y}-${('0'+m).slice(-2)}`};
}
function ymLabel_(key){
  const [y,m] = key.split('-').map(Number);
  const MMM = ['–Ø–ù–í','–§–ï–í','–ú–ê–†','–ê–ü–†','–ú–ê–ô','–ò–Æ–ù','–ò–Æ–õ','–ê–í–ì','–°–ï–ù','–û–ö–¢','–ù–û–Ø','–î–ï–ö'][m-1];
  return `${MMM} ‚Äô${String(y).slice(-2)}`;
}
function toNum_(v){ const n = Number(String(v||'').replace(/\s+/g,'').replace(',','.')); return isNaN(n)?0:n; }

/* ‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî */
function band_(sh, r,c, rows, cols, bg){ sh.getRange(r,c,rows,cols).setBackground(bg); }
function section_(sh, r,c, title, w, bg){
  const rg = sh.getRange(r,c,1,Math.max(1,w)); try{ rg.merge(); }catch(e){}
  rg.setValue(title).setBackground(bg).setFontWeight('bold').setFontSize(12)
    .setBorder(null,null,true,null,false,false,'#9BBBD4',SpreadsheetApp.BorderStyle.SOLID);
}
function writeTable_(sh, r,c, head, body){
  const W = head.length;
  sh.getRange(r,c,1,W).setValues([head]).setBackground('#EEF4FA').setFontWeight('bold')
    .setBorder(true,true,true,true,true,true);
  if (body.length){
    const rng = sh.getRange(r+1,c,body.length,W);
    rng.setValues(body)
       .setBorder(true,true,true,true,true,true);
    // –∑–µ–±—Ä–∞
    const bgs=[]; for (let i=0;i<body.length;i++) bgs.push(new Array(W).fill(i%2? '#FFFFFF':'#FAFDFF'));
    rng.setBackgrounds(bgs);
  } else {
    sh.getRange(r+1,c,1,W).setBorder(true,true,true,true,true,true);
  }
}
function fmtMoney_(sh, r,c,n){ sh.getRange(r,c,n,1).setNumberFormat('# ##0'); }
