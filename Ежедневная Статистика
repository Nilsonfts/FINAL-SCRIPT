/**********************************************************
 * –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)
 * –ò—Å—Ç–æ—á–Ω–∏–∫: "–†–ê–ë–û–ß–ò–ô –ê–ú–û"
 * –í—ã–≤–æ–¥:    "üìÖ –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
 **********************************************************/

const DAILY_CFG = {
  RA_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  OUT_SHEET: 'üìÖ –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê',
  FONT: 'PT Sans',
  SUCCESS: ['–û–ø–ª–∞—á–µ–Ω–æ','–£—Å–ø–µ—à–Ω–æ –≤ –†–ü','–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏-—Å–∏–Ω–æ–Ω–∏–º—ã
  H: {
    DATE:   ['–î–∞—Ç–∞ –±—Ä–æ–Ω–∏','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏','–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'],
    STATUS: ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å'],
    BUDGET: ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç'],
    AX:     ['–°—É–º–º–∞ ‚ÇΩ'],
    TELSRC: ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'],
    SRC:    ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫'],
    UTM:    ['UTM_SOURCE','utm_source']
  }
};

function buildDailyStats(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // ---- —á–∏—Ç–∞–µ–º "–†–ê–ë–û–ß–ò–ô –ê–ú–û"
  const {header, rows} = readSheetSmart_(ss, DAILY_CFG.RA_SHEET);
  if (!rows.length) return;

  const iDate   = findHeader_(header, DAILY_CFG.H.DATE);
  const iStatus = findHeader_(header, DAILY_CFG.H.STATUS);
  const iBudget = findHeader_(header, DAILY_CFG.H.BUDGET);
  const iTelSrc = findHeader_(header, DAILY_CFG.H.TELSRC);
  const iSrc    = findHeader_(header, DAILY_CFG.H.SRC);
  const iUtm    = findHeader_(header, DAILY_CFG.H.UTM);
  const axIdxs  = findAllHeaders_(header, DAILY_CFG.H.AX);
  const iAX     = axIdxs.length ? axIdxs[axIdxs.length-1] : -1;

  // ---- –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
  const byDay = new Map();
  rows.forEach(r=>{
    const d = normalizeDate_(r[iDate]);     // Date | ''
    if (!d) return;
    const key = dateKey_(d);                // 'YYYY-MM-DD'

    let day = byDay.get(key);
    if (!day) { day = {total:0, succ:0, rev:0, ch: new Map()}; byDay.set(key, day); }

    day.total++;

    const st = normalizeStatus_(r[iStatus]);
    const isSucc = DAILY_CFG.SUCCESS.includes(st);

    // –∫–∞–Ω–∞–ª (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π ‚Üí –æ–±—â–∏–π ‚Üí utm ‚Üí 'site' –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —Ñ–æ—Ä–º—ã; –∏–Ω–∞—á–µ '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)')
    const chan = decideChannel_(r, {iTelSrc, iSrc, iUtm});

    // –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤
    const c = day.ch.get(chan) || {leads:0, succ:0, rev:0};
    c.leads++;

    if (isSucc){
      day.succ++;
      const amount = chooseAmount_(r[iAX], r[iBudget]);
      c.rev += amount;
      day.rev += amount;
      c.succ++;
    }
    day.ch.set(chan, c);
  });

  // ---- –≥–æ—Ç–æ–≤–∏–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —É–±—ã–≤.)
  const out = [...byDay.entries()].map(([key, d])=>{
    const avg = d.succ ? d.rev / d.succ : 0;
    const conv = d.total ? d.succ / d.total : 0;

    // –ª—É—á—à–∏–π/—Ö—É–¥—à–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ
    const chArr = [...d.ch.entries()].map(([name, v])=>({name, ...v}));
    chArr.sort((a,b)=> b.rev - a.rev || b.leads - a.leads);
    const best  = chArr.length ? chArr[0].name : '';
    // —Ö—É–¥—à–∏–π: —Å—Ä–µ–¥–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –ª–∏–¥–∞–º–∏ –±–µ—Ä—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Ä—É—á–∫—É
    chArr.sort((a,b)=> a.rev - b.rev || a.leads - b.leads);
    const worst = chArr.length ? chArr[0].name : '';

    return {
      key,
      date: keyToDate_(key),
      total: d.total,
      succ: d.succ,
      rev: d.rev,
      avg, conv,
      best, worst
    };
  }).sort((a,b)=> b.key.localeCompare(a.key));

  // ---- —Ä–µ–Ω–¥–µ—Ä
  const sh = ss.getSheetByName(DAILY_CFG.OUT_SHEET) || ss.insertSheet(DAILY_CFG.OUT_SHEET);
  sh.clear();
  sh.getRange(1,1,sh.getMaxRows(),sh.getMaxColumns()).setFontFamily(DAILY_CFG.FONT);

  // —à–∞–ø–∫–∞
  sh.getRange(1,1,1,8).merge().setValue('üìä –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê')
    .setBackground('#BDEDF0').setFontWeight('bold').setFontSize(16)
    .setHorizontalAlignment('left').setVerticalAlignment('middle');

  const headerOut = ['–î–∞—Ç–∞','–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫','–£—Å–ø–µ—à–Ω—ã—Ö','–î–æ—Ö–æ–¥ ‚ÇΩ','–°—Ä. —á–µ–∫ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–õ—É—á—à–∏–π –∫–∞–Ω–∞–ª','–•—É–¥—à–∏–π –∫–∞–Ω–∞–ª'];
  sh.getRange(2,1,1,headerOut.length).setValues([headerOut]).setFontWeight('bold').setBackground('#E8F7FA');

  const body = out.map(r=>[
    r.date, r.total, r.succ, r.rev, r.avg, r.conv, r.best, r.worst
  ]);
  if (body.length){
    sh.getRange(3,1,body.length,headerOut.length).setValues(body);
  }

  // —Ñ–æ—Ä–º–∞—Ç—ã
  const n = Math.max(1, body.length);
  sh.getRange(3,1,n,1).setNumberFormat('yyyy-mm-dd'); // –î–∞—Ç–∞
  sh.getRange(3,2,n,1).setNumberFormat('0');          // –í—Å–µ–≥–æ
  sh.getRange(3,3,n,1).setNumberFormat('0');          // –£—Å–ø–µ—à–Ω—ã—Ö
  sh.getRange(3,4,n,1).setNumberFormat('# ##0');      // –î–æ—Ö–æ–¥
  sh.getRange(3,5,n,1).setNumberFormat('# ##0');      // –°—Ä. —á–µ–∫
  sh.getRange(3,6,n,1).setNumberFormat('0.00%');      // –ö–æ–Ω–≤–µ—Ä—Å–∏—è

  // —Å–µ—Ç–∫–∞, –∑–∞–º–æ—Ä–æ–∑–∫–∞, –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
  sh.getRange(2,1,Math.max(1,n+1),headerOut.length).setBorder(true,true,true,true,true,true);
  sh.setFrozenRows(2);
  for (let c=1;c<=headerOut.length;c++) try{ sh.autoResizeColumn(c); }catch(e){}
}

/* ===== –¢—Ä–∏–≥–≥–µ—Ä –ø–æ —á–∞—Å—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===== */
function setHourlyTrigger_Daily(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildDailyStats')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildDailyStats').timeBased().everyHours(1).create();
}

/* ================= –•–µ–ª–ø–µ—Ä—ã ================= */

function readSheetSmart_(ss, name){
  const sh = ss.getSheetByName(name);
  if (!sh) return {header:[],rows:[]};
  const vals = sh.getDataRange().getValues();
  if (!vals.length) return {header:[],rows:[]};

  // —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ 2-–π —Å—Ç—Ä–æ–∫–µ, –Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  let hdrRow = 1;
  for (let r=0;r<Math.min(5, vals.length); r++){
    const row = (vals[r]||[]).map(v=>String(v||'').toLowerCase());
    if (row.includes('id') && (row.includes('—Å—Ç–∞—Ç—É—Å') || row.includes('–¥–∞—Ç–∞'))) { hdrRow = r; break; }
  }
  const header = (vals[hdrRow]||[]).map(String);
  const rows   = vals.slice(hdrRow+1).filter(r=>r.some(x=>String(x).trim()!==''));
  return {header, rows};
}

function findHeader_(header, variants){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const v of variants){
    const key = String(v).trim().toLowerCase();
    let i = norm.indexOf(key);
    if (i>-1) return i;
    i = norm.findIndex(h=>h===key || h.includes(key));
    if (i>-1) return i;
  }
  return -1;
}
function findAllHeaders_(header, variants){
  const out=[]; const norm=header.map(h=>String(h||'').trim().toLowerCase());
  for (const v of variants){
    const key=String(v).trim().toLowerCase();
    norm.forEach((h,i)=>{ if (h===key || h.includes(key)) out.push(i); });
  }
  return out;
}

// —Å—Ç–∞—Ç—É—Å ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
function normalizeStatus_(raw){
  let s = String(raw||'').trim();
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i,'')
       .replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/,'').trim();
  if (/–æ–ø–ª–∞—á/i.test(s)) return '–û–ø–ª–∞—á–µ–Ω–æ';
  if (/—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i.test(s)) return '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü';
  if (/—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i.test(s)) return '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ';
  return s;
}

// —Å—É–º–º–∞: AX ‚Üí –µ—Å–ª–∏ 0, —Ç–æ –±—é–¥–∂–µ—Ç
function chooseAmount_(ax, budget){
  const A = toNumber_(ax);
  if (A>0) return A;
  return toNumber_(budget);
}

function toNumber_(v){
  if (v==null || v==='') return 0;
  const n = Number(String(v).replace(/\s/g,'').replace(',','.'));
  return isNaN(n) ? 0 : n;
}

function normalizeDate_(v){
  if (!v) return null;
  if (v instanceof Date) return v;
  // –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å dd.mm.yyyy ‚Ä¶
  const s = String(v).trim();
  const m = s.match(/^(\d{1,2})[.\-\/](\d{1,2})[.\-\/](\d{2,4})/);
  if (m){
    const d = ('0'+m[1]).slice(-2);
    const mo = ('0'+m[2]).slice(-2);
    const y = m[3].length===2 ? ('20'+m[3]) : m[3];
    return new Date(`${y}-${mo}-${d}`);
  }
  const t = Date.parse(s);
  return isNaN(t) ? null : new Date(t);
}
function dateKey_(d){
  const y = d.getFullYear();
  const m = ('0'+(d.getMonth()+1)).slice(-2);
  const da = ('0'+d.getDate()).slice(-2);
  return `${y}-${m}-${da}`;
}
function keyToDate_(key){
  const [y,m,d] = key.split('-').map(Number);
  return new Date(y, m-1, d);
}

// –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞: —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π ‚Üí –æ–±—â–∏–π ‚Üí utm ‚Üí site/–±–µ–∑ –∫–∞–Ω–∞–ª–∞
function decideChannel_(row, idx){
  const tel = String(idx.iTelSrc>-1 ? row[idx.iTelSrc]||'' : '').trim();
  if (tel) return mergeAlias_(tel);
  const src = String(idx.iSrc>-1 ? row[idx.iSrc]||'' : '').trim();
  if (src) return mergeAlias_(src);
  const utm = String(idx.iUtm>-1 ? row[idx.iUtm]||'' : '').trim();
  if (utm) return mergeAlias_(utm);
  // –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã (UTM/DATE/FORMNAME –æ–±—ã—á–Ω–æ —Ä—è–¥–æ–º) ‚Äî —Å—á–∏—Ç–∞–µ–º "site"
  const hasSiteTrace = [idx.iUtm].some(i=>i>-1 && String(row[i]||'').trim()!=='');
  return hasSiteTrace ? 'site' : '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)';
}
function mergeAlias_(name){
  const s = String(name||'').trim().toLowerCase();
  if (s==='ya_map#booking') return 'ya_map';
  return name || '';
}
