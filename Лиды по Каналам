/**********************************************************
 * –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–ê–ù–ê–õ–û–í ‚Äî –º–∞–∫–µ—Ç –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
 **********************************************************/
const CHD_CFG = {
  RA_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  FONT: 'PT Sans',

  // –∫–∞–∫–∏–µ –ª–∏—Å—Ç—ã —Å–æ–±–∏—Ä–∞—Ç—å: –∫–ª—é—á –∫–∞–Ω–∞–ª–∞ -> –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ª–∏—Å—Ç–µ
  CHANNELS: {
    yandex:   '–Ø–ù–î–ï–ö–°',
    gis2:     '2–ì–ò–°',
    vk:       '–í–ö–û–ù–¢–ê–ö–¢–ï',
    telegram: 'TELEGRAM',
    site:     '–°–ê–ô–¢',
  },

  SUCCESS_RE: /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à.*–≤\s*—Ä–ø|—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑)/i,

  H: {
    ID: ['ID','–°–¥–µ–ª–∫–∞.ID'],
    NAME: ['–ù–∞–∑–≤–∞–Ω–∏–µ','–°–¥–µ–ª–∫–∞'],
    MANAGER: ['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'],
    STATUS: ['–°—Ç–∞—Ç—É—Å'],
    BUDGET: ['–ë—é–¥–∂–µ—Ç'],
    CREATED: ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'],
    CLOSED: ['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'],
    CLIENT: ['–§–ò–û','–ö–æ–Ω—Ç–∞–∫—Ç','–ò–º—è','–ö–ª–∏–µ–Ω—Ç'],
    PHONE:  ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    UTM_S:  ['UTM_SOURCE','utm_source'],
    UTM_M:  ['UTM_MEDIUM','utm_medium'],
    UTM_C:  ['UTM_CAMPAIGN','utm_campaign'],
    SRC_DEAL: ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏'],
    SRC_TEL:  ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'],
    SUM_RUB:  ['–°—É–º–º–∞ ‚ÇΩ'], // –ø—Ä–∞–≤—ã–π AX
  },

  MAP: {
    site:     [/^osn[_\-]?tel$/i, /^site$/i, /^rp[_\-]?site$/i, /^direct$/i],
    yandex:   [/^ya[_\-]?tel$/i, /^ya[_\-]?map/i, /^yandex/i],
    gis2:     [/^2gis/i, /^2gis[_\-]?tel/i],
    telegram: [/^bot[_\-]?tg$/i, /^tg$/i, /^telegram/i],
    vk:       [/^vk/i],
  }
};

/* ====== –ü–£–ë–õ–ò–ß–ù–û ====== */
function buildChannelDetailedReports(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const amo = ss.getSheetByName(CHD_CFG.RA_SHEET);
  if (!amo) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+CHD_CFG.RA_SHEET+'"');

  const vals = amo.getDataRange().getValues();
  if (vals.length < 3) return;
  const header = (vals[1]||[]).map(String);
  const rows   = vals.slice(2).filter(r=>r.some(x=>String(x).trim()!==''));

  const idx = chd_getIdx(header);

  // –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  const deals = rows.map(r=>{
    const status = String(r[idx.STATUS]||'');
    const success = CHD_CFG.SUCCESS_RE.test(status);
    const ax = chd_money(r[idx.SUM_RUB]);
    const budget = chd_money(r[idx.BUDGET]);
    const revenue = success ? (ax>0?ax:budget) : 0;

    const telTag = String(r[idx.SRC_TEL]||'').trim();
    const dealTag= String(r[idx.SRC_DEAL]||'').trim();
    const channel = chd_resolveChannel(telTag, dealTag);

    const created = r[idx.CREATED] || r[idx.CLOSED] || '';
    const month = chd_monthKey(created);

    const utm = [
      String(r[idx.UTM_S]||'').trim(),
      String(r[idx.UTM_M]||'').trim(),
      String(r[idx.UTM_C]||'').trim()
    ].filter(Boolean).join(' / ');

    return {
      id: r[idx.ID], name: r[idx.NAME], manager: r[idx.MANAGER],
      client: r[idx.CLIENT], phone: r[idx.PHONE],
      status, success, revenue, created, month,
      channel, firstTouch: chd_resolveChannel('', dealTag),
      utm
    };
  });

  // –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
  Object.entries(CHD_CFG.CHANNELS).forEach(([key, title])=>{
    chd_buildOne(ss, deals, key, title);
  });
}

function setHourlyTrigger_ChannelDetails(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildChannelDetailedReports')
    .forEach(t=>ScriptApp.deleteTrigger(t));
  ScriptApp.newTrigger('buildChannelDetailedReports').timeBased().everyHours(1).create();
}

/* ====== –û–î–ò–ù –õ–ò–°–¢ ====== */
function chd_buildOne(ss, deals, key, title){
  const sheetName = `–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê: ${title}`;
  const sh = ss.getSheetByName(sheetName) || ss.insertSheet(sheetName);
  sh.clear();
  chd_setFontAll(sh, CHD_CFG.FONT);

  // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª—É
  const d = deals.filter(x => x.channel === key);

  // KPI
  const totalLeads = d.length;
  const succ = d.filter(x=>x.success);
  const succCnt = succ.length;
  const revenue = succ.reduce((s,x)=>s+x.revenue,0);
  const conv = chd_pct(succCnt,totalLeads);
  const avgCheck = succCnt ? revenue/succCnt : 0;
  // —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ created/closed; –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º)
  const avgDays = ''; // –Ω–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–æ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ

  // –ü–ï–†–í–´–ï –ö–ê–°–ê–ù–ò–Ø ‚Äî –ø–æ U (firstTouch)
  const first = deals.filter(x => x.firstTouch === key);
  const firstSucc = first.filter(x=>x.success);
  const firstConv = chd_pct(firstSucc.length, first.length);
  const firstRevenue = firstSucc.reduce((s,x)=>s+x.revenue,0);

  // –ü–û –ú–ï–°–Ø–¶–ê–ú
  const byMonth = new Map(); // month -> {leads, deals, revenue}
  d.forEach(x=>{
    const m = x.month;
    const obj = byMonth.get(m.key) || {label:m.label, order:m.key, leads:0, deals:0, revenue:0};
    obj.leads += 1;
    if (x.success){ obj.deals += 1; obj.revenue += x.revenue; }
    byMonth.set(m.key, obj);
  });
  const months = [...byMonth.values()].sort((a,b)=>a.order.localeCompare(b.order))
    .map((m,i,arr)=>{
      const prev = i? arr[i-1] : null;
      const conv = chd_pct(m.deals, m.leads);
      const avg  = m.deals? m.revenue/m.deals : 0;
      const growth = prev ? chd_pct(m.revenue - prev.revenue, prev.revenue || 1) : '';
      return [m.label, m.leads, m.deals, m.revenue, conv, avg, growth];
    });

  // UTM-–º–µ—Ç–∫–∏
  const byUtm = new Map(); // utm -> {leads, deals, revenue}
  d.forEach(x=>{
    const keyU = x.utm || '(–Ω–µ—Ç utm)';
    const u = byUtm.get(keyU) || {leads:0, deals:0, revenue:0};
    u.leads += 1;
    if (x.success){ u.deals += 1; u.revenue += x.revenue; }
    byUtm.set(keyU, u);
  });
  const utmRows = [...byUtm.entries()].map(([k,v])=>[k,v.leads,v.deals,v.revenue, chd_pct(v.deals,v.leads), (v.leads? v.revenue/v.leads : 0)])
    .sort((a,b)=>b[3]-a[3]);

  // –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í
  const top = succ
    .map(x=>[
      x.client||'‚Äî', chd_cleanPhone(x.phone), x.name||'‚Äî', x.revenue,
      x.created instanceof Date ? x.created : new Date(x.created||null),
      x.manager||'‚Äî', x.utm||'‚Äî'
    ])
    .sort((a,b)=>b[3]-a[3]).slice(0,10);

  /* ===== –†–ï–ù–î–ï–† ===== */
  let r = 1, c = 1;

  // –®–∞–ø–∫–∞
  chd_band(sh, r, c, 1, 12, '#1E5AA7');
  sh.getRange(r, c, 1, 12).merge()
    .setValue(`üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê: ${title}`)
    .setFontColor('#fff').setFontSize(18).setFontWeight('bold')
    .setVerticalAlignment('middle').setHorizontalAlignment('left');
  r += 1;
  sh.getRange(r, c).setValue('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è').setFontWeight('bold');
  sh.getRange(r, c+1).setValue(new Date()).setNumberFormat('dd.MM.yyyy, HH:mm');
  r += 1;

  // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  chd_title(sh, r, c, '‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', 12, '#C9EDC5'); r++;
  const kpiHead = ['–ú–µ—Ç—Ä–∏–∫–∞','–ó–Ω–∞—á–µ–Ω–∏–µ','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'];
  const kpi = [
    ['–í—Å–µ–≥–æ –ª–∏–¥–æ–≤', totalLeads, '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π'],
    ['–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', succCnt, '–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏'],
    ['–û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ', revenue, '–°—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è', conv, '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è'],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ', avgCheck, '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏'],
    ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', avgDays, '–û—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è'],
  ];
  chd_writeTable(sh, r, c, kpiHead, kpi);
  sh.getRange(r+1, c+1, kpi.length, 1).setNumberFormat('0');                    // –∑–Ω–∞—á–µ–Ω–∏—è (—Ü–µ–ª—ã–µ)
  sh.getRange(r+1+2, c+1, 1, 1).setNumberFormat('#,##0 "‚ÇΩ"');                  // –¥–æ—Ö–æ–¥
  sh.getRange(r+1+3, c+1, 1, 1).setNumberFormat('0.00%');                      // –∫–æ–Ω–≤–µ—Ä—Å–∏—è
  sh.getRange(r+1+4, c+1, 1, 1).setNumberFormat('#,##0 "‚ÇΩ"');                  // —Å—Ä —á–µ–∫
  r += (kpi.length + 2);

  // –ü–µ—Ä–≤—ã–µ –∫–∞—Å–∞–Ω–∏—è
  chd_title(sh, r, c, 'üìç –ü–ï–†–í–´–ï –ö–ê–°–ê–ù–ò–Ø', 12, '#EAF2FF'); r++;
  const fHead = ['','–ó–Ω–∞—á–µ–Ω–∏–µ','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'];
  const fData = [
    ['–ü–µ—Ä–≤—ã—Ö –æ–±—Ä–∞—â', first.length, '–ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–≤', firstConv, '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π'],
    ['–î–æ—Ö–æ–¥ —Å –ø–µ—Ä–≤—ã—Ö ‚ÇΩ', firstRevenue, '–î–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞—á–∞–≤—à–∏—Ö —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞'],
  ];
  chd_writeTable(sh, r, c, fHead, fData);
  sh.getRange(r+1, c+1, fData.length, 1).setNumberFormat('0');
  sh.getRange(r+1+1, c+1, 1, 1).setNumberFormat('0.00%');
  sh.getRange(r+1+2, c+1, 1, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  r += (fData.length + 2);

  // –ü–æ–º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
  chd_title(sh, r, c, 'üìâ –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê', 12, '#FFCEBF'); r++;
  const mHead = ['–ú–µ—Å—è—Ü','–õ–∏–¥—ã','–°–¥–µ–ª–∫–∏','–î–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–°—Ä. —á–µ–∫ ‚ÇΩ','–†–æ—Å—Ç –¥–æ—Ö–æ–¥–∞'];
  chd_writeTable(sh, r, c, mHead, months);
  sh.getRange(r+1, c+3, months.length, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  sh.getRange(r+1, c+4, months.length, 1).setNumberFormat('0.00%');
  sh.getRange(r+1, c+5, months.length, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  sh.getRange(r+1, c+6, months.length, 1).setNumberFormat('0.00%');
  const chartStart = r; const chartRows = Math.max(1, months.length+1);
  r += (months.length + 2);

  // –ê–Ω–∞–ª–∏–∑ UTM-–º–µ—Ç–æ–∫
  chd_title(sh, r, c, 'üîç –ê–ù–ê–õ–ò–ó UTM-–ú–ï–¢–û–ö', 12, '#FFD95C'); r++;
  const uHead = ['UTM-–º–µ—Ç–∫–∞','–õ–∏–¥—ã','–°–¥–µ–ª–∫–∏','–î–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','CPL*'];
  chd_writeTable(sh, r, c, uHead, utmRows);
  sh.getRange(r+1, c+3, utmRows.length, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  sh.getRange(r+1, c+4, utmRows.length, 1).setNumberFormat('0.00%');
  sh.getRange(r+1, c+5, utmRows.length, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  // –ø—Ä–∏–ø–∏—Å–∫–∞
  sh.getRange(r+1+utmRows.length, c, 1, 6).merge()
    .setValue('* CPL = –î–æ—Ö–æ–¥ / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ (—É—Å–ª–æ–≤–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å)')
    .setFontStyle('italic').setFontSize(9);
  r += (utmRows.length + 3);

  // –¢–û–ü-10 –∫–ª–∏–µ–Ω—Ç–æ–≤
  chd_title(sh, r, c, 'üíé –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í –ö–ê–ù–ê–õ–ê', 12, '#C9A0FF'); r++;
  const tHead = ['#','–ö–ª–∏–µ–Ω—Ç','–¢–µ–ª–µ—Ñ–æ–Ω','–°–¥–µ–ª–∫–∞','–°—É–º–º–∞ ‚ÇΩ','–î–∞—Ç–∞','–ú–µ–Ω–µ–¥–∂–µ—Ä','UTM'];
  const tData = top.map((row,i)=>[i+1, ...row]);
  chd_writeTable(sh, r, c, tHead, tData);
  sh.getRange(r+1, c+4, tData.length, 1).setNumberFormat('#,##0 "‚ÇΩ"');
  sh.getRange(r+1, c+5, tData.length, 1).setNumberFormat('dd.MM.yyyy');
  r += (tData.length + 2);

  // –î–∏–∞–≥—Ä–∞–º–º–∞ ¬´–î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ ‚Ä¶¬ª
  try{
    const old = sh.getCharts(); old.forEach(ch=>sh.removeChart(ch));
    const chart = sh.newChart()
      .setChartType(Charts.ChartType.COLUMN)
      .addRange(sh.getRange(chartStart, c, chartRows, 4)) // –ú–µ—Å—è—Ü-–î–æ—Ö–æ–¥
      .setOption('title', `–î–∏–Ω–∞–º–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ ${title}`)
      .setOption('series', {2:{targetAxisIndex:1}}) // (–µ—Å–ª–∏ –±—É–¥–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Ç–æ—Ä—É—é –æ—Å—å)
      .setOption('legend.position','none')
      .setOption('useFirstColumnAsDomain', true)
      .setOption('titleTextStyle', {fontSize:16, bold:true})
      .setPosition(chartStart+1, 10, 0, 0)
      .build();
    sh.insertChart(chart);
  }catch(e){}

  chd_autoResize(sh);
}

/* ====== –£–¢–ò–õ–ò–¢–´ ====== */
function chd_getIdx(header){
  const f = (names)=>chd_findHeaderIndex(header, names);
  const fa = (names)=>chd_findAllHeaderIndexes(header, names);
  const idx = {};
  idx.ID = f(CHD_CFG.H.ID);
  idx.NAME = f(CHD_CFG.H.NAME);
  idx.MANAGER = f(CHD_CFG.H.MANAGER);
  idx.STATUS = f(CHD_CFG.H.STATUS);
  idx.BUDGET = f(CHD_CFG.H.BUDGET);
  idx.CREATED= f(CHD_CFG.H.CREATED);
  idx.CLOSED = f(CHD_CFG.H.CLOSED);
  idx.CLIENT = f(CHD_CFG.H.CLIENT);
  idx.PHONE  = f(CHD_CFG.H.PHONE);
  idx.UTM_S  = f(CHD_CFG.H.UTM_S);
  idx.UTM_M  = f(CHD_CFG.H.UTM_M);
  idx.UTM_C  = f(CHD_CFG.H.UTM_C);
  idx.SRC_DEAL= f(CHD_CFG.H.SRC_DEAL);
  idx.SRC_TEL = f(CHD_CFG.H.SRC_TEL);
  const sums  = fa(CHD_CFG.H.SUM_RUB);
  idx.SUM_RUB = sums.length ? sums[sums.length-1] : -1;
  return idx;
}

function chd_findHeaderIndex(header, names){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const nm of names){
    const n = String(nm).trim().toLowerCase();
    let i = norm.indexOf(n); if (i>-1) return i;
    i = norm.findIndex(h => h===n || h.includes(n)); if (i>-1) return i;
  }
  return -1;
}
function chd_findAllHeaderIndexes(header, names){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  const out=[];
  for (const nm of names){
    const n = String(nm).trim().toLowerCase();
    norm.forEach((h,i)=>{ if (h===n || h.includes(n)) out.push(i); });
  }
  return out;
}

function chd_resolveChannel(telTag, dealTag){
  const raw = String(telTag||'').trim() || String(dealTag||'').trim() || '';
  const norm = raw.toLowerCase()==='ya_map#booking' ? 'ya_map' : raw.toLowerCase();
  const m = CHD_CFG.MAP;
  if (chd_matchAny(norm, m.site))     return 'site';
  if (chd_matchAny(norm, m.yandex))   return 'yandex';
  if (chd_matchAny(norm, m.gis2))     return 'gis2';
  if (chd_matchAny(norm, m.telegram)) return 'telegram';
  if (chd_matchAny(norm, m.vk))       return 'vk';
  return norm || '(–±–µ–∑ –∫–∞–Ω–∞–ª–∞)';
}
function chd_matchAny(str, res){ return res && res.some(re=>re.test(str)); }

function chd_money(v){
  if (v==null || v==='') return 0;
  const n = Number(String(v).replace(/\s+/g,'').replace(',','.'));
  return isNaN(n) ? 0 : n;
}
function chd_pct(a,b){ return b? a/b : 0; }

function chd_monthKey(d){
  const dt = (d instanceof Date) ? d : (d ? new Date(d) : new Date());
  const y = dt.getFullYear();
  const m = dt.getMonth();
  const MMM = ['2025','–Ø–ù–í','–§–ï–í','–ú–ê–†','–ê–ü–†','–ú–ê–ô','–ò–Æ–ù','–ò–Æ–õ','–ê–í–ì','–°–ï–ù','–û–ö–¢','–ù–û–Ø','–î–ï–ö'][m+1]; // —Ä—É—Å. —è—Ä–ª—ã–∫
  return { key:`${y}-${('0'+(m+1)).slice(-2)}`, label:`${MMM} ${y}` };
}

function chd_cleanPhone(s){
  const d = String(s||'').replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return '+7 ' + d.slice(1);
  if (d.length>=10) return '+7 ' + d.slice(-10);
  return d;
}

/* –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ */
function chd_setFontAll(sh, font){
  sh.getRange(1,1,Math.max(1,sh.getMaxRows()),Math.max(1,sh.getMaxColumns())).setFontFamily(font);
}
function chd_band(sh, row, col, rows, cols, bg){
  chd_ensureSize(sh, row+rows-1, col+cols-1);
  sh.getRange(row, col, rows, cols).setBackground(bg);
}
function chd_title(sh, row, col, text, width, bg){
  chd_ensureSize(sh, row, col+Math.max(1,width)-1);
  const r = sh.getRange(row, col, 1, Math.max(1,width));
  try{ r.merge(); }catch(e){}
  r.setValue(text).setBackground(bg).setFontWeight('bold').setFontSize(13)
   .setBorder(null,null,true,null,false,false,'#4A90E2',SpreadsheetApp.BorderStyle.SOLID);
}
function chd_writeTable(sh, row, col, header, data){
  chd_ensureSize(sh, row + Math.max(1,data.length), col + header.length - 1);
  sh.getRange(row, col, 1, header.length).setValues([header]).setFontWeight('bold').setBackground('#E9F2FB');
  if (data.length) sh.getRange(row+1, col, data.length, header.length).setValues(data);
  sh.getRange(row, col, Math.max(1,data.length+1), header.length).setBorder(true,true,true,true,true,true);
}
function chd_autoResize(sh){
  const last = sh.getLastColumn();
  for (let c=1;c<=last;c++) try{ sh.autoResizeColumn(c); }catch(e){}
}
function chd_ensureSize(sh, needRow, needCol){
  if (sh.getMaxRows() < needRow) sh.insertRowsAfter(sh.getMaxRows(), needRow - sh.getMaxRows());
  if (sh.getMaxColumns() < needCol) sh.insertColumnsAfter(sh.getMaxColumns(), needCol - sh.getMaxColumns());
}
