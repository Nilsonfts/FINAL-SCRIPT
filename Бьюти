/**
 * –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ –≤ Google Sheets (PT Sans),
 * —Ç–∞–±–ª–∏—Ü–∞ ¬´–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø¬ª + –≥—Ä–∞—Ñ–∏–∫–∏.
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —Ç–≤–æ–∏—Ö —Ç–∞–±–ª–∏—Ü: ¬´–†–ê–ë–û–ß–ò–ô –ê–ú–û¬ª, ¬´–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥¬ª, ¬´–ë–Æ–î–ñ–ï–¢–´¬ª.
 * –ü–∏—à–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ —Ü–µ–ª–µ–≤—ã—Ö –ª–∏—Å—Ç–∞—Ö.
 */

const AA_CFG = {
  RA_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  DIRECTORY_SHEET: '–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥',
  BUDGETS_SHEET: '–ë–Æ–î–ñ–ï–¢–´',
  ACQ_SHEET: '–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø',
  FONT: 'PT Sans'
};

/** ============ –ü–£–ë–õ–ò–ß–ù–û ============ */
function buildAcquisitionAnalysis(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const facts = collectChannelFacts_();             // { [channel]: {leads, paid, revenue, newCnt, vipCnt} }
  const budgets = sumBudgetsByChannel_();           // { [channel]: budgetTotal }

  const allChannels = new Set([...Object.keys(facts), ...Object.keys(budgets)]);
  const header = ['–ö–∞–Ω–∞–ª','–õ–∏–¥—ã','–ö–ª–∏–µ–Ω—Ç—ã','–ö–æ–Ω–≤–µ—Ä—Å–∏—è %','–ù–æ–≤—ã–µ','VIP','–í—ã—Ä—É—á–∫–∞ ‚ÇΩ','–†–∞—Å—Ö–æ–¥—ã ‚ÇΩ','ROMI %','CAC ‚ÇΩ','LTV ‚ÇΩ','ROI %','–û—Ü–µ–Ω–∫–∞'];
  const rows = [];

  [...allChannels].sort().forEach(ch => {
    const f = facts[ch] || {leads:0,paid:0,revenue:0,newCnt:0,vipCnt:0};
    const budget = budgets[ch] || 0;
    const leadN = Number(f.leads)||0, paidN = Number(f.paid)||0, revN = Number(f.revenue)||0;
    const conv = leadN>0 ? paidN/leadN : 0;
    const avg  = paidN>0 ? revN/paidN : 0;                       // LTV ‚âà —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const cac  = paidN>0 ? budget/paidN : (budget>0? budget:0);   // CAC ‚Äî –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const romi = budget>0 ? (revN - budget)/budget : (revN>0?1:0);
    const roi  = romi; // –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
    const stars = starByRomi_(romi);
    rows.push([ch, leadN, paidN, conv, f.newCnt||0, f.vipCnt||0, revN, budget, romi, cac, avg, roi, stars]);
  });

  renderAcqTable_(ss, header, rows);
  ensureAcqCharts_(ss, rows);
}

/** –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ—á–∞—Å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ–¥ –∫—Ä–∞—Å–æ—Ç—É + –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å) */
function setHourlyTrigger_Beauty(){
  ScriptApp.getProjectTriggers().forEach(t=>{
    if (t.getHandlerFunction()==='hourlyAllBeauty') ScriptApp.deleteTrigger(t);
  });
  ScriptApp.newTrigger('hourlyAllBeauty').timeBased().everyHours(1).create();
}
function hourlyAllBeauty(){
  // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
  try{ if (typeof runHourlyAnalytics === 'function') runHourlyAnalytics(); }catch(e){}
  try{ buildAcquisitionAnalysis(); }catch(e){}
}

/** ============ –ê–ì–†–ï–ì–ê–¶–ò–ò ============ */
function collectChannelFacts_(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ra = readRA2_(ss);
  const dir = readDirectory2_(ss);
  const byCh = {};

  const PAID_RE = /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à|—Ä–µ–∞–ª–∏–∑)/i;
  const iStatus = ra.idx.status, iSum = ra.idx.sum, iBudget = ra.idx.budget,
        iNewVip = ra.idx.rpStatus, iTelTag = ra.idx.telTag, lineIdx = ra.idx.lines;

  ra.rows.forEach(r => {
    // --- –∫–∞–Ω–∞–ª ---
    let tag = '', channel = '';
    if (iTelTag>-1) tag = cleanTag_(r[iTelTag]);
    if (!tag && lineIdx.length){
      for (let k=0;k<lineIdx.length;k++){
        const num = pickOneNumber_(r[lineIdx[k]]);
        if (!num) continue; const rec = dir.byNumber.get(num); if (rec){ tag = rec.tag; channel = rec.channel||''; break; }
      }
    }
    if (!channel && tag){ channel = dir.tag2channel.get(tag) || ''; }
    channel = normalizeChannel_(channel || 'Other');

    // --- —Ñ–∞–∫—Ç—ã ---
    const st = String(iStatus>-1 ? (r[iStatus]||'') : '');
    const paid = PAID_RE.test(st);
    let amount = toNumber_(iSum>-1 ? r[iSum] : 0);
    if (paid && amount<=0 && iBudget>-1){ amount = toNumber_(r[iBudget]); }

    const rec = byCh[channel] || {leads:0, paid:0, revenue:0, newCnt:0, vipCnt:0};
    rec.leads += 1;
    if (paid) { rec.paid += 1; if (amount>0) rec.revenue += amount; }

    if (iNewVip>-1){
      const s = String(r[iNewVip]||'');
      if (/–Ω–æ–≤/i.test(s)) rec.newCnt += 1;
      if (/vip/i.test(s)) rec.vipCnt += 1;
    }

    byCh[channel] = rec;
  });
  return byCh;
}

function sumBudgetsByChannel_(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getSheetByName(AA_CFG.BUDGETS_SHEET);
  const out = {};
  if (!sh) return out;
  const v = sh.getDataRange().getValues(); if (!v.length) return out;
  const head = v[0], data = v.slice(1).filter(r=>r.some(x=>String(x).trim()!==''));
  data.forEach(r => {
    const ch = normalizeChannel_(String(r[0]||'').trim()); if (!ch) return;
    let sum = 0; for (let c=2;c<head.length;c++){ sum += toNumber_(r[c]); }
    out[ch] = (out[ch]||0) + sum;
  });
  return out;
}

/** ============ –†–ï–ù–î–ï–†/–°–¢–ò–õ–ò ============ */
function renderAcqTable_(ss, header, rows){
  const sh = ss.getSheetByName(AA_CFG.ACQ_SHEET) || ss.insertSheet(AA_CFG.ACQ_SHEET);
  sh.clear();

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫-–±–∞–Ω–Ω–µ—Ä (A1:M1)
  const cols = header.length;
  ensureCols_(sh, cols);
  const banner = sh.getRange(1,1,1,cols);
  try{ banner.merge(); }catch(e){}
  banner.setValue('üìä –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø')
        .setFontFamily(AA_CFG.FONT).setFontSize(18).setFontWeight('bold')
        .setHorizontalAlignment('center').setVerticalAlignment('middle')
        .setBackground('#E6F7FF');
  // –¢–æ–Ω–∫–∞—è —Å–∏–Ω—è—è –ª–∏–Ω–∏—è –ø–æ–¥ –±–∞–Ω–Ω–µ—Ä–æ–º
  try{ banner.setBorder(null,null,true,null,false,false,'#4A90E2',SpreadsheetApp.BorderStyle.SOLID); }catch(e){}

  // –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ 3)
  sh.getRange(3,1,1,cols).setValues([header])
    .setFontFamily(AA_CFG.FONT).setFontWeight('bold').setBackground('#E6F7FF');

  // –î–∞–Ω–Ω—ã–µ
  const n = Math.max(1, rows.length);
  if (rows.length){ sh.getRange(4,1,rows.length,cols).setValues(rows); }

  // –û–±—â–∏–µ —à—Ä–∏—Ñ—Ç—ã
  sh.getRange(1,1,Math.max(4+n,20),cols).setFontFamily(AA_CFG.FONT).setFontSize(12);

  // –ó–∞–º–æ—Ä–æ–∑–∫–∞ —Å—Ç—Ä–æ–∫ + —Ñ–∏–ª—å—Ç—Ä
  sh.setFrozenRows(3);
  const oldF = sh.getFilter && sh.getFilter(); if (oldF) oldF.remove();
  sh.getRange(3,1,1,cols).createFilter();

  // –®–∏—Ä–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã
  const mapFmt = new Map([
    ['–í—ã—Ä—É—á–∫–∞ ‚ÇΩ','#,##0'], ['–†–∞—Å—Ö–æ–¥—ã ‚ÇΩ','#,##0'], ['CAC ‚ÇΩ','#,##0'], ['LTV ‚ÇΩ','#,##0']
  ]);
  const head = header;
  head.forEach((h,i)=>{
    sh.setColumnWidth(i+1, h==='–ö–∞–Ω–∞–ª'? 160 : 120);
    if (mapFmt.has(h)) sh.getRange(4,i+1,n,1).setNumberFormat(mapFmt.get(h));
    if (/–∫–æ–Ω–≤–µ—Ä—Å–∏—è|romi|roi/i.test(h)) sh.getRange(4,i+1,n,1).setNumberFormat('0.0%');
  });

  // –ó–µ–±—Ä–∞ + —Ä–∞–º–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  const table = sh.getRange(3,1,n+1,cols); // —à–∞–ø–∫–∞ + –¥–∞–Ω–Ω—ã–µ
  applyZebraAndFrame_(table);

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ ROMI/ROI
  const iRomi = head.indexOf('ROMI %')+1, iRoi = head.indexOf('ROI %')+1;
  if (iRomi>0) applyTrafficLight_(sh, 4, iRomi, n);
  if (iRoi>0)  applyTrafficLight_(sh, 4, iRoi,  n);
}

function ensureAcqCharts_(ss, rows){
  const sh = ss.getSheetByName(AA_CFG.ACQ_SHEET); if (!sh) return;
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
  try{ sh.getCharts().forEach(c=>sh.removeChart(c)); }catch(e){}

  const cols = 14; ensureCols_(sh, cols);
  const n = Math.max(1, rows.length);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å–ø—Ä–∞–≤–∞ (Q –∫–æ–ª–æ–Ω–∫–∞ –∏ –¥–∞–ª–µ–µ)
  const startCol = 18; // R
  if (sh.getMaxColumns() < startCol+6) sh.insertColumnsAfter(sh.getMaxColumns(), startCol+6 - sh.getMaxColumns());

  // 1) –õ–∏–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º (–∫–æ–ª–æ–Ω–∫–∞)
  const leadsData = [['–ö–∞–Ω–∞–ª','–õ–∏–¥–æ–≤']].concat(rows.map(r=>[r[0], r[1]]));
  sh.getRange(1,startCol,leadsData.length,2).setValues(leadsData).setFontFamily(AA_CFG.FONT);

  // 2) –î–æ—Ö–æ–¥ vs –†–∞—Å—Ö–æ–¥ (–¥–≤–µ —Å–µ—Ä–∏–∏) ‚Äî —Å—Ç–æ–ª–±—Ü—ã
  const revCost = [['–ö–∞–Ω–∞–ª','–í—ã—Ä—É—á–∫–∞','–†–∞—Å—Ö–æ–¥—ã']].concat(rows.map(r=>[r[0], r[6], r[7]]));
  sh.getRange(1,startCol+3,revCost.length,3).setValues(revCost).setFontFamily(AA_CFG.FONT);
  SpreadsheetApp.flush();

  // –ö–æ–ª–æ–Ω–Ω-—á–∞—Ç: –ª–∏–¥—ã
  const ch1 = sh.newChart().setChartType(Charts.ChartType.COLUMN)
    .addRange(sh.getRange(1,startCol,leadsData.length,2))
    .setOption('title','–õ–∏–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º')
    .setOption('legend.position','none')
    .setOption('titleTextStyle',{fontSize:14,bold:true,fontName:AA_CFG.FONT})
    .setOption('hAxis',{ slantedText:true, slantedTextAngle:30, textStyle:{fontSize:11, fontName:AA_CFG.FONT}})
    .setOption('vAxis',{ textStyle:{fontSize:11, fontName:AA_CFG.FONT}})
    .setOption('chartArea',{left:40, top:40, width:'80%', height:'70%'})
    .setPosition(4, 15, 0, 0)
    .build();
  sh.insertChart(ch1);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: –í—ã—Ä—É—á–∫–∞ vs –†–∞—Å—Ö–æ–¥—ã
  const ch2 = sh.newChart().setChartType(Charts.ChartType.COLUMN)
    .addRange(sh.getRange(1,startCol+3,revCost.length,3))
    .setOption('title','–í—ã—Ä—É—á–∫–∞ –∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º')
    .setOption('legend.position','top')
    .setOption('bar.groupWidth','60%')
    .setOption('titleTextStyle',{fontSize:14,bold:true,fontName:AA_CFG.FONT})
    .setOption('hAxis',{ slantedText:true, slantedTextAngle:30, textStyle:{fontSize:11, fontName:AA_CFG.FONT}})
    .setOption('vAxis',{ textStyle:{fontSize:11, fontName:AA_CFG.FONT}})
    .setOption('chartArea',{left:40, top:40, width:'80%', height:'70%'})
    .setPosition(22, 15, 0, 0)
    .build();
  sh.insertChart(ch2);
}

/** ============ –°–¢–ò–õ–ò/–£–¢–ò–õ–ò–¢–´ ============ */
function applyZebraAndFrame_(range){
  const sh = range.getSheet();
  const nr = range.getNumRows(), nc = range.getNumColumns();
  // –û—á–∏—Å—Ç–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã, –ø–æ—Ç–æ–º –ø–æ—Å—Ç–∞–≤–∏–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
  range.setBorder(false,false,false,false,false,false);
  range.setFontFamily(AA_CFG.FONT);

  // –ó–µ–±—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ –±–ª–æ–∫–∞)
  const dataRows = Math.max(0, nr-1);
  if (dataRows>0){
    const dr = sh.getRange(range.getRow()+1, range.getColumn(), dataRows, nc);
    const odd = '#F8FCFF', even='#FFFFFF';
    const bgs = []; for(let r=0;r<dataRows;r++){ bgs.push(Array.from({length:nc}, ()=> (r%2===0? odd:even))); }
    dr.setBackgrounds(bgs);
  }
  // –®–∞–ø–∫–∞
  sh.getRange(range.getRow(), range.getColumn(), 1, nc).setBackground('#E6F7FF').setFontWeight('bold');

  // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç–∫–∞ + —Ç–æ–Ω–∫–∞—è –≤–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞
  range.setBorder(true,true,true,true,true,true,'#9E9E9E',SpreadsheetApp.BorderStyle.DOTTED);
  sh.getRange(range.getRow(), range.getColumn(), 1, nc)
    .setBorder(true,true,true,true,false,false,'#666666',SpreadsheetApp.BorderStyle.SOLID);
  sh.getRange(range.getRow()+nr-1, range.getColumn(), 1, nc)
    .setBorder(true,true,true,true,false,false,'#666666',SpreadsheetApp.BorderStyle.SOLID);
  sh.getRange(range.getRow(), range.getColumn(), nr, 1)
    .setBorder(true,true,true,true,false,false,'#666666',SpreadsheetApp.BorderStyle.SOLID);
  sh.getRange(range.getRow(), range.getColumn()+nc-1, nr, 1)
    .setBorder(true,true,true,true,false,false,'#666666',SpreadsheetApp.BorderStyle.SOLID);
}

function applyTrafficLight_(sh, startRow, col, n){
  const rng = sh.getRange(startRow, col, n, 1);
  const rules = sh.getConditionalFormatRules() || [];
  const green = SpreadsheetApp.newConditionalFormatRule()
    .whenNumberGreaterThanOrEqualTo(0.5) // >= 50%
    .setBackground('#d9ead3').setRanges([rng]).build();
  const yellow = SpreadsheetApp.newConditionalFormatRule()
    .whenNumberBetween(0, 0.5)
    .setBackground('#fff2cc').setRanges([rng]).build();
  const red = SpreadsheetApp.newConditionalFormatRule()
    .whenNumberLessThan(0)
    .setBackground('#f4cccc').setRanges([rng]).build();
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const rest = rules.filter(r=>{
    const a = r.getRanges();
    return !(a && a.length===1 && a[0].getA1Notation()===rng.getA1Notation());
  });
  sh.setConditionalFormatRules([...rest, green, yellow, red]);
}

function starByRomi_(romi){
  if (romi>=1.0) return '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ';
  if (romi>=0.5) return '‚òÖ‚òÖ‚òÖ‚òÖ';
  if (romi>=0.2) return '‚òÖ‚òÖ‚òÖ';
  if (romi>=0.0) return '‚òÖ‚òÖ';
  return '‚òÖ';
}

function ensureCols_(sh, need){ if (sh.getMaxColumns()<need) sh.insertColumnsAfter(sh.getMaxColumns(), need - sh.getMaxColumns()); }

/** ===== –ß–¢–ï–ù–ò–ï RA/DIRECTORY (–ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏) ===== */
function readRA2_(ss){
  const sh = ss.getSheetByName(AA_CFG.RA_SHEET);
  if (!sh) return {header:[],rows:[],idx:{lines:[],status:-1,sum:-1,budget:-1,rpStatus:-1,telTag:-1}};
  const peek = sh.getRange(1,1,Math.min(5, sh.getLastRow()||5), Math.min(120, sh.getLastColumn()||40)).getValues();
  let headerRow = 1;
  for (let r=0;r<peek.length;r++){
    const row = peek[r].map(String);
    if (row.includes('ID') && (row.includes('–°—Ç–∞—Ç—É—Å') || row.includes('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))){ headerRow=r+1; break; }
  }
  const lastRow = sh.getLastRow(), lastCol = sh.getLastColumn();
  const header = sh.getRange(headerRow,1,1,lastCol).getValues()[0].map(String);
  const rows = sh.getRange(headerRow+1,1,lastRow-headerRow,lastCol).getValues();

  const iStatus = findHeaderIndex_(header, ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å']);
  const iSum    = findHeaderIndex_(header, ['–°—É–º–º–∞ ‚ÇΩ','Guests.–°—É–º–º–∞ ‚ÇΩ','RP.–°—É–º–º–∞ ‚ÇΩ','–°—É–º–º–∞']);
  const iBudget = findHeaderIndex_(header, ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç']);
  const iTelTag = findHeaderIndex_(header, ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏','–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏']);
  const iNewVip = findHeaderIndex_(header, ['R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π']);

  const lines=[]; header.forEach((h,i)=>{ if (String(h).trim()==='–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE' || /–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE/.test(String(h))) lines.push(i); });
  return {header, rows, idx:{ status:iStatus, sum:iSum, budget:iBudget, telTag:iTelTag, rpStatus:iNewVip, lines }};
}

function readDirectory2_(ss){
  const sh = ss.getSheetByName(AA_CFG.DIRECTORY_SHEET);
  const byNumber = new Map(), tag2channel = new Map();
  if (!sh) return {byNumber, tag2channel};
  const v = sh.getDataRange().getValues(); if (!v.length) return {byNumber, tag2channel};
  const head = v[0].map(String), data = v.slice(1).filter(r=>r.some(x=>String(x).trim()!==''));
  const iNum = findHeaderIndex_(head, ['–ù–û–ú–ï–†','–ù–æ–º–µ—Ä','–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE','–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏']) || 0;
  const iTag = findHeaderIndex_(head, ['–¢–µ–≥','R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏']) || 1;
  const iCh  = findHeaderIndex_(head, ['–ö–∞–Ω–∞–ª','–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞–Ω–∞–ª–∞']) || 2;
  data.forEach(r=>{
    const num = digits_(r[iNum]); const tag = String(r[iTag]||'').trim(); const ch = normalizeChannel_(String(r[iCh]||'').trim());
    if (num && tag){ byNumber.set(num, {tag, channel:ch}); if (!tag2channel.has(tag)) tag2channel.set(tag,ch); }
  });
  return {byNumber, tag2channel};
}

/** ===== –£–¢–ò–õ–ò–¢–´ (–æ–±—â–∏–µ) ===== */
function findHeaderIndex_(header, names){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const n0 of names){
    const n = String(n0||'').trim().toLowerCase();
    let i = norm.indexOf(n); if (i>-1) return i;
    i = norm.findIndex(h=>h===n || h.includes(n)); if (i>-1) return i;
  }
  return -1;
}
function cleanTag_(v){ const s=String(v||'').trim(); if (!s) return ''; const first=s.split(/[;,:\s]+/).find(Boolean); return first||''; }
function digits_(v){ if (v==null) return ''; const d=String(v).replace(/\D/g,''); return d; }
function pickOneNumber_(cell){ const s=String(cell||''); const parts=s.split(/[;,]/).map(x=>x.trim()).filter(Boolean); for (const p of parts){ const d=digits_(p); if (d) return d; } return digits_(s); }
function toNumber_(v){ if (v==null || v==='') return 0; const n=Number(String(v).replace(/\s/g,'').replace(',', '.')); return isNaN(n)?0:n; }
function normalizeChannel_(s){ const t=String(s||'').trim(); if (/^2\s*gis$/i.test(t) || /^2–≥–∏—Å$/i.test(t) || /^2gis$/i.test(t)) return '2–ì–ò–°'; if (/^yandex\s*maps$/i.test(t)) return 'Yandex Maps'; if (/^vkontakte$/i.test(t)) return 'VKontakte'; if (/^telegram$/i.test(t)) return 'Telegram'; if (/^–æ—Å–Ω–æ–≤–Ω/i.test(t)) return '–û—Å–Ω–æ–≤–Ω–æ–π'; return t || 'Other'; }
