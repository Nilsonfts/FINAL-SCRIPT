/**
 * –ú–û–î–£–õ–¨: –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */

function analyzeAllStatuses() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ —Å–∏—Å—Ç–µ–º–µ...');
  
  try {
    const data = getWorkingAmoData();
    if (!data || data.length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    const statusMap = {};
    const successCount = {};
    const refusalCount = {};
    
    data.forEach(row => {
      const status = row[CONFIG.WORKING_AMO_COLUMNS.STATUS] || '';
      if (status) {
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if (!statusMap[status]) {
          statusMap[status] = 0;
        }
        statusMap[status]++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–º
        if (isSuccessStatus(status)) {
          if (!successCount[status]) {
            successCount[status] = 0;
          }
          successCount[status]++;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–æ–º
        if (isRefusalStatus(status)) {
          if (!refusalCount[status]) {
            refusalCount[status] = 0;
          }
          refusalCount[status]++;
        }
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const sheet = createOrUpdateSheet('üìä –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í');
    
    let currentRow = 1;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    sheet.getRange(currentRow, 1, 1, 5).merge();
    sheet.getRange(currentRow, 1).setValue('–ê–ù–ê–õ–ò–ó –í–°–ï–• –°–¢–ê–¢–£–°–û–í –í –°–ò–°–¢–ï–ú–ï')
         .setBackground('#1a237e')
         .setFontColor('#ffffff')
         .setFontSize(16)
         .setFontWeight('bold')
         .setHorizontalAlignment('center');
    
    currentRow += 3;
    
    // –°–≤–æ–¥–∫–∞
    const totalLeads = data.length;
    const totalSuccess = Object.values(successCount).reduce((sum, count) => sum + count, 0);
    const totalRefusals = Object.values(refusalCount).reduce((sum, count) => sum + count, 0);
    
    const summaryData = [
      ['–í—Å–µ–≥–æ –ª–∏–¥–æ–≤:', totalLeads],
      ['–£—Å–ø–µ—à–Ω—ã—Ö (–æ–ø–ª–∞—á–µ–Ω–æ):', totalSuccess, (totalSuccess / totalLeads * 100).toFixed(1) + '%'],
      ['–û—Ç–∫–∞–∑–æ–≤:', totalRefusals, (totalRefusals / totalLeads * 100).toFixed(1) + '%'],
      ['–î—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:', totalLeads - totalSuccess - totalRefusals, ((totalLeads - totalSuccess - totalRefusals) / totalLeads * 100).toFixed(1) + '%']
    ];
    
    summaryData.forEach(row => {
      sheet.getRange(currentRow, 1).setValue(row[0]).setFontWeight('bold');
      sheet.getRange(currentRow, 2).setValue(row[1]);
      if (row[2]) {
        sheet.getRange(currentRow, 3).setValue(row[2]);
      }
      currentRow++;
    });
    
    currentRow += 2;
    
    // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã
    sheet.getRange(currentRow, 1, 1, 5).merge();
    sheet.getRange(currentRow, 1).setValue('–í–°–ï –°–¢–ê–¢–£–°–´ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)')
         .setBackground('#3949ab')
         .setFontColor('#ffffff')
         .setFontWeight('bold');
    
    currentRow += 2;
    
    const headers = ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç', '–¢–∏–ø', '–£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫'];
    sheet.getRange(currentRow, 1, 1, headers.length).setValues([headers])
         .setBackground('#7986cb')
         .setFontColor('#ffffff')
         .setFontWeight('bold');
    
    currentRow++;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    const sortedStatuses = Object.entries(statusMap).sort((a, b) => b[1] - a[1]);
    
    const statusData = sortedStatuses.map(([status, count]) => {
      let type = '–î—Ä—É–≥–æ–µ';
      let accounting = '–ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è';
      let rowColor = '#ffffff';
      
      if (successCount[status]) {
        type = '–£—Å–ø–µ—à–Ω—ã–π';
        accounting = '–û–ø–ª–∞—á–µ–Ω–æ';
        rowColor = '#e8f5e9';
      } else if (refusalCount[status]) {
        type = '–û—Ç–∫–∞–∑';
        accounting = '–ü–æ—Ç–µ—Ä—è';
        rowColor = '#ffebee';
      }
      
      return {
        data: [
          status,
          count,
          (count / totalLeads * 100).toFixed(1) + '%',
          type,
          accounting
        ],
        color: rowColor
      };
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    statusData.forEach(({ data, color }) => {
      const range = sheet.getRange(currentRow, 1, 1, headers.length);
      range.setValues([data]);
      range.setBackground(color);
      currentRow++;
    });
    
    // –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    currentRow += 2;
    sheet.getRange(currentRow, 1, 1, 5).merge();
    sheet.getRange(currentRow, 1).setValue('‚úÖ –£–°–ü–ï–®–ù–´–ï –°–¢–ê–¢–£–°–´ (–≥–æ—Å—Ç—å –æ–ø–ª–∞—Ç–∏–ª)')
         .setBackground('#2e7d32')
         .setFontColor('#ffffff')
         .setFontWeight('bold');
    
    currentRow += 2;
    
    Object.entries(successCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([status, count]) => {
        sheet.getRange(currentRow, 1).setValue(status);
        sheet.getRange(currentRow, 2).setValue(count);
        sheet.getRange(currentRow, 3).setValue((count / totalLeads * 100).toFixed(1) + '%');
        sheet.getRange(currentRow, 1, 1, 3).setBackground('#e8f5e9');
        currentRow++;
      });
    
    // –°—Ç–∞—Ç—É—Å—ã –æ—Ç–∫–∞–∑–æ–≤
    currentRow += 2;
    sheet.getRange(currentRow, 1, 1, 5).merge();
    sheet.getRange(currentRow, 1).setValue('‚ùå –°–¢–ê–¢–£–°–´ –û–¢–ö–ê–ó–û–í')
         .setBackground('#d32f2f')
         .setFontColor('#ffffff')
         .setFontWeight('bold');
    
    currentRow += 2;
    
    Object.entries(refusalCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([status, count]) => {
        sheet.getRange(currentRow, 1).setValue(status);
        sheet.getRange(currentRow, 2).setValue(count);
        sheet.getRange(currentRow, 3).setValue((count / totalLeads * 100).toFixed(1) + '%');
        sheet.getRange(currentRow, 1, 1, 3).setBackground('#ffebee');
        currentRow++;
      });
    
    // –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    sheet.autoResizeColumns(1, 5);
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log(`–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: ${Object.keys(statusMap).length}`);
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${Object.keys(successCount).length}`);
    console.log(`–û—Ç–∫–∞–∑–æ–≤: ${Object.keys(refusalCount).length}`);
    
    return {
      allStatuses: statusMap,
      successStatuses: successCount,
      refusalStatuses: refusalCount
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    throw error;
  }
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
 */
function checkStatus(statusToCheck) {
  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: "${statusToCheck}"`);
  console.log(`–£—Å–ø–µ—à–Ω—ã–π: ${isSuccessStatus(statusToCheck) ? '–î–ê ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
  console.log(`–û—Ç–∫–∞–∑: ${isRefusalStatus(statusToCheck) ? '–î–ê ‚ùå' : '–ù–ï–¢ ‚úÖ'}`);
  console.log(`–û–ø–ª–∞—á–µ–Ω: ${isPaidStatus(statusToCheck) ? '–î–ê üí∞' : '–ù–ï–¢'}`);
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// checkStatus('–û–ø–ª–∞—á–µ–Ω–æ');
// checkStatus('–£—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û');
// checkStatus('—É—Å–ø–µ—à–Ω–æ –≤ –†–ü');
