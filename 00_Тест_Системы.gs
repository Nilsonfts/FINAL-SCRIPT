/**
 * –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

function quickSystemTest() {
  console.log('üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const configValid = validateConfiguration();
    console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configValid ? '‚úÖ' : '‚ùå'}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞ –†–ê–ë–û–ß–ò–ô_–ê–ú–û...');
    const structureReport = diagnoseWorkingAmoStructure();
    console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${structureReport.validation?.valid ? '‚úÖ' : '‚ùå'}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–∏–ª–∏—Ç—ã
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç...');
    const testNumber = formatNumber('1,234.56');
    const testPhone = normalizePhone('+7 (123) 456-78-90');
    const testStatus = isSuccessStatus('–û–ø–ª–∞—á–µ–Ω–æ');
    
    console.log(`   formatNumber: ${testNumber} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 1234.56) ${testNumber === 1234.56 ? '‚úÖ' : '‚ùå'}`);
    console.log(`   normalizePhone: ${testPhone} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 71234567890) ${testPhone === '71234567890' ? '‚úÖ' : '‚ùå'}`);
    console.log(`   isSuccessStatus: ${testStatus} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: true) ${testStatus === true ? '‚úÖ' : '‚ùå'}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    const data = getWorkingAmoData();
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${data.length} ${data.length > 0 ? '‚úÖ' : '‚ùå'}`);
    
    if (data.length > 0) {
      console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ID=${data[0][0]}, –ù–∞–∑–≤–∞–Ω–∏–µ=${data[0][1]}, –°—Ç–∞—Ç—É—Å=${data[0][2]}`);
    }
    
    // 5. –ò—Ç–æ–≥
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:');
    const allGood = configValid && structureReport.validation?.valid && data.length > 0;
    console.log(allGood ? '‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
    
    return {
      success: allGood,
      config: configValid,
      structure: structureReport.validation?.valid,
      dataRows: data.length,
      utilities: testNumber === 1234.56 && testPhone === '71234567890' && testStatus === true
    };
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
 */
function fullSystemDiagnostic() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´...');
  
  try {
    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    const quickTest = quickSystemTest();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('üî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω—ã
    const tokenStatus = getApiTokensStatus();
    console.log(`API —Ç–æ–∫–µ–Ω—ã: ${tokenStatus.configuredCount}/${tokenStatus.totalCount} (${tokenStatus.percentage}%)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫ –¥–µ—Ç–∞–ª—å–Ω–æ
    if (CONFIG.WORKING_AMO_COLUMNS) {
      const requiredColumns = ['ID', 'NAME', 'STATUS', 'RESPONSIBLE', 'PHONE', 'CREATED_AT'];
      const missingColumns = requiredColumns.filter(col => CONFIG.WORKING_AMO_COLUMNS[col] === undefined);
      
      if (missingColumns.length === 0) {
        console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      } else {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏:', missingColumns.join(', '));
      }
    }
    
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:');
    if (quickTest.success) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
      console.log('üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É: runCompleteAnalysis()');
    } else {
      console.log('‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
      console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: fixWorkingAmoStructureNow()');
    }
    
    return quickTest;
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    return { success: false, error: error.toString() };
  }
}
