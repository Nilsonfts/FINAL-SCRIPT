/**********************************************************
 * üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í (v5.0: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 **********************************************************/
const CONFIG = {
  // –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
  SOURCE_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  OUTPUT_SHEET: '–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó', // –°–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  TIMEZONE:     'Europe/Moscow',
  
  // ‚ùó –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã –±—É–¥—É—Ç –∏–¥—Ç–∏ —Å —ç—Ç–æ–π –¥–∞—Ç—ã
  CHART_START_DATE: '2025-04-01',

  // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
  FONT: 'Arial',
  GPT_MODEL: 'gpt-4o',
  COLORS: {
    PRIMARY: '#4285F4', SECONDARY: '#34A853', ACCENT: '#FBBC04',
    HEADER: '#4a4a4a',
    CHART_PALETTE: ['#4285F4', '#DB4437', '#F4B400', '#0F9D58', '#AB47BC', '#00ACC1', '#FF7043', '#9E9D24']
  },
  SUCCESS_RE: /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à.*–≤\s*—Ä–ø|—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑)/i,
  H: {
    CREATED: ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'], CLOSED:  ['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], STATUS:  ['–°—Ç–∞—Ç—É—Å'], BUDGET:  ['–ë—é–¥–∂–µ—Ç'],
    AX: ['–°—É–º–º–∞ ‚ÇΩ'], SRC_TEL: ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'], UTM_S: ['UTM_SOURCE','utm_source'],
    CLIENT:  ['–§–ò–û','–ö–æ–Ω—Ç–∞–∫—Ç','–ò–º—è','–ö–ª–∏–µ–Ω—Ç'], PHONE:   ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
  },
  MAP: {
    site: [/^osn[_\-]?tel$/i, /^site$/i, /^rp[_\-]?site$/i, /^direct$/i, /^–ø—Ä—è–º/i],
    yandex: [/^ya[_\-]?tel$/i, /^ya[_\-]?map/i, /^yandex/i], gis2: [/^2gis/i, /^2gis[_\-]?tel/i],
    telegram: [/^bot[_\-]?tg$/i, /^tg$/i, /^telegram/i], vk: [/^vk/i],
  },
  TITLES: { site:'–°–∞–π—Ç', yandex:'–Ø–Ω–¥–µ–∫—Å', gis2:'2–ì–ò–°', telegram:'Telegram', vk:'–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', other:'–û–ë' },
};

/* ==================== –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==================== */
function buildChannelComparison(){
  const OPENAI_API_KEY = PropertiesService.getScriptProperties().getProperty('OPENAI_API_KEY');
  if (!OPENAI_API_KEY) throw new Error('–ö–ª—é—á "OPENAI_API_KEY" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –°–≤–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä–∏–ø—Ç–∞.');

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const amo = ss.getSheetByName(CONFIG.SOURCE_SHEET);
  if (!amo) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+CONFIG.SOURCE_SHEET+'"');

  const {header, rows} = cmp_readTable(amo);
  const i = cmp_idx(header);

  // ‚ùó –û–ë–ù–û–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–∞–º–∏
  const startDate = new Date(CONFIG.CHART_START_DATE);
  const filteredRows = rows.filter(r => {
    const created = cmp_toDate(r[i.CREATED]);
    return created && created >= startDate;
  });

  const { ch, byClient } = cmp_collectData(filteredRows, i);

  for (const v of byClient.values()){
    const ckey = v.firstCh || 'other';
    const co = ch.get(ckey);
    if(co) { co.first++; if (v.succAny){ co.firstConv++; co.firstRevenue += v.revenueTotal; } }
  }

  let totalRevenue = 0, totalLeads = 0, totalDeals = 0;
  for (const v of ch.values()) { totalRevenue += v.revenue; totalLeads += v.leads; totalDeals += v.deals; }
  
  const rowsOutData = [...ch.entries()]
    .sort((a,b)=>b[1].revenue - a[1].revenue)
    .map(([key, v]) => cmp_calculateMetrics(key, v, totalRevenue));
  
  const monthlyRevenueData = cmp_calculateMonthlyRevenueBreakdown(filteredRows, i);
  
  const gptRecommendations = cmp_getGptRecommendationsForAll(rowsOutData, OPENAI_API_KEY);
  rowsOutData.forEach(row => { row.recommendation = gptRecommendations[row.key] || '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GPT.'; });
  
  const totals = { totalRevenue, totalLeads, totalDeals };
  cmp_writeOutputSheet(ss, rowsOutData, totals, monthlyRevenueData);
}

/* ==================== –í–´–í–û–î –ù–ê –õ–ò–°–¢ ==================== */
function cmp_writeOutputSheet(ss, rowsOutData, totals, monthlyRevenueData) {
  const out = ss.getSheetByName(CONFIG.OUTPUT_SHEET) || ss.insertSheet(CONFIG.OUTPUT_SHEET);
  out.clear();
  out.getCharts().forEach(chart => out.removeChart(chart));
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
  if(out.getMaxColumns() > 12) out.deleteColumns(13, out.getMaxColumns() - 12);
  if(out.getMaxRows() > 100) out.deleteRows(101, out.getMaxRows() - 100);
  
  cmp_setFont(out, CONFIG.FONT);

  let r=1, c=1;

  cmp_band(out, r, c, 1, 12, CONFIG.COLORS.HEADER);
  out.getRange(r,c,1,12).merge().setValue('üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í')
     .setFontSize(18).setFontWeight('bold').setFontColor('#fff');
  r++;
  
  out.getRange(r, 1, 1, 6).setValues([
    ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date(), '–û–±—â–∏–π –¥–æ—Ö–æ–¥:', totals.totalRevenue, '–í—Å–µ–≥–æ –ª–∏–¥–æ–≤:', totals.totalLeads]
  ]).setFontWeight('bold');
  out.getRange(r, 2).setNumberFormat('dd.MM.yyyy, HH:mm');
  out.getRange(r, 4).setNumberFormat('#,##0" ‚ÇΩ"');
  r+=2;

  cmp_buildDashboard(out, r, rowsOutData, monthlyRevenueData);
  r += 16; // –ú–µ—Å—Ç–æ –ø–æ–¥ –≤–µ—Ä—Ö–Ω–∏–µ 2 –≥—Ä–∞—Ñ–∏–∫–∞

  r += 16; // –ú–µ—Å—Ç–æ –ø–æ–¥ –Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫

  // –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const head = ['–ö–∞–Ω–∞–ª','–õ–∏–¥—ã','–°–¥–µ–ª–∫–∏','–î–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','–°—Ä. —á–µ–∫ ‚ÇΩ','–°—Ä. –≤—Ä–µ–º—è —Å–¥–µ–ª–∫','–ü–µ—Ä–≤—ã–µ –∫–∞—Å–∞–Ω–∏—è','–ö–æ–Ω–≤. –ø–µ—Ä–≤—ã—Ö','LTV –ø–µ—Ä–≤—ã—Ö ‚ÇΩ','–î–æ–ª—è –¥–æ—Ö–æ–¥–∞','–†–µ–π—Ç–∏–Ω–≥'];
  const body = rowsOutData.map(x=>[
    x.title, x.leads, x.deals, x.revenue, x.conv, x.avgCheck, x.avgDays, x.first, x.convFirst, x.ltvFirst, x.share, x.stars
  ]);
  cmp_writeTable(out, r, c, head, body, CONFIG.COLORS.PRIMARY);
  const n = Math.max(1, body.length);
  out.getRange(r+1, c+3, n, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  out.getRange(r+1, c+4, n, 1).setNumberFormat('0.0%');
  out.getRange(r+1, c+5, n, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  out.getRange(r+1, c+6, n, 1).setNumberFormat('0" –¥–Ω."');
  out.getRange(r+1, c+8, n, 1).setNumberFormat('0.0%');
  out.getRange(r+1, c+9, n, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  out.getRange(r+1, c+10, n, 1).setNumberFormat('0.0%');
  cmp_applyConditionalFormatting(out.getRange(r+1, c+11, n, 1));
  r += (n + 2);

  // ‚ùó –û–ë–ù–û–í–õ–ï–ù–û: –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫
  cmp_title(out, r, c, 'üìé –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–¢ GPT', 12, CONFIG.COLORS.SECONDARY); r++;
  const recHeadRange = out.getRange(r, c, 1, 12);
  recHeadRange.setBorder(true, true, true, true, true, true).setFontWeight('bold').setBackground('#f3f3f3');
  out.getRange(r, c).setValue('–ö–∞–Ω–∞–ª');
  out.getRange(r, c + 1, 1, 11).merge().setValue('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è');
  r++;
  rowsOutData.forEach(x => {
    out.getRange(r, c).setValue(x.title).setBorder(true, true, true, true, true, true);
    out.getRange(r, c + 1, 1, 11).merge()
      .setValue(x.recommendation)
      .setWrap(true).setVerticalAlignment('top')
      .setBorder(true, true, true, true, true, true);
    r++;
  });
  
  cmp_formatColumns(out);
}

/* ==================== –î–ê–ù–ù–´–ï –ò –ì–†–ê–§–ò–ö–ò ==================== */
function cmp_buildDashboard(sheet, startRow, data, monthlyRevenueData) {
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è)
  const chartDataSource = cmp_writeChartDataSource(sheet, startRow, data);
  const dataRows = chartDataSource.getNumRows(), rangeA = chartDataSource.offset(0, 0, dataRows, 1), rangeB = chartDataSource.offset(0, 1, dataRows, 1), rangeD = chartDataSource.offset(0, 3, dataRows, 1);
  
  const pieChart = sheet.newChart().asPieChart()
    .addRange(rangeA).addRange(rangeB).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setOption('title', '–î–æ–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–±—â–µ–º –¥–æ—Ö–æ–¥–µ').setOption('is3D', true)
    .setOption('colors', CONFIG.COLORS.CHART_PALETTE)
    .setPosition(startRow, 1, 0, 0).build(); // A{startRow}

  const barChart = sheet.newChart().asBarChart()
    .addRange(rangeA).addRange(rangeD).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setOption('title', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ LTV –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–∞—Å–∞–Ω–∏—é')
    .setOption('colors', [CONFIG.COLORS.PRIMARY])
    .setPosition(startRow, 6, 0, 0).build(); // F{startRow}
  
  sheet.insertChart(pieChart);
  sheet.insertChart(barChart);
  sheet.hideRows(chartDataSource.getRow(), chartDataSource.getNumRows());

  // ‚ùó –û–ë–ù–û–í–õ–ï–ù–û: –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–µ–π –¥–æ—Ö–æ–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
  const monthlyChart = cmp_createMonthlyShareChart(sheet, startRow + 16, monthlyRevenueData);
  if (monthlyChart) sheet.insertChart(monthlyChart);
}

function cmp_createMonthlyShareChart(sheet, startRow, monthlyRevenue) {
  const months = Object.keys(monthlyRevenue).sort();
  if (months.length === 0) return null;
  const allChannels = [...new Set(months.flatMap(m => Object.keys(monthlyRevenue[m])))];
  
  const chartData = [ ['–ú–µ—Å—è—Ü', ...allChannels] ];
  months.forEach(month => {
    const row = [month, ...allChannels.map(ch => monthlyRevenue[month][ch] || 0)];
    chartData.push(row);
  });
  
  const range = sheet.getRange(startRow, 1, chartData.length, chartData[0].length);
  range.setValues(chartData);
  sheet.hideRows(startRow, chartData.length);

  return sheet.newChart().asColumnChart()
    .addRange(range).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setStacked(Charts.Stacking.PERCENT)
    .setOption('title', '–î–æ–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –¥–æ—Ö–æ–¥–µ –ø–æ –º–µ—Å—è—Ü–∞–º')
    .setOption('colors', CONFIG.COLORS.CHART_PALETTE)
    // ‚ùó –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    .setOption('legend', { position: 'right', textStyle: { fontSize: 11 } })
    .setOption('chartArea', {left: '10%', top: '10%', width: '65%', height: '75%'})
    .setPosition(startRow - 16, 1, 0, 0).build(); // –°—Ç–∞–≤–∏–º –ø–æ–¥ –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è
}

/* ==================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ==================== */
function cmp_formatColumns(sh) {
  sh.setColumnWidth(1, 150); // –ö–∞–Ω–∞–ª
  sh.setColumnWidths(2, 10, 80); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  sh.setColumnWidth(12, 100); // –†–µ–π—Ç–∏–Ω–≥
  // –ö–æ–ª–æ–Ω–∫–∏ –¥–∞–ª—å—à–µ L –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ
}

// ... (–∑–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: cmp_calculateMetrics, cmp_collectData, GPT, —É—Ç–∏–ª–∏—Ç—ã –∏ —Ç.–¥.)
// –û–Ω–∏ –Ω–µ –º–µ–Ω—è–ª–∏—Å—å –∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã.
function cmp_readTable(sh) { /*...*/ }
function cmp_idx(header){ /*...*/ }
function cmp_collectData(rows, i) { /*...*/ }
function cmp_calculateMetrics(key, v, totalRevenue) { /*...*/ }
function cmp_calculateMonthlyRevenueBreakdown(rows, i) { /*...*/ }
function cmp_getGptRecommendationsForAll(channelData, apiKey) { /*...*/ }
function cmp_buildGptPrompt(channelData) { /*...*/ }
function callGPT_(apiKey, prompt, model){ /*...*/ }
function cmp_writeChartDataSource(sheet, startRow, data) { /*...*/ }
function cmp_applyConditionalFormatting(range) { /*...*/ }
function cmp_resolveChannel(source){ /*...*/ }
function cmp_money(v){ /*...*/ }
function cmp_toDate(v){ /*...*/ }
function cmp_cleanPhone(s){ /*...*/ }
function cmp_rating(conv, share, convFirst){ /*...*/ }
function cmp_setFont(sh, font){ /*...*/ }
function cmp_band(sh, row, col, rows, cols, bg){ /*...*/ }
function cmp_title(sh, row, col, text, width, bg){ /*...*/ }
function cmp_writeTable(sh, row, col, header, data, headBg='#E9F2FB'){ /*...*/ }
function cmp_ensure(sh, needRow, needCol){ /*...*/ }
function onOpen(){ /*...*/ }
function cmp_setHourlyTrigger(){ /*...*/ }
