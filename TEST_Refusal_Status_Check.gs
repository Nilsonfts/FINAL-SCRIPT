/**
 * –¢–ï–°–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–¢–ê–¢–£–°–û–í
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫–∞–∑–æ–≤
 */

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –†–ê–ë–û–ß–ò–ô –ê–ú–û –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—É—Å–∞–º —Å–¥–µ–ª–æ–∫
 */
function analyzeAllStatusesForRefusal() {
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫–∞–∑–æ–≤');
    console.log('=================================================');
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const workingSheet = spreadsheet.getSheetByName('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    
    if (!workingSheet) {
      console.log('‚ùå –õ–∏—Å—Ç "–†–ê–ë–û–ß–ò–ô –ê–ú–û" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const rawData = workingSheet.getDataRange().getValues();
    if (rawData.length <= 1) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "–†–ê–ë–û–ß–ò–ô –ê–ú–û"');
      return;
    }
    
    const headers = rawData[0];
    const rows = rawData.slice(1);
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    const statusIndex = findColumnIndex(headers, ['–°—Ç–∞—Ç—É—Å', 'Status', '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å']);
    
    if (statusIndex < 0) {
      console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
      return;
    }
    
    console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–π–¥–µ–Ω–∞: ${headers[statusIndex]} (–∏–Ω–¥–µ–∫—Å ${statusIndex})`);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = {};
    let emptyStatuses = 0;
    
    rows.forEach(row => {
      const status = String(row[statusIndex] || '').trim();
      if (!status) {
        emptyStatuses++;
      } else {
        statusStats[status] = (statusStats[status] || 0) + 1;
      }
    });
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í:');
    console.log('========================');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    const sortedStatuses = Object.entries(statusStats)
      .sort(([,a], [,b]) => b - a);
    
    sortedStatuses.forEach(([status, count]) => {
      const percentage = ((count / rows.length) * 100).toFixed(1);
      console.log(`üìå "${status}": ${count} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
    });
    
    if (emptyStatuses > 0) {
      const percentage = ((emptyStatuses / rows.length) * 100).toFixed(1);
      console.log(`‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${emptyStatuses} –∑–∞–ø–∏—Å–µ–π (${percentage}%)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–∞–∑–∞–º–∏
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ù–ê –ü–†–ï–î–ú–ï–¢ –û–¢–ö–ê–ó–û–í:');
    console.log('=============================');
    
    const refusedKeywords = [
      '–∑–∞–∫—Ä—ã—Ç–æ', '–æ—Ç–∫–ª–æ–Ω', '–æ—Ç–∫–∞–∑', 'failure', 'rejected', 
      'closed', '—Ä–µ–∞–ª–∏–∑–æ–≤', '–ø—Ä–æ–≤–∞–ª', '–Ω–µ—É—Å–ø–µ—à–Ω–æ'
    ];
    
    let potentialRefusals = 0;
    
    sortedStatuses.forEach(([status, count]) => {
      const statusLower = status.toLowerCase();
      const isRefusal = refusedKeywords.some(keyword => statusLower.includes(keyword));
      
      if (isRefusal) {
        console.log(`‚ùå –í–û–ó–ú–û–ñ–ù–´–ô –û–¢–ö–ê–ó: "${status}" (${count} –∑–∞–ø–∏—Å–µ–π)`);
        potentialRefusals += count;
      } else {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π: "${status}" (${count} –∑–∞–ø–∏—Å–µ–π)`);
      }
    });
    
    console.log(`\nüìä –ò–¢–û–ì–û –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤: ${potentialRefusals} –∏–∑ ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: ${((potentialRefusals / rows.length) * 100).toFixed(1)}%`);
    
    return {
      totalRecords: rows.length,
      statusStats: statusStats,
      potentialRefusals: potentialRefusals,
      refusalPercentage: (potentialRefusals / rows.length) * 100
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    return { error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é getRefusedDealsData_
 */
function testRefusedDealsFunction() {
  try {
    console.log('üß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò getRefusedDealsData_');
    console.log('====================================');
    
    const refusedDeals = getRefusedDealsData_();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${refusedDeals.length}`);
    
    if (refusedDeals.length > 0) {
      console.log('\nüìã –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–´–• –û–¢–ö–ê–ó–û–í:');
      console.log('==============================');
      
      refusedDeals.slice(0, 5).forEach((deal, index) => {
        console.log(`\n${index + 1}. –°–¥–µ–ª–∫–∞: ${deal.dealName}`);
        console.log(`   ID: ${deal.dealId}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${deal.status}`);
        console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${deal.refusalComment}`);
        console.log(`   –ö–∞–Ω–∞–ª: ${deal.channel}`);
        console.log(`   –ú–µ–Ω–µ–¥–∂–µ—Ä: ${deal.manager}`);
      });
      
      if (refusedDeals.length > 5) {
        console.log(`\n... –∏ –µ—â–µ ${refusedDeals.length - 5} –æ—Ç–∫–∞–∑–æ–≤`);
      }
    } else {
      console.log('‚ùå –û—Ç–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤...');
      analyzeAllStatusesForRefusal();
    }
    
    return refusedDeals;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return [];
  }
}
