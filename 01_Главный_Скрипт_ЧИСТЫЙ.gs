/**
 * ============================================
 * –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ - –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø
 * –§–æ–∫—É—Å: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û
 * ============================================
 */

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞ + –í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è
 */
function runMergedAmoAnalysis() {
  console.log('üöÄ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û');
  
  const startTime = new Date();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    buildMergedAmoFile();
    
    const endTime = new Date();
    const duration = Math.round((endTime - startTime) / 1000);
    
    console.log(`‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –§–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û —Å —Ü–≤–µ—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω –∑–∞ ${duration} —Å–µ–∫`);
    
  } catch (error) {
    console.error('‚ùå –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
    try {
      repairWorkingAmoSheet();
      console.log('‚úÖ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
    } catch (repairError) {
      console.error('‚ùå –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', repairError);
    }
    
    throw error;
  }
}

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û (–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø)
 */
function runWorkingAmoClean() {
  console.log('üöÄ –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û');
  
  const startTime = new Date();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û
    buildWorkingAmoFileClean();
    
    const endTime = new Date();
    const duration = Math.round((endTime - startTime) / 1000);
    
    console.log(`‚úÖ –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –§–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û —Å–æ–∑–¥–∞–Ω –∑–∞ ${duration} —Å–µ–∫`);
    
  } catch (error) {
    console.error('‚ùå –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    throw error;
  }
}

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û
 */
function runFullAnalyticsUpdate() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û');
  
  const startTime = new Date();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û
    buildWorkingAmoFile();
    
    const endTime = new Date();
    const duration = Math.round((endTime - startTime) / 1000);
    
    console.log(`‚úÖ –§–∞–π–ª –†–ê–ë–û–ß–ò–ô –ê–ú–û —Å–æ–∑–¥–∞–Ω –∑–∞ ${duration} —Å–µ–∫`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    throw error;
  }
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê –†–ê–ë–û–ß–ò–ô –ê–ú–û
 */
function buildMergedAmoFile() {
  console.log('üìä –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û...');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç
    let sheet = ss.getSheetByName('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    if (!sheet) {
      sheet = ss.insertSheet('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    } else {
      sheet.clear();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    createMergedAmoHeaders_(sheet);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const mergedData = loadAndMergeAmoSources_();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
    if (mergedData.length > 0) {
      const range = sheet.getRange(2, 1, mergedData.length, mergedData[0].length);
      range.setValues(mergedData);
      
      // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      sheet.autoResizeColumns(1, Math.min(15, mergedData[0].length));
    }
    
    console.log(`‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–ø–∏—Å–∞–Ω–æ ${mergedData.length} —Å—Ç—Ä–æ–∫ –≤ –†–ê–ë–û–ß–ò–ô –ê–ú–û`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥
    writeProcessingLog_('MERGED_AMO', mergedData.length);
    
  } catch (error) {
    console.error('‚ùå –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    throw error;
  }
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–ê –†–ê–ë–û–ß–ò–ô –ê–ú–û (–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø)
 */
function buildWorkingAmoFileClean() {
  console.log('üìä –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û...');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç
    let sheet = ss.getSheetByName('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    if (!sheet) {
      sheet = ss.insertSheet('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    } else {
      sheet.clear();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    createWorkingAmoHeaders_(sheet);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const consolidatedData = loadAndConsolidateAllDataClean_();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
    if (consolidatedData.length > 0) {
      const range = sheet.getRange(2, 1, consolidatedData.length, consolidatedData[0].length);
      range.setValues(consolidatedData);
      
      // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      sheet.autoResizeColumns(1, Math.min(10, consolidatedData[0].length));
    }
    
    console.log(`‚úÖ –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–ø–∏—Å–∞–Ω–æ ${consolidatedData.length} —Å—Ç—Ä–æ–∫ –≤ –†–ê–ë–û–ß–ò–ô –ê–ú–û`);
    
  } catch (error) {
    console.error('‚ùå –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    throw error;
  }
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–ê –†–ê–ë–û–ß–ò–ô –ê–ú–û
 */
function buildWorkingAmoFile() {
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –†–ê–ë–û–ß–ò–ô –ê–ú–û...');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç
    let sheet = ss.getSheetByName('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    if (!sheet) {
      sheet = ss.insertSheet('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    } else {
      sheet.clear();
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      clearDataValidation_(sheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    createWorkingAmoHeaders_(sheet);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const consolidatedData = loadAndConsolidateAllData_();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
    if (consolidatedData.length > 0) {
      const range = sheet.getRange(2, 1, consolidatedData.length, consolidatedData[0].length);
      range.setValues(consolidatedData);
      
      // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      sheet.autoResizeColumns(1, Math.min(10, consolidatedData[0].length));
    }
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ ${consolidatedData.length} —Å—Ç—Ä–æ–∫ –≤ –†–ê–ë–û–ß–ò–ô –ê–ú–û`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –†–ê–ë–û–ß–ò–ô –ê–ú–û:', error);
    throw error;
  }
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• (–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø)
 */
function loadAndConsolidateAllDataClean_() {
  console.log('üîÑ –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const amoCrmData = loadAmoCrmData_();
    const reservesData = loadReservesData_();
    const guestsData = loadGuestsData_();
    const siteFormsData = loadSiteFormsData_();
    const calltrackingData = loadCalltrackingData_();
    
    console.log(`üìà –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: AMO=${amoCrmData.length}, Reserves=${reservesData.length}, Guests=${guestsData.length}, Site=${siteFormsData.length}, Calls=${calltrackingData.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneToSite = createPhoneMap_(siteFormsData);
    const phoneToReserves = createPhoneMap_(reservesData);
    const phoneToGuests = createPhoneMap_(guestsData);
    const phoneToCalltracking = createPhoneMap_(calltrackingData);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AmoCRM
    const consolidatedData = [];
    
    amoCrmData.forEach((deal, index) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏, –¥–∞–∂–µ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phone = deal.phone ? normalizePhone_(deal.phone) : null;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–≥–∞—â–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω)
      const siteData = phone ? (phoneToSite.get(phone) || {}) : {};
      const reserveData = phone ? (phoneToReserves.get(phone) || {}) : {};
      const guestData = phone ? (phoneToGuests.get(phone) || {}) : {};
      const callData = phone ? (phoneToCalltracking.get(phone) || {}) : {};
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      if (index < 3) {
        console.log(`–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø - –ó–∞–ø–∏—Å—å ${index}: created_at=${deal.created_at}, —Ç–∏–ø=${typeof deal.created_at}, booking_date=${deal.booking_date}, —Ç–∏–ø=${typeof deal.booking_date}, phone=${deal.phone || '–ù–ï–¢'}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö —Å —á–∏—Å—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
      const enrichedRow = createEnrichedDataRowClean_(deal, siteData, reserveData, guestData, callData);
      consolidatedData.push(enrichedRow);
    });
    
    console.log(`üéØ –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –°–æ–∑–¥–∞–Ω–æ ${consolidatedData.length} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    return consolidatedData;
    
  } catch (error) {
    console.error('‚ùå –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø: –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–•
 */
function loadAndConsolidateAllData_() {
  console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    const amoCrmData = loadAmoCrmData_();
    const reservesData = loadReservesData_();
    const guestsData = loadGuestsData_();
    const siteFormsData = loadSiteFormsData_();
    const calltrackingData = loadCalltrackingData_();
    
    console.log(`üìà –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: AMO=${amoCrmData.length}, Reserves=${reservesData.length}, Guests=${guestsData.length}, Site=${siteFormsData.length}, Calls=${calltrackingData.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneToSite = createPhoneMap_(siteFormsData);
    const phoneToReserves = createPhoneMap_(reservesData);
    const phoneToGuests = createPhoneMap_(guestsData);
    const phoneToCalltracking = createPhoneMap_(calltrackingData);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AmoCRM
    const consolidatedData = [];
    
    amoCrmData.forEach((deal, index) => {
      if (!deal.phone) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      
      const phone = normalizePhone_(deal.phone);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–≥–∞—â–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const siteData = phoneToSite.get(phone) || {};
      const reserveData = phoneToReserves.get(phone) || {};
      const guestData = phoneToGuests.get(phone) || {};
      const callData = phoneToCalltracking.get(phone) || {};
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      if (index < 3) {
        console.log(`–ó–∞–ø–∏—Å—å ${index}: created_at=${deal.created_at}, —Ç–∏–ø=${typeof deal.created_at}, booking_date=${deal.booking_date}, —Ç–∏–ø=${typeof deal.booking_date}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
      const enrichedRow = createEnrichedDataRow_(deal, siteData, reserveData, guestData, callData);
      consolidatedData.push(enrichedRow);
    });
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–æ ${consolidatedData.length} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    return consolidatedData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –î–í–£–• –ò–°–¢–û–ß–ù–ò–ö–û–í AMO
 */
function loadAndMergeAmoSources_() {
  console.log('üîÑ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–µ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ AMO...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const fullAmoData = loadAmoFullData_();
    const regularAmoData = loadAmoRegularData_();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—á–µ—Ç–æ–≤
    const guestsData = loadGuestsData_();
    const phoneToGuests = createPhoneMap_(guestsData);
    
    console.log(`üìä –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–æ Full=${fullAmoData.length}, Regular=${regularAmoData.length}, Guests=${guestsData.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ ID –¥–ª—è "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const fullAmoMap = new Map();
    fullAmoData.forEach(deal => {
      if (deal.id) {
        fullAmoMap.set(deal.id.toString(), deal);
      }
    });
    
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mergedDeals = new Map();
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑ "–ü–æ–ª–Ω–æ–π" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    fullAmoData.forEach(deal => {
      if (deal.id) {
        const id = deal.id.toString();
        // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        const phone = deal.phone ? normalizePhoneForSearch_(deal.phone) : null;
        const guestData = phone ? phoneToGuests.get(phone) : null;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        if (phone && guestData) {
          console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: AMO ${deal.phone} ‚Üí –ì–æ—Å—Ç—å ${guestData.phone} (${guestData.name})`);
        }
        
        mergedDeals.set(id, createMergedDealRow_(deal, null, guestData));
      }
    });
    
    // –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ—Ç—ã –∏–∑ "–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞"
    regularAmoData.forEach(deal => {
      if (!deal.id) return;
      
      const id = deal.id.toString();
      const phone = deal.phone ? normalizePhoneForSearch_(deal.phone) : null;
      const guestData = phone ? phoneToGuests.get(phone) : null;
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      if (phone && guestData) {
        console.log(`üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: AMO ${deal.phone} ‚Üí –ì–æ—Å—Ç—å ${guestData.phone} (${guestData.name})`);
      }
      
      if (mergedDeals.has(id)) {
        // ID —É–∂–µ –µ—Å—Ç—å - –¥–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
        const existingDeal = fullAmoMap.get(id);
        const updatedDeal = createMergedDealRow_(existingDeal, deal, guestData);
        mergedDeals.set(id, updatedDeal);
      } else {
        // –ù–æ–≤—ã–π ID - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        mergedDeals.set(id, createMergedDealRow_(null, deal, guestData));
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏
    const mergedArray = Array.from(mergedDeals.values());
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    mergedArray.sort((a, b) => {
      const dateA = parseRussianDate_(a[9]); // J - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–¥–≤–∏–Ω—É–ª–æ—Å—å)
      const dateB = parseRussianDate_(b[9]);
      return dateB - dateA;
    });
    
    console.log(`üéØ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–æ ${mergedArray.length} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—á–µ—Ç–æ–≤`);
    return mergedArray;
    
  } catch (error) {
    console.error('‚ùå –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è AMO –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    throw error;
  }
}
/**
 * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó "–í–´–ì–†–£–ó–ö–ê –ê–ú–û –ü–û–õ–ù–ê–Ø" (–ü–†–ò–û–†–ò–¢–ï–¢)
 */
function loadAmoFullData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è');
  
  if (!sheet) {
    console.warn('‚ö†Ô∏è –õ–∏—Å—Ç "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return [];
  }
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  const rows = data.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  
  return rows.map(row => ({
    // –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è"
    id: row[0],                    // A ‚Äî –°–¥–µ–ª–∫–∞.ID
    name: row[1],                  // B ‚Äî –°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ  
    responsible: row[2],           // C ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    contact_name: row[3],          // D ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û
    status: row[4],                // E ‚Äî –°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å
    budget: row[5],                // F ‚Äî –°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç
    created_at: row[6],            // G ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    responsible2: row[7],          // H ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–¥—É–±–ª—å)
    tags: row[8],                  // I ‚Äî –°–¥–µ–ª–∫–∞.–¢–µ–≥–∏
    closed_at: row[9],             // J ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    ym_client_id: row[10],         // K ‚Äî YM_CLIENT_ID
    ga_client_id: row[11],         // L ‚Äî GA_CLIENT_ID
    button_text: row[12],          // M ‚Äî BUTTON_TEXT
    date: row[13],                 // N ‚Äî DATE
    time: row[14],                 // O ‚Äî TIME
    deal_source: row[15],          // P ‚Äî R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏
    city_tag: row[16],             // Q ‚Äî R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞
    software: row[17],             // R ‚Äî –ü–û
    
    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    bar_name: row[18],             // S ‚Äî –ë–∞—Ä (deal)
    booking_date: row[19],         // T ‚Äî –î–∞—Ç–∞ –±—Ä–æ–Ω–∏
    guest_count: row[20],          // U ‚Äî –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
    visit_time: row[21],           // V ‚Äî –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
    comment: row[22],              // W ‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë
    source: row[23],               // X ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫
    lead_type: row[24],            // Y ‚Äî –¢–∏–ø –ª–∏–¥–∞
    refusal_reason: row[25],       // Z ‚Äî –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)
    guest_status: row[26],         // AA ‚Äî R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π
    referral_type: row[27],        // AB ‚Äî –°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏
    
    // UTM –¥–∞–Ω–Ω—ã–µ
    utm_medium: row[28],           // AC ‚Äî UTM_MEDIUM
    formname: row[29],             // AD ‚Äî FORMNAME
    referer: row[30],              // AE ‚Äî REFERER
    formid: row[31],               // AF ‚Äî FORMID
    mango_line1: row[32],          // AG ‚Äî –ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    utm_source: row[33],           // AH ‚Äî UTM_SOURCE
    utm_term: row[34],             // AI ‚Äî UTM_TERM
    utm_campaign: row[35],         // AJ ‚Äî UTM_CAMPAIGN
    utm_content: row[36],          // AK ‚Äî UTM_CONTENT
    utm_referrer: row[37],         // AL ‚Äî utm_referrer
    _ym_uid: row[38],              // AM ‚Äî _ym_uid
    
    // –ö–æ–Ω—Ç–∞–∫—Ç—ã  
    phone: row[39],                // AN ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω
    mango_line2: row[40],          // AO ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    notes: row[41]                 // AP ‚Äî –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó "–ê–ú–û –í–´–ì–†–£–ó–ö–ê" (–î–û–ü–û–õ–ù–ï–ù–ò–ï)
 */
function loadAmoRegularData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞');
  
  if (!sheet) {
    console.warn('‚ö†Ô∏è –õ–∏—Å—Ç "–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return [];
  }
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  const rows = data.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  
  return rows.map(row => ({
    // –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ "–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞" (A‚ÜíAO)
    id: row[0],                    // A ‚Äî –°–¥–µ–ª–∫–∞.ID
    name: row[1],                  // B ‚Äî –°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ
    responsible: row[2],           // C ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π  
    status: row[3],                // D ‚Äî –°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å
    budget: row[4],                // E ‚Äî –°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç
    created_at: row[5],            // F ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    tags: row[6],                  // G ‚Äî –°–¥–µ–ª–∫–∞.–¢–µ–≥–∏
    closed_at: row[7],             // H ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    ym_client_id: row[8],          // I ‚Äî YM_CLIENT_ID
    ga_client_id: row[9],          // J ‚Äî GA_CLIENT_ID
    button_text: row[10],          // K ‚Äî BUTTON_TEXT
    date: row[11],                 // L ‚Äî DATE
    time: row[12],                 // M ‚Äî TIME
    deal_source: row[13],          // N ‚Äî R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏
    city_tag: row[14],             // O ‚Äî R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞
    software: row[15],             // P ‚Äî –ü–û
    
    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
    bar_name: row[16],             // Q ‚Äî –ë–∞—Ä (deal)
    booking_date: row[17],         // R ‚Äî –î–∞—Ç–∞ –±—Ä–æ–Ω–∏
    guest_count: row[18],          // S ‚Äî –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
    visit_time: row[19],           // T ‚Äî –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
    comment: row[20],              // U ‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë
    source: row[21],               // V ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫
    lead_type: row[22],            // W ‚Äî –¢–∏–ø –ª–∏–¥–∞
    refusal_reason: row[23],       // X ‚Äî –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)
    guest_status: row[24],         // Y ‚Äî R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π
    referral_type: row[25],        // Z ‚Äî –°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏
    
    // UTM –¥–∞–Ω–Ω—ã–µ
    utm_medium: row[26],           // AA ‚Äî UTM_MEDIUM
    formname: row[27],             // AB ‚Äî FORMNAME
    referer: row[28],              // AC ‚Äî REFERER
    formid: row[29],               // AD ‚Äî FORMID
    mango_line1: row[30],          // AE ‚Äî –ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    utm_source: row[31],           // AF ‚Äî UTM_SOURCE
    utm_term: row[32],             // AG ‚Äî UTM_TERM
    utm_campaign: row[33],         // AH ‚Äî UTM_CAMPAIGN
    utm_content: row[34],          // AI ‚Äî UTM_CONTENT
    utm_referrer: row[35],         // AJ ‚Äî utm_referrer
    _ym_uid: row[36],              // AK ‚Äî _ym_uid
    notes: row[37],                // AL ‚Äî –ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;)
    
    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contact_name: row[38],         // AM ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û
    phone: row[39],                // AN ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω
    mango_line2: row[40]           // AO ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• AMO CRM (–°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø - –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨)
 */
function loadAmoCrmData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è"
  let sheet = ss.getSheetByName('–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è') || 
             ss.getSheetByName('–ê–º–æ –í—ã–≥—Ä—É–∑–∫–∞');
  
  if (!sheet) {
    console.warn('‚ö†Ô∏è –õ–∏—Å—Ç AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return [];
  }
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  const rows = data.slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  
  return rows.map(row => ({
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è")
    id: row[0],                    // A ‚Äî –°–¥–µ–ª–∫–∞.ID
    name: row[1],                  // B ‚Äî –°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ
    responsible: row[2],           // C ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    contact_name: row[3],          // D ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û
    status: row[4],                // E ‚Äî –°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å
    budget: row[5],                // F ‚Äî –°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç
    created_at: row[6],            // G ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    responsible2: row[7],          // H ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–¥—É–±–ª—å)
    tags: row[8],                  // I ‚Äî –°–¥–µ–ª–∫–∞.–¢–µ–≥–∏
    closed_at: row[9],             // J ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    ym_client_id: row[10],         // K ‚Äî YM_CLIENT_ID
    ga_client_id: row[11],         // L ‚Äî GA_CLIENT_ID
    button_text: row[12],          // M ‚Äî BUTTON_TEXT
    date: row[13],                 // N ‚Äî DATE
    time: row[14],                 // O ‚Äî TIME
    deal_source: row[15],          // P ‚Äî R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏
    city_tag: row[16],             // Q ‚Äî R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞
    software: row[17],             // R ‚Äî –ü–û
    
    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    bar_name: row[18],             // S ‚Äî –ë–∞—Ä (deal)
    booking_date: row[19],         // T ‚Äî –î–∞—Ç–∞ –±—Ä–æ–Ω–∏
    guest_count: row[20],          // U ‚Äî –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
    visit_time: row[21],           // V ‚Äî –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
    comment: row[22],              // W ‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë
    source: row[23],               // X ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫
    lead_type: row[24],            // Y ‚Äî –¢–∏–ø –ª–∏–¥–∞
    refusal_reason: row[25],       // Z ‚Äî –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)
    guest_status: row[26],         // AA ‚Äî R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π
    referral_type: row[27],        // AB ‚Äî –°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏
    
    // UTM –¥–∞–Ω–Ω—ã–µ
    utm_medium: row[28],           // AC ‚Äî UTM_MEDIUM
    formname: row[29],             // AD ‚Äî FORMNAME
    referer: row[30],              // AE ‚Äî REFERER
    formid: row[31],               // AF ‚Äî FORMID
    mango_line1: row[32],          // AG ‚Äî –ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    utm_source: row[33],           // AH ‚Äî UTM_SOURCE
    utm_term: row[34],             // AI ‚Äî UTM_TERM
    utm_campaign: row[35],         // AJ ‚Äî UTM_CAMPAIGN
    utm_content: row[36],          // AK ‚Äî UTM_CONTENT
    utm_referrer: row[37],         // AL ‚Äî utm_referrer
    _ym_uid: row[38],              // AM ‚Äî _ym_uid
    
    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    phone: row[39],                // AN ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω
    mango_line2: row[40],          // AO ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    notes: row[41]                 // AP ‚Äî –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–ï–†–í–û–í
 */
function loadReservesData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Reserves RP');
  
  if (!sheet) return [];
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  return data.slice(1).map(row => ({
    id: row[0],              // A ‚Äî ID
    request_num: row[1],     // B ‚Äî ‚Ññ –∑–∞—è–≤–∫–∏
    name: row[2],            // C ‚Äî –ò–º—è
    phone: row[3],           // D ‚Äî –¢–µ–ª–µ—Ñ–æ–Ω
    email: row[4],           // E ‚Äî Email
    datetime: row[5],        // F ‚Äî –î–∞—Ç–∞/–≤—Ä–µ–º—è
    status: row[6],          // G ‚Äî –°—Ç–∞—Ç—É—Å
    comment: row[7],         // H ‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    amount: row[8],          // I ‚Äî –°—á—ë—Ç, ‚ÇΩ
    guests: row[9],          // J ‚Äî –ì–æ—Å—Ç–µ–π
    source: row[10]          // K ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ì–û–°–¢–ï–ô
 */
function loadGuestsData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('Guests RP');
  
  if (!sheet) return [];
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  return data.slice(1).map(row => ({
    name: row[0],            // A ‚Äî –ò–º—è
    phone: row[1],           // B ‚Äî –¢–µ–ª–µ—Ñ–æ–Ω
    email: row[2],           // C ‚Äî Email
    visits: row[3],          // D ‚Äî –ö–æ–ª-–≤–æ –≤–∏–∑–∏—Ç–æ–≤
    total_amount: row[4],    // E ‚Äî –û–±—â–∞—è —Å—É–º–º–∞
    first_visit: row[5],     // F ‚Äî –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
    last_visit: row[6],      // G ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç
    bill_1: row[7],          // H ‚Äî –°—á—ë—Ç 1-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_2: row[8],          // I ‚Äî –°—á—ë—Ç 2-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_3: row[9],          // J ‚Äî –°—á—ë—Ç 3-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_4: row[10],         // K ‚Äî –°—á—ë—Ç 4-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_5: row[11],         // L ‚Äî –°—á—ë—Ç 5-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_6: row[12],         // M ‚Äî –°—á—ë—Ç 6-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_7: row[13],         // N ‚Äî –°—á—ë—Ç 7-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_8: row[14],         // O ‚Äî –°—á—ë—Ç 8-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_9: row[15],         // P ‚Äî –°—á—ë—Ç 9-–≥–æ –≤–∏–∑–∏—Ç–∞
    bill_10: row[16]         // Q ‚Äî –°—á—ë—Ç 10-–≥–æ –≤–∏–∑–∏—Ç–∞
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ó–ê–Ø–í–û–ö –° –°–ê–ô–¢–ê
 */
function loadSiteFormsData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞');
  
  if (!sheet) return [];
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  return data.slice(1).map(row => ({
    name: row[0],                 // A ‚Äî Name
    phone: row[1],                // B ‚Äî Phone
    referer: row[2],              // C ‚Äî referer
    formid: row[3],               // D ‚Äî formid
    email: row[6],                // G ‚Äî Email
    date: row[7],                 // H ‚Äî Date
    formname: row[10],            // K ‚Äî Form name
    time: row[11],                // L ‚Äî Time
    utm_term: row[12],            // M ‚Äî utm_term
    utm_campaign: row[13],        // N ‚Äî utm_campaign
    utm_source: row[14],          // O ‚Äî utm_source
    utm_content: row[15],         // P ‚Äî utm_content
    utm_medium: row[16],          // Q ‚Äî utm_medium
    button_text: row[20],         // U ‚Äî button_text
    referrer: row[21],            // V ‚Äî referrer
    landing_page: row[22],        // W ‚Äî landing_page
    device_type: row[25],         // Z ‚Äî device_type
    user_city: row[32],           // AG ‚Äî user_city
    visits_count: row[40]         // AO ‚Äî visits_count
  }));
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –ö–û–õ–õ–¢–†–ï–ö–ò–ù–ì–ê
 */
function loadCalltrackingData_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('–ö–æ–ª–ª–¢—Ä–µ–∫–∏–Ω–≥');
  
  if (!sheet) return [];
  
  const data = sheet.getDataRange().getValues();
  if (data.length < 2) return [];
  
  return data.slice(1).map(row => ({
    mango_line: row[0],           // A ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    tel_source: row[1],           // B ‚Äî R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏
    channel_name: row[2],         // C ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞–Ω–∞–ª–∞
    phone: row[0]                 // –ò—Å–ø–æ–ª—å–∑—É–µ–º mango_line –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
  }));
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –°–¢–†–û–ö–ò –î–ê–ù–ù–´–•
 */
function createMergedDealRow_(fullDeal, regularDeal, guestData = null) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É fullDeal, –Ω–æ –µ—Å–ª–∏ –ø—É—Å—Ç–æ - –±–µ—Ä–µ–º –∏–∑ regularDeal
  const mergeValue = (fullValue, regularValue) => {
    if (isEmptyValue_(fullValue)) {
      return regularValue || '';
    }
    return fullValue || '';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç "–í–°–ï –ë–ê–†–´ –°–ï–¢–ò /"
  const cleanName = (name) => {
    if (!name) return '';
    return String(name).replace(/^–í–°–ï –ë–ê–†–´ –°–ï–¢–ò\s*\/\s*/, '');
  };
  
  const fullD = fullDeal || {};
  const regD = regularDeal || {};
  
  return [
    // –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    mergeValue(fullD.id, regD.id),                                           // A ‚Äî –°–¥–µ–ª–∫–∞.ID
    mergeValue(fullD.name, regD.name),                                       // B ‚Äî –°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ
    normalizeStatusForValidation_(cleanName(mergeValue(fullD.status, regD.status))), // C ‚Äî –°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
    mergeValue(fullD.refusal_reason, regD.refusal_reason),                   // D ‚Äî –°–¥–µ–ª–∫–∞.–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)
    mergeValue(fullD.lead_type, regD.lead_type),                             // E ‚Äî –°–¥–µ–ª–∫–∞.–¢–∏–ø –ª–∏–¥–∞
    mergeValue(fullD.guest_status, regD.guest_status),                       // F ‚Äî –°–¥–µ–ª–∫–∞.R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π
    mergeValue(fullD.responsible, regD.responsible),                         // G ‚Äî –°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    mergeValue(fullD.tags, regD.tags),                                       // H ‚Äî –°–¥–µ–ª–∫–∞.–¢–µ–≥–∏
    mergeValue(fullD.budget, regD.budget),                                   // I ‚Äî –°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç
    formatDateClean_(mergeValue(fullD.created_at, regD.created_at)),         // J ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    formatDateClean_(mergeValue(fullD.closed_at, regD.closed_at)),           // K ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    mergeValue(fullD.mango_line2, regD.mango_line2),                         // L ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    mergeValue(fullD.mango_line1, regD.mango_line1),                         // M ‚Äî –°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE
    mergeValue(fullD.contact_name, regD.contact_name),                       // N ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û
    normalizePhoneClean_(mergeValue(fullD.phone, regD.phone)),               // O ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω
    calculateFactAmount_(fullDeal, regularDeal, guestData),                  // P ‚Äî –°—á–µ—Ç —Ñ–∞–∫—Ç (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
    mergeValue(fullD.date, regD.date),                                       // Q ‚Äî –°–¥–µ–ª–∫–∞.DATE (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.time, regD.time),                                       // R ‚Äî –°–¥–µ–ª–∫–∞.TIME (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.city_tag, regD.city_tag),                               // S ‚Äî –°–¥–µ–ª–∫–∞.R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    formatDateClean_(mergeValue(fullD.booking_date, regD.booking_date)),     // T ‚Äî –°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.software, regD.software),                               // U ‚Äî –°–¥–µ–ª–∫–∞.–ü–û (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.referral_type, regD.referral_type),                     // V ‚Äî –°–¥–µ–ª–∫–∞.–°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.bar_name, regD.bar_name),                               // W ‚Äî –°–¥–µ–ª–∫–∞.–ë–∞—Ä (deal) (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.deal_source, regD.deal_source),                         // X ‚Äî –°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.button_text, regD.button_text),                         // Y ‚Äî –°–¥–µ–ª–∫–∞.BUTTON_TEXT (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.ym_client_id, regD.ym_client_id),                       // Z ‚Äî –°–¥–µ–ª–∫–∞.YM_CLIENT_ID (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.ga_client_id, regD.ga_client_id),                       // AA ‚Äî –°–¥–µ–ª–∫–∞.GA_CLIENT_ID (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_source, regD.utm_source),                           // AB ‚Äî –°–¥–µ–ª–∫–∞.UTM_SOURCE (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_medium, regD.utm_medium),                           // AC ‚Äî –°–¥–µ–ª–∫–∞.UTM_MEDIUM (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_term, regD.utm_term),                               // AD ‚Äî –°–¥–µ–ª–∫–∞.UTM_TERM (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_campaign, regD.utm_campaign),                       // AE ‚Äî –°–¥–µ–ª–∫–∞.UTM_CAMPAIGN (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_content, regD.utm_content),                         // AF ‚Äî –°–¥–µ–ª–∫–∞.UTM_CONTENT (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.utm_referrer, regD.utm_referrer),                       // AG ‚Äî –°–¥–µ–ª–∫–∞.utm_referrer (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.visit_time, regD.visit_time),                           // AH ‚Äî –°–¥–µ–ª–∫–∞.–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.comment, regD.comment),                                 // AI ‚Äî –°–¥–µ–ª–∫–∞.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.source, regD.source),                                   // AJ ‚Äî –°–¥–µ–ª–∫–∞.–ò—Å—Ç–æ—á–Ω–∏–∫ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.formname, regD.formname),                               // AK ‚Äî –°–¥–µ–ª–∫–∞.FORMNAME (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.referer, regD.referer),                                 // AL ‚Äî –°–¥–µ–ª–∫–∞.REFERER (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.formid, regD.formid),                                   // AM ‚Äî –°–¥–µ–ª–∫–∞.FORMID (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD._ym_uid, regD._ym_uid),                                 // AN ‚Äî –°–¥–µ–ª–∫–∞._ym_uid (—Å–¥–≤–∏–Ω—É—Ç–æ)
    mergeValue(fullD.notes, regD.notes)                                      // AO ‚Äî –°–¥–µ–ª–∫–∞.–ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;) (—Å–¥–≤–∏–Ω—É—Ç–æ)
  ];
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´
 */
function createMergedAmoHeaders_(sheet) {
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
  const headers = [
    '–°–¥–µ–ª–∫–∞.ID',                          // A
    '–°–¥–µ–ª–∫–∞.–ù–∞–∑–≤–∞–Ω–∏–µ',                    // B  
    '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å',                      // C
    '–°–¥–µ–ª–∫–∞.–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)',         // D
    '–°–¥–µ–ª–∫–∞.–¢–∏–ø –ª–∏–¥–∞',                    // E
    '–°–¥–µ–ª–∫–∞.R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π',            // F
    '–°–¥–µ–ª–∫–∞.–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',               // G
    '–°–¥–µ–ª–∫–∞.–¢–µ–≥–∏',                        // H
    '–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç',                      // I
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',               // J
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è',               // K
    '–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE',   // L
    '–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE',    // M
    '–ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û',                        // N
    '–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω',                    // O
    '–°—á–µ—Ç —Ñ–∞–∫—Ç',                          // P - –ù–û–í–ê–Ø –ö–û–õ–û–ù–ö–ê
    '–°–¥–µ–ª–∫–∞.DATE',                        // Q (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.TIME',                        // R (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞',                // S (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–î–∞—Ç–∞ –±—Ä–æ–Ω–∏',                  // T (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–ü–û',                          // U (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏',               // V (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–ë–∞—Ä (deal)',                  // W (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏',           // X (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.BUTTON_TEXT',                 // Y (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.YM_CLIENT_ID',                // Z (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.GA_CLIENT_ID',                // AA (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.UTM_SOURCE',                  // AB (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.UTM_MEDIUM',                  // AC (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.UTM_TERM',                    // AD (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.UTM_CAMPAIGN',                // AE (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.UTM_CONTENT',                 // AF (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.utm_referrer',                // AG (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞',               // AH (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë',             // AI (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–ò—Å—Ç–æ—á–Ω–∏–∫',                    // AJ (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.FORMNAME',                    // AK (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.REFERER',                     // AL (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.FORMID',                      // AM (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞._ym_uid',                     // AN (—Å–¥–≤–∏–Ω—É—Ç–æ)
    '–°–¥–µ–ª–∫–∞.–ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;)'          // AO (—Å–¥–≤–∏–Ω—É—Ç–æ)
  ];
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setValues([headers]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  headerRange.setFontWeight('bold')
             .setBackground('#e6e6e6')
             .setHorizontalAlignment('center')
             .setWrap(true);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
  if (sheet.getLastRow() > 1) {
    const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, headers.length);
    dataRange.setWrap(false); // –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  }
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
  applyMergedSectionColoring_(sheet, headers.length);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º
  applyConditionalFormatting_(sheet);
}

/**
 * –¶–í–ï–¢–û–í–û–ï –ö–û–î–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´
 */
function applyMergedSectionColoring_(sheet, totalCols) {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ (A-K, –∫–æ–ª–æ–Ω–∫–∏ 1-11) - —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
  sheet.getRange(1, 1, 1, 11).setBackground('#cfe2f3');
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—á–µ—Ç–∞ (L-P, –∫–æ–ª–æ–Ω–∫–∏ 12-16) - —Å–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π  
  sheet.getRange(1, 12, 1, 5).setBackground('#fff2cc');
  
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ UTM (Q-AO, –∫–æ–ª–æ–Ω–∫–∏ 17-41) - —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
  sheet.getRange(1, 17, 1, 25).setBackground('#d9ead3');
}

/**
 * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –£–°–õ–û–í–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ö –ó–ù–ê–ß–ï–ù–ò–Ø–ú
 */
function applyConditionalFormatting_(sheet) {
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) return;
  
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å" (–∫–æ–ª–æ–Ω–∫–∞ C)
    applyStatusFormatting_(sheet, 3, lastRow); // C = 3
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "–°–¥–µ–ª–∫–∞.–¢–∏–ø –ª–∏–¥–∞" (–∫–æ–ª–æ–Ω–∫–∞ E) 
    applyLeadTypeFormatting_(sheet, 5, lastRow); // E = 5
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "–°–¥–µ–ª–∫–∞.R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π" (–∫–æ–ª–æ–Ω–∫–∞ F)
    applyGuestStatusFormatting_(sheet, 6, lastRow); // F = 6
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "–°–¥–µ–ª–∫–∞.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE" (–∫–æ–ª–æ–Ω–∫–∞ M)
    applyMangoLineFormatting_(sheet, 13, lastRow); // M = 13
    
    console.log('‚úÖ –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

/**
 * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–û–í –°–î–ï–õ–ö–ò
 */
function applyStatusFormatting_(sheet, column, lastRow) {
  const statusColors = {
    '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': '#EDEDED',
    '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É': '#E5D5F7', 
    '–≤–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É': '#CDE6F9',
    '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '#FAD2D3',
    '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã': '#FFF2C2',
    '–ù–î–ó': '#4E3B2F',
    '–û–ø–ª–∞—á–µ–Ω–æ': '#D6F3C6',
    '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π': '#004A99',
    '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å': '#EDEDED',
    '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü': '#D6F3C6',
    '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û': '#D6F3C6'
  };
  
  const range = sheet.getRange(2, column, lastRow - 1, 1);
  const values = range.getValues();
  
  for (let i = 0; i < values.length; i++) {
    const value = String(values[i][0]).trim();
    if (statusColors[value]) {
      const cellRange = sheet.getRange(i + 2, column);
      cellRange.setBackground(statusColors[value]);
      
      // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—ë–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
      if (statusColors[value] === '#4E3B2F' || statusColors[value] === '#004A99') {
        cellRange.setFontColor('#FFFFFF');
      }
    }
  }
}

/**
 * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–û–í –õ–ò–î–û–í
 */
function applyLeadTypeFormatting_(sheet, column, lastRow) {
  const leadTypeColors = {
    '–¶–µ–ª–µ–≤–æ–π': '#C6E0B4',
    '–ù–µ—Ü–µ–ª–µ–≤–æ–π': '#F4CCCC'
  };
  
  const range = sheet.getRange(2, column, lastRow - 1, 1);
  const values = range.getValues();
  
  for (let i = 0; i < values.length; i++) {
    const value = String(values[i][0]).trim();
    if (leadTypeColors[value]) {
      sheet.getRange(i + 2, column).setBackground(leadTypeColors[value]);
    }
  }
}

/**
 * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–û–í –ì–û–°–¢–ï–ô
 */
function applyGuestStatusFormatting_(sheet, column, lastRow) {
  const guestStatusColors = {
    '–ù–æ–≤—ã–π': '#E2F0D9',
    '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π': '#006847'
  };
  
  const range = sheet.getRange(2, column, lastRow - 1, 1);
  const values = range.getValues();
  
  for (let i = 0; i < values.length; i++) {
    const value = String(values[i][0]).trim();
    if (guestStatusColors[value]) {
      const cellRange = sheet.getRange(i + 2, column);
      cellRange.setBackground(guestStatusColors[value]);
      
      // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—ë–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞
      if (guestStatusColors[value] === '#006847') {
        cellRange.setFontColor('#FFFFFF');
      }
    }
  }
}

/**
 * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–ú–ï–†–û–í –õ–ò–ù–ò–ô MANGO
 */
function applyMangoLineFormatting_(sheet, column, lastRow) {
  const mangoLineColors = {
    '78122428017': '#F4CCCC',
    '78122709071': '#990000',
    '78123172353': '#FFE599', 
    '78123177149': '#C6E0B4',
    '78123177310': '#9DC3E6'
  };
  
  const range = sheet.getRange(2, column, lastRow - 1, 1);
  const values = range.getValues();
  
  for (let i = 0; i < values.length; i++) {
    const value = String(values[i][0]).trim();
    if (mangoLineColors[value]) {
      const cellRange = sheet.getRange(i + 2, column);
      cellRange.setBackground(mangoLineColors[value]);
      
      // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—ë–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞
      if (mangoLineColors[value] === '#990000') {
        cellRange.setFontColor('#FFFFFF');
      }
    }
  }
}

/**
 * –ó–ê–ü–ò–°–¨ –õ–û–ì–ê –û–ë–†–ê–ë–û–¢–ö–ò
 */
function writeProcessingLog_(operationType, recordsCount) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let logSheet = ss.getSheetByName('LOG');
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç LOG –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!logSheet) {
      logSheet = ss.insertSheet('LOG');
      logSheet.getRange(1, 1, 1, 4).setValues([['–î–∞—Ç–∞/–í—Ä–µ–º—è', '–û–ø–µ—Ä–∞—Ü–∏—è', '–ó–∞–ø–∏—Å–µ–π', '–°—Ç–∞—Ç—É—Å']]);
      logSheet.getRange(1, 1, 1, 4).setFontWeight('bold').setBackground('#e6e6e6');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    const timestamp = new Date().toLocaleString('ru-RU');
    logSheet.appendRow([timestamp, operationType, recordsCount, 'SUCCESS']);
    
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', error);
  }
}

/**
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø
 */

function isEmptyValue_(value) {
  if (value === null || value === undefined || value === '') return true;
  
  const str = String(value).trim().toLowerCase();
  
  // –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞–µ–º –ø—É—Å—Ç—ã–º–∏
  const emptyValues = ['none', '–Ω–µ –∑–∞–∫—Ä—ã—Ç–∞', '‚Äî', '-', 'null', 'undefined'];
  
  return emptyValues.includes(str);
}

function parseRussianDate_(dateStr) {
  if (!dateStr) return new Date(0);
  
  try {
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°
    const match = String(dateStr).match(/^(\d{2})\.(\d{2})\.(\d{4})/);
    if (match) {
      const [, day, month, year] = match;
      return new Date(year, month - 1, day);
    }
    
    return new Date(dateStr);
  } catch (error) {
    return new Date(0);
  }
}

function normalizePhoneClean_(phone) {
  if (!phone) return '';
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã  
  let clean = phone.toString().replace(/\D/g, '');
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (clean.startsWith('8') && clean.length === 11) {
    clean = '7' + clean.substring(1);
  }
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –¥–ª–∏–Ω–∞ 11 - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ +)
  if (clean.startsWith('7') && clean.length === 11) {
    return clean;
  }
  
  // –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ (–±–µ–∑ +)
  if (clean.length === 10) {
    return '7' + clean;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (–±–µ–∑ +)
  return clean.length >= 10 ? clean : phone;
}

/**
 * –†–ê–°–ß–ï–¢ –°–ß–ï–¢–ê –§–ê–ö–¢ –ü–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ï
 */
function calculateFactAmount_(fullDeal, regularDeal, guestData) {
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
  const fullD = fullDeal || {};
  const regD = regularDeal || {};
  const status = (fullD.status || regD.status || '').toString().replace(/^–í–°–ï –ë–ê–†–´ –°–ï–¢–ò\s*\/\s*/, '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–≥–æ—Å—Ç—å –±—ã–ª –≤ –±–∞—Ä–µ)
  const successStatuses = ['–û–ø–ª–∞—á–µ–Ω–æ', '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û', '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü'];
  const isSuccessful = successStatuses.includes(status);
  
  // –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const dealId = fullD.id || regD.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  if (!isSuccessful) {
    console.log(`üíº –°–¥–µ–ª–∫–∞ ${dealId}: —Å—Ç–∞—Ç—É—Å "${status}" - –Ω–µ —É—Å–ø–µ—à–Ω—ã–π, —Å—á–µ—Ç = 0`);
    return 0; // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å–ø–µ—à–Ω—ã–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
  }
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π - –∏—â–µ–º —Å—É–º–º—É —É –≥–æ—Å—Ç—è
  if (guestData) {
    const guestTotal = calculateGuestTotalBills_(guestData);
    if (guestTotal > 0) {
      console.log(`üí∞ –°–¥–µ–ª–∫–∞ ${dealId}: —Å—Ç–∞—Ç—É—Å "${status}" - –Ω–∞–π–¥–µ–Ω –≥–æ—Å—Ç—å ${guestData.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}, —Å—á–µ—Ç –≥–æ—Å—Ç—è = ${guestTotal}`);
      return guestTotal; // –ï—Å–ª–∏ —É –≥–æ—Å—Ç—è –µ—Å—Ç—å —Å—á–µ—Ç–∞ - –±–µ—Ä–µ–º –∏—Ö —Å—É–º–º—É
    }
  }
  
  // –ï—Å–ª–∏ —É –≥–æ—Å—Ç—è –Ω–µ—Ç —Å—á–µ—Ç–æ–≤ (0 –∏–ª–∏ –ø—É—Å—Ç–æ) - –±–µ—Ä–µ–º –±—é–¥–∂–µ—Ç —Å–¥–µ–ª–∫–∏
  const budget = fullD.budget || regD.budget || 0;
  const finalAmount = isNaN(parseFloat(budget)) ? 0 : parseFloat(budget);
  
  console.log(`üìä –°–¥–µ–ª–∫–∞ ${dealId}: —Å—Ç–∞—Ç—É—Å "${status}" - ${guestData ? '—É –≥–æ—Å—Ç—è –Ω–µ—Ç —Å—á–µ—Ç–æ–≤' : '–≥–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, –±–µ—Ä–µ–º –±—é–¥–∂–µ—Ç = ${finalAmount}`);
  
  return finalAmount;
}

/**
 * –†–ê–°–ß–ï–¢ –°–£–ú–ú–´ –í–°–ï–• –°–ß–ï–¢–û–í –ì–û–°–¢–Ø (—Å –æ—Ç–ª–∞–¥–∫–æ–π)
 */
function calculateGuestTotalBills_(guestData) {
  if (!guestData) return 0;
  
  const bills = [
    guestData.bill_1,
    guestData.bill_2,
    guestData.bill_3,
    guestData.bill_4,
    guestData.bill_5,
    guestData.bill_6,
    guestData.bill_7,
    guestData.bill_8,
    guestData.bill_9,
    guestData.bill_10
  ];
  
  let total = 0;
  let validBills = [];
  
  bills.forEach((bill, index) => {
    if (bill !== null && bill !== undefined && bill !== '') {
      const numValue = parseFloat(bill);
      if (!isNaN(numValue)) {
        total += numValue;
        validBills.push(`—Å—á—ë—Ç_${index + 1}: ${numValue}`);
      }
    }
  });
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
  if (validBills.length > 0) {
    console.log(`üìä –ì–æ—Å—Ç—å ${guestData.name || '–±–µ–∑ –∏–º–µ–Ω–∏'} (${guestData.phone}): ${validBills.join(', ')} = ${total}`);
  }
  
  return total;
}

/**
 * –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê –ë–ï–ó –ü–õ–Æ–°–ê (–î–õ–Ø –ü–û–ò–°–ö–ê)
 */
function normalizePhoneForSearch_(phone) {
  if (!phone) return '';
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã  
  let clean = phone.toString().replace(/\D/g, '');
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (clean.startsWith('8') && clean.length === 11) {
    clean = '7' + clean.substring(1);
  }
  
  // –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
  if (clean.length === 10) {
    clean = '7' + clean;
  }
  
  return clean.length >= 10 ? clean : '';
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–´ –¢–ï–õ–ï–§–û–ù–û–í
 */
function createPhoneMap_(dataArray) {
  const phoneMap = new Map();
  
  dataArray.forEach(item => {
    if (item.phone) {
      const normalizedPhone = normalizePhone_(item.phone);
      if (normalizedPhone) {
        phoneMap.set(normalizedPhone, item);
      }
      
      // –î–ª—è –≥–æ—Å—Ç–µ–π —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –ø–ª—é—Å–∞
      const phoneForSearch = normalizePhoneForSearch_(item.phone);
      if (phoneForSearch && phoneForSearch !== normalizedPhone) {
        phoneMap.set(phoneForSearch, item);
      }
    }
  });
  
  return phoneMap;
}

/**
 * –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê
 */
function normalizePhone_(phone) {
  if (!phone) return null;
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
  let clean = phone.toString().replace(/\D/g, '');
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (clean.startsWith('8') && clean.length === 11) {
    clean = '7' + clean.substring(1);
  }
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –¥–ª–∏–Ω–∞ 11 - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (clean.startsWith('7') && clean.length === 11) {
    return clean;
  }
  
  // –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
  if (clean.length === 10) {
    return '7' + clean;
  }
  
  return clean.length >= 10 ? clean : null;
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –û–ë–û–ì–ê–©–ï–ù–ù–û–ô –°–¢–†–û–ö–ò –î–ê–ù–ù–´–• (–ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø)
 */
function createEnrichedDataRowClean_(deal, siteData, reserveData, guestData, callData) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç "–í–°–ï –ë–ê–†–´ –°–ï–¢–ò /"
  const cleanName = (name) => {
    if (!name) return '';
    return String(name).replace(/^–í–°–ï –ë–ê–†–´ –°–ï–¢–ò\s*\/\s*/, '');
  };
  
  return [
    // –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó AMO (A-AP –∫–∞–∫ –≤ "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è")
    deal.id || '',                              // A
    cleanName(deal.name) || '',                 // B - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
    deal.responsible || '',                     // C
    deal.contact_name || '',                    // D
    deal.status || '',                          // E
    deal.budget || 0,                           // F
    formatDateClean_(deal.created_at) || '',         // G
    deal.responsible2 || deal.responsible || '', // H
    deal.tags || '',                            // I
    formatDateClean_(deal.closed_at) || '',          // J
    deal.ym_client_id || siteData.ym_client_id || '', // K
    deal.ga_client_id || siteData.ga_client_id || '', // L
    deal.button_text || siteData.button_text || '',   // M
    deal.date || siteData.date || '',                 // N
    deal.time || siteData.time || '',                 // O
    deal.deal_source || '',                           // P
    deal.city_tag || siteData.user_city || '',        // Q
    deal.software || '',                              // R
    deal.bar_name || '',                              // S
    formatDateClean_(deal.booking_date) || '',             // T
    deal.guest_count || reserveData.guests || '',     // U
    deal.visit_time || '',                            // V
    deal.comment || reserveData.comment || '',        // W
    deal.source || siteData.utm_source || '',         // X
    deal.lead_type || '',                             // Y
    deal.refusal_reason || '',                        // Z
    deal.guest_status || reserveData.status || '',    // AA
    deal.referral_type || '',                         // AB
    siteData.utm_medium || deal.utm_medium || '',     // AC
    siteData.formname || deal.formname || '',         // AD
    siteData.referer || deal.referer || '',           // AE
    siteData.formid || deal.formid || '',             // AF
    deal.mango_line1 || '',                           // AG
    siteData.utm_source || deal.utm_source || '',     // AH
    siteData.utm_term || deal.utm_term || '',         // AI
    siteData.utm_campaign || deal.utm_campaign || '', // AJ
    siteData.utm_content || deal.utm_content || '',   // AK
    siteData.referrer || deal.utm_referrer || '',     // AL
    deal._ym_uid || '',                               // AM
    deal.phone || '',                                 // AN
    deal.mango_line2 || callData.mango_line || '',    // AO
    deal.notes || '',                                 // AP
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –û–ë–û–ì–ê–©–ï–ù–ò–Ø
    callData.tel_source || '',                        // AQ ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥–∞
    callData.channel_name || '',                      // AR ‚Äî –ö–∞–Ω–∞–ª –∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥–∞
    reserveData.amount || 0,                          // AS ‚Äî –°—É–º–º–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–æ–≤
    formatDateClean_(reserveData.datetime) || '',          // AT ‚Äî –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞
    guestData.visits || 0,                            // AU ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤
    guestData.total_amount || 0,                      // AV ‚Äî –û–±—â–∞—è —Å—É–º–º–∞ –≥–æ—Å—Ç—è
    formatDateClean_(guestData.first_visit) || '',         // AW ‚Äî –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
    formatDateClean_(guestData.last_visit) || '',          // AX ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç
    siteData.device_type || '',                       // AY ‚Äî –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    siteData.landing_page || '',                      // AZ ‚Äî –ü–æ—Å–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø
    calculateDealAgeClean_(deal.created_at),               // BA ‚Äî –í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)
    calculateDaysToBookingClean_(deal.created_at, deal.booking_date), // BB ‚Äî –î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏
    siteData.visits_count || 0                        // BC ‚Äî –í–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç
  ];
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –û–ë–û–ì–ê–©–ï–ù–ù–û–ô –°–¢–†–û–ö–ò –î–ê–ù–ù–´–•
 */
function createEnrichedDataRow_(deal, siteData, reserveData, guestData, callData) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç "–í–°–ï –ë–ê–†–´ –°–ï–¢–ò /"
  const cleanName = (name) => {
    if (!name) return '';
    return String(name).replace(/^–í–°–ï –ë–ê–†–´ –°–ï–¢–ò\s*\/\s*/, '');
  };
  
  return [
    // –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó AMO (A-AP –∫–∞–∫ –≤ "–í—ã–≥—Ä—É–∑–∫–∞ –ê–º–æ –ü–æ–ª–Ω–∞—è")
    deal.id || '',                              // A
    cleanName(deal.name) || '',                 // B - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
    deal.responsible || '',                     // C
    deal.contact_name || '',                    // D
    deal.status || '',                          // E
    deal.budget || 0,                           // F
    formatDateClean_(deal.created_at) || '',         // G
    deal.responsible2 || deal.responsible || '', // H
    deal.tags || '',                            // I
    formatDateClean_(deal.closed_at) || '',          // J
    deal.ym_client_id || siteData.ym_client_id || '', // K
    deal.ga_client_id || siteData.ga_client_id || '', // L
    deal.button_text || siteData.button_text || '',   // M
    deal.date || siteData.date || '',                 // N
    deal.time || siteData.time || '',                 // O
    deal.deal_source || '',                           // P
    deal.city_tag || siteData.user_city || '',        // Q
    deal.software || '',                              // R
    deal.bar_name || '',                              // S
    formatDateClean_(deal.booking_date) || '',             // T
    deal.guest_count || reserveData.guests || '',     // U
    deal.visit_time || '',                            // V
    deal.comment || reserveData.comment || '',        // W
    deal.source || siteData.utm_source || '',         // X
    deal.lead_type || '',                             // Y
    deal.refusal_reason || '',                        // Z
    deal.guest_status || reserveData.status || '',    // AA
    deal.referral_type || '',                         // AB
    siteData.utm_medium || deal.utm_medium || '',     // AC
    siteData.formname || deal.formname || '',         // AD
    siteData.referer || deal.referer || '',           // AE
    siteData.formid || deal.formid || '',             // AF
    deal.mango_line1 || '',                           // AG
    siteData.utm_source || deal.utm_source || '',     // AH
    siteData.utm_term || deal.utm_term || '',         // AI
    siteData.utm_campaign || deal.utm_campaign || '', // AJ
    siteData.utm_content || deal.utm_content || '',   // AK
    siteData.referrer || deal.utm_referrer || '',     // AL
    deal._ym_uid || '',                               // AM
    deal.phone || '',                                 // AN
    deal.mango_line2 || callData.mango_line || '',    // AO
    deal.notes || '',                                 // AP
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –û–ë–û–ì–ê–©–ï–ù–ò–Ø
    callData.tel_source || '',                        // AQ ‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥–∞
    callData.channel_name || '',                      // AR ‚Äî –ö–∞–Ω–∞–ª –∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥–∞
    reserveData.amount || 0,                          // AS ‚Äî –°—É–º–º–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–æ–≤
    formatDateClean_(reserveData.datetime) || '',          // AT ‚Äî –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞
    guestData.visits || 0,                            // AU ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤
    guestData.total_amount || 0,                      // AV ‚Äî –û–±—â–∞—è —Å—É–º–º–∞ –≥–æ—Å—Ç—è
    formatDateClean_(guestData.first_visit) || '',         // AW ‚Äî –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
    formatDateClean_(guestData.last_visit) || '',          // AX ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç
    siteData.device_type || '',                       // AY ‚Äî –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    siteData.landing_page || '',                      // AZ ‚Äî –ü–æ—Å–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø
    calculateDealAgeClean_(deal.created_at),               // BA ‚Äî –í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)
    calculateDaysToBookingClean_(deal.created_at, deal.booking_date), // BB ‚Äî –î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏
    siteData.visits_count || 0                        // BC ‚Äî –í–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç
  ];
}

/**
 * –°–û–ó–î–ê–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í –¢–ê–ë–õ–ò–¶–´
 */
function createWorkingAmoHeaders_(sheet) {
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const headers = [
    // –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï AMO (A-AP)
    'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ö–æ–Ω—Ç–∞–∫—Ç.–§–ò–û', '–°—Ç–∞—Ç—É—Å', '–ë—é–¥–∂–µ—Ç', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π2', '–¢–µ–≥–∏', '–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è',
    'YM_CLIENT_ID', 'GA_CLIENT_ID', 'BUTTON_TEXT', 'DATE', 'TIME', 'R.–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏', 'R.–¢–µ–≥ –≥–æ—Ä–æ–¥–∞', '–ü–û',
    '–ë–∞—Ä (deal)', '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏', '–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π', '–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–¢–∏–ø –ª–∏–¥–∞', '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–û–ë)', 'R.–°—Ç–∞—Ç—É—Å—ã –≥–æ—Å—Ç–µ–π', '–°–∞—Ä–∞—Ñ–∞–Ω –≥–æ—Å—Ç–∏',
    'UTM_MEDIUM', 'FORMNAME', 'REFERER', 'FORMID', '–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE', 'UTM_SOURCE', 'UTM_TERM', 'UTM_CAMPAIGN', 'UTM_CONTENT', 'utm_referrer', '_ym_uid',
    '–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω', '–ö–æ–Ω—Ç–∞–∫—Ç.–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏ MANGO OFFICE', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è(—á–µ—Ä–µ–∑ ;)',
    
    // –û–ë–û–ì–ê–©–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò
    'R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ (–∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥)', '–ö–∞–Ω–∞–ª (–∫–æ–ª–ª—Ç—Ä–µ–∫–∏–Ω–≥)', '–°—É–º–º–∞ ‚ÇΩ (—Ä–µ–∑–µ—Ä–≤)', '–î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞', '–í–∏–∑–∏—Ç–æ–≤ (–≥–æ—Å—Ç—å)', '–°—É–º–º–∞ ‚ÇΩ (–≥–æ—Å—Ç—å)', '–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç (–≥–æ—Å—Ç—å)', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç (–≥–æ—Å—Ç—å)',
    '–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å–∞–π—Ç)', '–ü–æ—Å–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å–∞–π—Ç)',
    
    // –ê–í–¢–û–ü–û–õ–Ø
    '–í–æ–∑—Ä–∞—Å—Ç —Å–¥–µ–ª–∫–∏ (–¥–Ω.)', '–î–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏', '–í–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç'
  ];
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setValues([headers]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  headerRange.setFontWeight('bold')
             .setBackground('#e6e6e6')
             .setHorizontalAlignment('center')
             .setWrap(true);
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
  applySectionColoring_(sheet, headers.length);
}

/**
 * –¶–í–ï–¢–û–í–û–ï –ö–û–î–ò–†–û–í–ê–ù–ò–ï –°–ï–ö–¶–ò–ô
 */
function applySectionColoring_(sheet, totalCols) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ AMO (A-AP, –∫–æ–ª–æ–Ω–∫–∏ 1-42) - —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
  sheet.getRange(1, 1, 1, 42).setBackground('#cfe2f3');
  
  // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (AQ-AZ, –∫–æ–ª–æ–Ω–∫–∏ 43-51) - —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π  
  sheet.getRange(1, 43, 1, 8).setBackground('#d9ead3');
  
  // –ê–≤—Ç–æ–ø–æ–ª—è (BA-BC, –∫–æ–ª–æ–Ω–∫–∏ 52-54) - —Å–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
  sheet.getRange(1, 52, 1, 3).setBackground('#fff2cc');
}

/**
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò - –ß–ò–°–¢–´–ï –í–ï–†–°–ò–ò
 */

function formatDateClean_(date) {
  if (!date) return '';
  
  try {
    let d;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (date instanceof Date) {
      d = date;
    } else if (typeof date === 'string') {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      const datePattern = /^\d{2}\.\d{2}\.\d{4}$/;
      if (datePattern.test(date)) {
        return date;
      }
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
      const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+\d{2}:\d{2}:\d{2}$/;
      const match = date.match(dateTimePattern);
      if (match) {
        return `${match[1]}.${match[2]}.${match[3]}`;
      }
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –¥–∞—Ç—É
      d = new Date(date);
    } else if (typeof date === 'number') {
      // –ï—Å–ª–∏ —ç—Ç–æ timestamp
      d = new Date(date);
    } else {
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ –∏ –∑–∞—Ç–µ–º –∫ –¥–∞—Ç–µ
      const dateStr = String(date);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
      const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+\d{2}:\d{2}:\d{2}$/;
      const match = dateStr.match(dateTimePattern);
      if (match) {
        return `${match[1]}.${match[2]}.${match[3]}`;
      }
      
      d = new Date(dateStr);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (!d || isNaN(d.getTime())) {
      return '';
    }
    
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    
    return `${day}.${month}.${year}`;
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error, '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', date);
    return '';
  }
}

function calculateDealAgeClean_(createdDate) {
  if (!createdDate) return 0;
  
  try {
    let created;
    
    if (createdDate instanceof Date) {
      created = createdDate;
    } else if (typeof createdDate === 'string') {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°
      const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})$/;
      const match = createdDate.match(dateTimePattern);
      if (match) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è Date
        const [, day, month, year, hour, minute, second] = match;
        created = new Date(year, month - 1, day, hour, minute, second);
      } else {
        created = new Date(createdDate);
      }
    } else if (typeof createdDate === 'number') {
      created = new Date(createdDate);
    } else {
      const dateStr = String(createdDate);
      const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})$/;
      const match = dateStr.match(dateTimePattern);
      if (match) {
        const [, day, month, year, hour, minute, second] = match;
        created = new Date(year, month - 1, day, hour, minute, second);
      } else {
        created = new Date(dateStr);
      }
    }
    
    if (!created || isNaN(created.getTime())) {
      return 0;
    }
    
    const now = new Date();
    const diffTime = now - created;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays > 0 ? diffDays : 0;
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–¥–µ–ª–∫–∏:', error);
    return 0;
  }
}

function calculateDaysToBookingClean_(createdDate, bookingDate) {
  if (!createdDate || !bookingDate) return 0;
  
  try {
    let created, booking;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°
    const parseDate = (dateInput) => {
      if (dateInput instanceof Date) {
        return dateInput;
      } else if (typeof dateInput === 'string') {
        const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})$/;
        const match = dateInput.match(dateTimePattern);
        if (match) {
          const [, day, month, year, hour, minute, second] = match;
          return new Date(year, month - 1, day, hour, minute, second);
        }
        return new Date(dateInput);
      } else if (typeof dateInput === 'number') {
        return new Date(dateInput);
      } else {
        const dateStr = String(dateInput);
        const dateTimePattern = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})$/;
        const match = dateStr.match(dateTimePattern);
        if (match) {
          const [, day, month, year, hour, minute, second] = match;
          return new Date(year, month - 1, day, hour, minute, second);
        }
        return new Date(dateStr);
      }
    };
    
    created = parseDate(createdDate);
    booking = parseDate(bookingDate);
    
    if (!created || !booking || isNaN(created.getTime()) || isNaN(booking.getTime())) {
      return 0;
    }
    
    const diffTime = booking - created;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays > 0 ? diffDays : 0;
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ –±—Ä–æ–Ω–∏:', error);
    return 0;
  }
}

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ß–ï–¢–û–í –ì–û–°–¢–ï–ô
 */
function diagnosticGuestBills() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ß–ï–¢–û–í –ì–û–°–¢–ï–ô');
  
  try {
    const guestsData = loadGuestsData_();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Å—Ç–µ–π: ${guestsData.length}`);
    
    let totalWithBills = 0;
    let totalBillsSum = 0;
    
    guestsData.forEach((guest, index) => {
      if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        console.log(`\nüë§ –ì–æ—Å—Ç—å ${index + 1}: ${guest.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}`);
        console.log(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${guest.phone}`);
        console.log(`üí∞ –°—á–µ—Ç–∞: ${guest.bill_1}, ${guest.bill_2}, ${guest.bill_3}, ${guest.bill_4}, ${guest.bill_5}`);
        console.log(`üí∞ –°—á–µ—Ç–∞ 6-10: ${guest.bill_6}, ${guest.bill_7}, ${guest.bill_8}, ${guest.bill_9}, ${guest.bill_10}`);
        
        const total = calculateGuestTotalBills_(guest);
        console.log(`üíé –ò—Ç–æ–≥–æ —Å—á–µ—Ç–æ–≤: ${total}`);
      }
      
      const billTotal = calculateGuestTotalBills_(guest);
      if (billTotal > 0) {
        totalWithBills++;
        totalBillsSum += billTotal;
      }
    });
    
    console.log(`\nüìà –ò—Ç–æ–≥–æ: ${totalWithBills} –≥–æ—Å—Ç–µ–π —Å–æ —Å—á–µ—Ç–∞–º–∏, –æ–±—â–∞—è —Å—É–º–º–∞: ${totalBillsSum}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –¢–ï–õ–ï–§–û–ù–û–í
 */
function diagnosticPhoneMatching() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –¢–ï–õ–ï–§–û–ù–û–í');
  
  try {
    const guestsData = loadGuestsData_();
    const phoneToGuests = createPhoneMap_(guestsData);
    
    console.log(`üìä –ö–∞—Ä—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: ${phoneToGuests.size} –∑–∞–ø–∏—Å–µ–π`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    const testPhones = [
      '+79996106215',
      '79996106215', 
      '89996106215',
      '9996106215',
      '+7 (999) 610-62-15'
    ];
    
    testPhones.forEach(phone => {
      const normalized = normalizePhoneForSearch_(phone);
      const found = phoneToGuests.get(normalized);
      console.log(`üìû ${phone} ‚Üí ${normalized} ‚Üí ${found ? found.name || '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', error);
  }
}

/**
 * –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–û–ö –í–ê–õ–ò–î–ê–¶–ò–ò
 */

function clearDataValidation_(sheet) {
  try {
    // –û—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
    const maxRows = sheet.getMaxRows();
    const maxCols = sheet.getMaxColumns();
    
    if (maxRows > 0 && maxCols > 0) {
      const range = sheet.getRange(1, 1, maxRows, maxCols);
      range.clearDataValidations();
      console.log('üßπ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
  }
}

function normalizeStatusForValidation_(status) {
  if (!status || typeof status !== 'string') return '';
  
  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const statusMapping = {
    // –í—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Üí –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
    '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É': '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É', 
    '–≤–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É': '–≤–æ–ø—Ä–æ—Å –∫ –±–∞—Ä—É',
    '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ',
    '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã': '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã',
    '–ù–î–ó': '–ù–î–ó',
    '–û–ø–ª–∞—á–µ–Ω–æ': '–û–ø–ª–∞—á–µ–Ω–æ',
    '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π': '–ü–µ—Ä–µ–Ω–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–∞—Ç–æ–π',
    '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å': '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å',
    '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü': '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü',
    '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û': '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    '—É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û',
    '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û',
    '–£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–û': '—É—Å–ø–µ—à–Ω–æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û',
    '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü': '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü',
    '–£–°–ü–ï–®–ù–û –í –†–ü': '—É—Å–ø–µ—à–Ω–æ –≤ –†–ü',
    '–æ–ø–ª–∞—á–µ–Ω–æ': '–û–ø–ª–∞—á–µ–Ω–æ',
    '–û–ü–õ–ê–ß–ï–ù–û': '–û–ø–ª–∞—á–µ–Ω–æ',
    '–∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ': '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
    '–ê–í–¢–û–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï': '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
    '–≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É': '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É',
    '–í–ó–Ø–õ–ò –í –†–ê–ë–û–¢–£': '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É',
    '–∫–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã': '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã',
    '–ö–û–ù–¢–†–û–õ–¨ –û–ü–õ–ê–¢–´': '–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–ª–∞—Ç—ã',
    '–∑–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ': '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ',
    '–ó–ê–ö–†–´–¢–û –ò –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û': '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'
  };
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (statusMapping[status]) {
    return statusMapping[status];
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  const lowerStatus = status.toLowerCase();
  for (const [key, value] of Object.entries(statusMapping)) {
    if (key.toLowerCase() === lowerStatus) {
      return value;
    }
  }
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
  console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${status}"`);
  return status;
}

function repairWorkingAmoSheet() {
  console.log('üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –õ–ò–°–¢–ê –†–ê–ë–û–ß–ò–ô –ê–ú–û');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('–†–ê–ë–û–ß–ò–ô –ê–ú–û');
    
    if (!sheet) {
      console.log('‚ùå –õ–∏—Å—Ç –†–ê–ë–û–ß–ò–ô –ê–ú–û –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    clearDataValidation_(sheet);
    
    console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');
    const data = sheet.getDataRange().getValues();
    
    if (data.length > 1) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
      for (let i = 1; i < data.length; i++) {
        if (data[i][2]) { // –ö–æ–ª–æ–Ω–∫–∞ C (—Å—Ç–∞—Ç—É—Å)
          data[i][2] = normalizeStatusForValidation_(data[i][2]);
        }
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      sheet.getRange(1, 1, data.length, data[0].length).setValues(data);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${data.length - 1} –∑–∞–ø–∏—Å–µ–π`);
    }
    
    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    throw error;
  }
}
}
