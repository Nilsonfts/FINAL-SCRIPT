/**
 * üõ†Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–°–ï–• –û–¢–ß–Å–¢–û–í
 * –í—Å–µ –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
 * –í–µ—Ä—Å–∏—è: 2.0
 */

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–°–¢–ê–ú–ò =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
 * @param {string} sheetName - –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
 * @returns {Sheet} –û–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞
 */
function getOrCreateSheet_(sheetName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(sheetName);
  
  if (!sheet) {
    try {
      sheet = ss.insertSheet(sheetName);
      logInfo_('SHEET_CREATE', `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: "${sheetName}"`);
    } catch (error) {
      logError_('SHEET_CREATE', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ "${sheetName}"`, error);
      throw error;
    }
  }
  
  return sheet;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ä–∏—Ñ—Ç PT Sans –∫–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
 */
function applyPtSansAllSheets_() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheets = ss.getSheets();
    
    sheets.forEach(sheet => {
      try {
        const range = sheet.getDataRange();
        if (range.getNumRows() > 0 && range.getNumColumns() > 0) {
          range.setFontFamily('PT Sans');
        }
      } catch (error) {
        logWarning_('FORMATTING', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç –∫ –ª–∏—Å—Ç—É "${sheet.getName()}"`, error);
      }
    });
    
    logInfo_('FORMATTING', `–®—Ä–∏—Ñ—Ç PT Sans –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ ${sheets.length} –ª–∏—Å—Ç–∞–º`);
  } catch (error) {
    logError_('FORMATTING', '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ PT Sans', error);
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 * @param {SpreadsheetApp.Sheet} sheet - –õ–∏—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
 */
function applySheetFormatting_(sheet, title) {
  if (!sheet) return;
  
  try {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç
    const dataRange = sheet.getDataRange();
    if (dataRange.getNumRows() > 0) {
      dataRange.setFontFamily(CONFIG.DEFAULT_FONT || 'PT Sans');
      dataRange.setFontSize(10);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
      if (dataRange.getNumRows() > 0) {
        const headerRange = sheet.getRange(1, 1, 1, dataRange.getNumColumns());
        headerRange
          .setFontWeight('bold')
          .setFontSize(11)
          .setBackground(CONFIG.COLORS.HEADER_BG || '#4285f4')
          .setFontColor(CONFIG.COLORS.HEADER_TEXT || '#ffffff')
          .setHorizontalAlignment('center')
          .setVerticalAlignment('middle');
      }
      
      // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
      for (let col = 1; col <= dataRange.getNumColumns(); col++) {
        sheet.autoResizeColumn(col);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        const currentWidth = sheet.getColumnWidth(col);
        if (currentWidth > 300) {
          sheet.setColumnWidth(col, 300);
        } else if (currentWidth < 80) {
          sheet.setColumnWidth(col, 80);
        }
      }
      
      // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
      sheet.setFrozenRows(1);
    }
    
    logDebug_('FORMATTING', `–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –ª–∏—Å—Ç—É "${sheet.getName()}"`);
    
  } catch (error) {
    logWarning_('FORMATTING', `–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ "${sheet.getName()}"`, error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —è—á–µ–π–∫–µ A1
 * @param {string} sheetName - –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
 */
function updateLastUpdateTime_(sheetName) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    if (!sheet) {
      logWarning_('TIME_UPDATE', `–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏`);
      return;
    }
    
    const now = getCurrentDateMoscow_();
    const timeString = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatDateTime_(now)}`;
    
    sheet.getRange('A1').setValue(timeString);
    sheet.getRange('A1')
      .setFontSize(9)
      .setFontStyle('italic')
      .setFontColor('#666666');
    
    logDebug_('TIME_UPDATE', `–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ª–∏—Å—Ç–µ "${sheetName}"`);
    
  } catch (error) {
    logWarning_('TIME_UPDATE', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–∏—Å—Ç–µ "${sheetName}"`, error);
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º
 * @param {SpreadsheetApp.Sheet} sheet - –õ–∏—Å—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
 * @param {string} chartType - –¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã ('pie', 'column', 'line')
 * @param {Array} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞–≥—Ä–∞–º–º—ã
 * @returns {SpreadsheetApp.EmbeddedChart|null} –°–æ–∑–¥–∞–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∏–ª–∏ null
 */
function createChart_(sheet, chartType, data, options = {}) {
  try {
    if (!sheet || !data || data.length < 2) {
      logWarning_('CHARTS', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã');
      return null;
    }
    
    const {
      startRow = 1,
      startCol = 8,
      title = '–î–∏–∞–≥—Ä–∞–º–º–∞',
      width = 500,
      height = 350,
      position = { row: 3, col: 8 },
      legend = 'right',
      hAxisTitle = '',
      vAxisTitle = ''
    } = options;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç
    sheet.getRange(startRow, startCol, data.length, data[0].length).setValues(data);
    const dataRange = sheet.getRange(startRow, startCol, data.length, data[0].length);
    
    // –°–æ–∑–¥–∞—ë–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let chartBuilder;
    
    switch (chartType.toLowerCase()) {
      case 'pie':
        chartBuilder = Charts.newPieChart()
          .addRange(dataRange)
          .setOption('legend', { position: legend });
        break;
        
      case 'column':
        chartBuilder = Charts.newColumnChart()
          .addRange(dataRange)
          .setOption('legend', { position: legend })
          .setOption('hAxis', { title: hAxisTitle })
          .setOption('vAxis', { title: vAxisTitle });
        break;
        
      case 'line':
        chartBuilder = Charts.newLineChart()
          .addRange(dataRange)
          .setOption('legend', { position: legend })
          .setOption('hAxis', { title: hAxisTitle })
          .setOption('vAxis', { title: vAxisTitle })
          .setOption('curveType', 'function');
        break;
        
      default:
        logWarning_('CHARTS', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: ${chartType}`);
        return null;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const chart = chartBuilder
      .setOption('title', title)
      .setOption('titleTextStyle', { fontSize: 14, bold: true })
      .setOption('chartArea', { width: '80%', height: '80%' })
      .setPosition(position.row, position.col, 0, 0)
      .setOption('width', width)
      .setOption('height', height)
      .build();
    
    sheet.insertChart(chart);
    logDebug_('CHARTS', `–î–∏–∞–≥—Ä–∞–º–º–∞ "${title}" —Å–æ–∑–¥–∞–Ω–∞ –≤ –ª–∏—Å—Ç–µ "${sheet.getName()}"`);
    return chart;
    
  } catch (error) {
    logWarning_('CHARTS', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã "${options.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}"`, error);
    return null;
  }
}

// ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====

/**
 * –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
function logInfo_(module, message, details = null) {
  try {
    console.log(`[INFO] ${module}: ${message}`, details || '');
  } catch (e) {
    // Fallback –µ—Å–ª–∏ console –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
}

function logWarning_(module, message, details = null) {
  try {
    console.warn(`[WARNING] ${module}: ${message}`, details || '');
  } catch (e) {
    // Fallback –µ—Å–ª–∏ console –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
}

function logError_(module, message, details = null) {
  try {
    console.error(`[ERROR] ${module}: ${message}`, details || '');
  } catch (e) {
    // Fallback –µ—Å–ª–∏ console –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
}

// ===== –ß–¢–ï–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =====

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞
 */
function readSheet(ss, sheetName) {
  const sh = ss.getSheetByName(sheetName);
  if (!sh) throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  
  const values = sh.getDataRange().getValues();
  if (values.length < 2) return { header: [], rows: [] };
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–±—ã—á–Ω–æ 2-—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5)
  let headerRow = 1;
  for (let i = 0; i < Math.min(5, values.length); i++) {
    const row = values[i].map(String);
    if (row.includes('ID') && (row.includes('–°—Ç–∞—Ç—É—Å') || row.includes('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))) {
      headerRow = i;
      break;
    }
  }
  
  const header = values[headerRow].map(String);
  const rows = values.slice(headerRow + 1).filter(r => r.some(x => String(x).trim() !== ''));
  
  return { header, rows };
}

/**
 * –ì–∏–±–∫–æ–µ —á—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */
function readSheetFlexible(ss, sheetName) {
  const sh = ss.getSheetByName(sheetName);
  if (!sh) throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  
  const vals = sh.getDataRange().getValues();
  if (vals.length === 0) return { header: [], rows: [], idx: {} };
  
  const header = (vals[0] || []).map(String);
  const rows = vals.slice(1).filter(r => r.some(x => String(x).trim() !== ''));
  
  // –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø–æ–ª–µ–π
  const idx = {
    id: findColumnIndex(header, ['ID', 'id', '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä']),
    phone: findColumnIndex(header, ['–¢–µ–ª–µ—Ñ–æ–Ω', 'Phone', '–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω']),
    date: findColumnIndex(header, ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', 'DATE', 'Created']),
    status: findColumnIndex(header, ['–°—Ç–∞—Ç—É—Å', 'Status', '–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å']),
    budget: findColumnIndex(header, ['–ë—é–¥–∂–µ—Ç', 'Budget', '–°—É–º–º–∞ ‚ÇΩ']),
    utm: findColumnIndex(header, ['utm_source', 'UTM_SOURCE', '–ò—Å—Ç–æ—á–Ω–∏–∫'])
  };
  
  return { header, rows, idx };
}

// ===== –ü–û–ò–°–ö –ö–û–õ–û–ù–û–ö =====

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
 */
function findColumns(header, columnNames) {
  const norm = header.map(h => String(h).trim().toLowerCase());
  const indices = {};
  
  for (const [key, candidates] of Object.entries(columnNames)) {
    indices[key] = -1;
    const candArray = Array.isArray(candidates) ? candidates : [candidates];
    
    for (const name of candArray) {
      const normalized = String(name).trim().toLowerCase();
      const idx = norm.findIndex(h => h === normalized || h.includes(normalized));
      if (idx > -1) {
        indices[key] = idx;
        break;
      }
    }
  }
  
  return indices;
}

/**
 * –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏
 */
function findColumnIndex(header, candidates) {
  const norm = header.map(h => String(h).trim().toLowerCase());
  const candArray = Array.isArray(candidates) ? candidates : [candidates];
  
  for (const name of candArray) {
    const normalized = String(name).trim().toLowerCase();
    const idx = norm.findIndex(h => h === normalized || h.includes(normalized));
    if (idx > -1) return idx;
  }
  
  return -1;
}

// ===== –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• =====

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
 */
function normalizeStatus(raw) {
  let s = String(raw || '').trim();
  s = s.replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i, '');
  s = s.replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/, '').trim();
  
  const rules = [
    [/–æ–ø–ª–∞—á/i, '–û–ø–ª–∞—á–µ–Ω–æ'],
    [/—É—Å–ø–µ—à.*–≤\s*—Ä–ø/i, '–£—Å–ø–µ—à–Ω–æ –≤ –†–ü'],
    [/—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑/i, '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    [/–∑–∞–∫—Ä—ã—Ç–æ.*–Ω–µ\s*—Ä–µ–∞–ª–∏–∑/i, '–ó–∞–∫—Ä—ã—Ç–æ –∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    [/–Ω–æ–≤—ã–π/i, '–ù–æ–≤—ã–π –ª–∏–¥'],
    [/–ø–µ—Ä–≤–∏—á.*–∫–æ–Ω—Ç–∞–∫—Ç/i, '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç'],
    [/–∫–≤–∞–ª–∏—Ñ–∏–∫/i, '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è'],
    [/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω/i, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ']
  ];
  
  for (const [re, norm] of rules) {
    if (re.test(s)) return norm;
  }
  
  return s || '–ù–æ–≤—ã–π –ª–∏–¥';
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
function cleanPhone(phone) {
  if (!phone) return '';
  return String(phone)
    .replace(/\D/g, '')
    .replace(/^[78]/, '')
    .slice(0, 10);
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
 */
function toNumber(v) {
  if (v == null || v === '') return 0;
  const n = Number(String(v).replace(/\s/g, '').replace(',', '.'));
  return isNaN(n) ? 0 : n;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞—Ç—É
 */
function toDate(v) {
  if (!v) return null;
  if (v instanceof Date) return v;
  const d = new Date(v);
  return isNaN(d.getTime()) ? null : d;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
 */
function formatDate(date, format = 'dd.MM.yyyy') {
  if (!date) return '';
  if (!(date instanceof Date)) date = new Date(date);
  return Utilities.formatDate(date, CONFIG.TIMEZONE, format);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
function cleanString(str) {
  return String(str || '').trim().replace(/\s+/g, ' ');
}

// ===== –†–ê–ë–û–¢–ê –° –¢–ê–ë–õ–ò–¶–ê–ú–ò –ò –û–§–û–†–ú–õ–ï–ù–ò–ï =====

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
 */
function writeTable(sheet, startRow, startCol, header, data, options = {}) {
  const opts = {
    headerBg: '#f3f3f3',
    headerColor: '#000000',
    zebraColor1: '#ffffff',
    zebraColor2: '#f8fcff',
    borderColor: '#cccccc',
    fontFamily: CONFIG.FONT,
    ...options
  };
  
  ensureSize(sheet, startRow + data.length, startCol + header.length - 1);
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const headerRange = sheet.getRange(startRow, startCol, 1, header.length);
  headerRange.setValues([header])
    .setFontWeight('bold')
    .setBackground(opts.headerBg)
    .setFontColor(opts.headerColor)
    .setFontFamily(opts.fontFamily)
    .setBorder(true, true, true, true, true, true, opts.borderColor, SpreadsheetApp.BorderStyle.SOLID);
  
  // –î–∞–Ω–Ω—ã–µ
  if (data.length > 0) {
    const dataRange = sheet.getRange(startRow + 1, startCol, data.length, header.length);
    dataRange.setValues(data)
      .setFontFamily(opts.fontFamily)
      .setBorder(true, true, true, true, true, true, opts.borderColor, SpreadsheetApp.BorderStyle.SOLID);
    
    // –ó–µ–±—Ä–∞-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    const backgrounds = [];
    for (let i = 0; i < data.length; i++) {
      const color = i % 2 === 0 ? opts.zebraColor1 : opts.zebraColor2;
      backgrounds.push(Array(header.length).fill(color));
    }
    dataRange.setBackgrounds(backgrounds);
  }
  
  return { 
    headerRange: sheet.getRange(startRow, startCol, 1, header.length),
    dataRange: data.length > 0 ? sheet.getRange(startRow + 1, startCol, data.length, header.length) : null,
    totalRows: data.length + 1,
    totalCols: header.length
  };
}

/**
 * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–∏—Å—Ç–∞
 */
function ensureSize(sheet, needRows, needCols) {
  const maxRows = sheet.getMaxRows();
  const maxCols = sheet.getMaxColumns();
  
  if (maxRows < needRows) {
    sheet.insertRowsAfter(maxRows, needRows - maxRows);
  }
  if (maxCols < needCols) {
    sheet.insertColumnsAfter(maxCols, needCols - maxCols);
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
 */
function setFontAll(sheet, fontName = CONFIG.FONT) {
  sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns())
    .setFontFamily(fontName);
}

/**
 * –ê–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
 */
function autoResizeColumns(sheet) {
  const lastCol = sheet.getLastColumn();
  for (let i = 1; i <= lastCol; i++) {
    try {
      sheet.autoResizeColumn(i);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è
    }
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 */
function createSection(sheet, row, col, title, bgColor = '#e8f4fd') {
  ensureSize(sheet, row, col + title.length);
  sheet.getRange(row, col, 1, 3)
    .merge()
    .setValue(title)
    .setBackground(bgColor)
    .setFontWeight('bold')
    .setFontFamily(CONFIG.FONT)
    .setHorizontalAlignment('center');
  return row + 1;
}

// ===== GPT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø =====

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ OpenAI API
 */
function callOpenAI(prompt, options = {}) {
  const {
    model = 'gpt-4o',
    temperature = 0.3,
    maxTokens = 2000,
    systemPrompt = '–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫.',
    responseType = 'text',
    fallbackModel = 'gpt-4o-mini'
  } = options;
  
  validateApiKey();
  
  const url = 'https://api.openai.com/v1/chat/completions';
  const payload = {
    model: model,
    temperature: temperature,
    max_tokens: maxTokens,
    messages: [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: prompt }
    ]
  };
  
  if (responseType === 'json') {
    payload.response_format = { type: 'json_object' };
  }
  
  try {
    const response = UrlFetchApp.fetch(url, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      headers: { 'Authorization': `Bearer ${CONFIG.API_KEY}` },
      muteHttpExceptions: true
    });
    
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    if (responseCode >= 300) {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–µ rate limit
      if (responseCode === 429 && fallbackModel && model !== fallbackModel) {
        Logger.log(`–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º ${fallbackModel}`);
        return callOpenAI(prompt, { ...options, model: fallbackModel, fallbackModel: null });
      }
      throw new Error(`OpenAI –æ—à–∏–±–∫–∞ ${responseCode}: ${responseText}`);
    }
    
    if (responseType === 'json') {
      const jsonMatch = responseText.match(/{[\s\S]*}/);
      if (jsonMatch && jsonMatch[0]) {
        try {
          return JSON.parse(jsonMatch[0]);
        } catch (e) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å JSON –æ—Ç GPT: ' + e.toString());
        }
      }
      throw new Error('–û—Ç–≤–µ—Ç GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON');
    } else {
      try {
        const data = JSON.parse(responseText);
        return data?.choices?.[0]?.message?.content?.trim() || '‚Äî';
      } catch (e) {
        return responseText; // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }
    
  } catch (e) {
    Logger.log('–û—à–∏–±–∫–∞ GPT: ' + e.toString());
    throw e;
  }
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê–ú–ò =====

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
 */
function setHourlyTrigger(functionName) {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === functionName)
    .forEach(t => ScriptApp.deleteTrigger(t));
  
  ScriptApp.newTrigger(functionName)
    .timeBased()
    .everyHours(1)
    .create();
    
  Logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –µ–∂–µ—á–∞—Å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è ${functionName}`);
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
 */
function setDailyTrigger(functionName, hour = 6) {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === functionName)
    .forEach(t => ScriptApp.deleteTrigger(t));
  
  ScriptApp.newTrigger(functionName)
    .timeBased()
    .everyDays(1)
    .atHour(hour)
    .inTimezone(CONFIG.TIMEZONE)
    .create();
    
  Logger.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è ${functionName} –≤ ${hour}:00`);
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function removeTrigger(functionName) {
  ScriptApp.getProjectTriggers()
    .filter(t => t.getHandlerFunction() === functionName)
    .forEach(t => ScriptApp.deleteTrigger(t));
    
  Logger.log(`–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è ${functionName}`);
}

// ===== –ê–ì–†–ï–ì–ê–¶–ò–Ø –ò –ì–†–£–ü–ü–ò–†–û–í–ö–ê –î–ê–ù–ù–´–• =====

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É
 */
function groupBy(array, keyFunction) {
  const groups = new Map();
  
  for (const item of array) {
    const key = keyFunction(item);
    if (!groups.has(key)) {
      groups.set(key, []);
    }
    groups.get(key).push(item);
  }
  
  return groups;
}

/**
 * –ê–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
 */
function aggregateMetrics(items, groupKeyFn, metrics = {}) {
  const groups = groupBy(items, groupKeyFn);
  const result = [];
  
  for (const [key, groupItems] of groups) {
    const aggregated = { key };
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    aggregated.count = groupItems.length;
    aggregated.sum = groupItems.reduce((s, item) => s + (metrics.sum ? metrics.sum(item) : 0), 0);
    aggregated.avg = aggregated.count > 0 ? aggregated.sum / aggregated.count : 0;
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    for (const [metricName, metricFn] of Object.entries(metrics)) {
      if (metricName !== 'sum') {
        aggregated[metricName] = metricFn(groupItems);
      }
    }
    
    result.push(aggregated);
  }
  
  return result.sort((a, b) => (b.count || 0) - (a.count || 0));
}

// ===== –ï–î–ò–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –í–°–ï–• –û–¢–ß–Å–¢–û–í =====

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
  const menu = ui.createMenu('üìä –í—Å–µ –û—Ç—á—ë—Ç—ã');
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
  menu.addItem('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –†–ê–ë–û–ß–ò–ô –ê–ú–û', 'buildWorkingFromFive')
      .addSeparator()
      .addItem('üìâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–æ–≤', 'dailyReportWithGPT')
      .addItem('üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤', 'buildChannelComparison')
      .addItem('üéØ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –∫–∞—Å–∞–Ω–∏–π', 'buildFirstTouchReport')
      .addItem('üìà –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ AMO', 'buildAmoDashboard_v2')
      .addSeparator();
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  menu.addItem('üìû –ö–æ–ª–ª-—Ç—Ä–µ–∫–∏–Ω–≥', 'buildCalltrackingReport')
      .addItem('üåê –õ–∏–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º (–¥–µ—Ç–∞–ª—å–Ω–æ)', 'buildChannelDetailedReports')
      .addItem('üí∞ –°–∫–≤–æ–∑–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'buildE2E')
      .addItem('üé® –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è', 'buildAcquisitionAnalysis')
      .addSeparator();
  
  // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
  menu.addItem('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'buildDailyStats')
      .addItem('üë• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã', 'buildTeamPerformanceDashboard')
      .addItem('üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∫–∞–Ω–∞–ª—ã', 'buildMarketingChannels')
      .addItem('üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', 'buildMonthlyDynamics')
      .addSeparator();
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
  menu.addItem('üéØ –í—ã–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç', 'buildDirectConversions')
      .addItem('‚≠ê –¢–û–ü-40 –∫–ª–∏–µ–Ω—Ç–æ–≤', 'buildTop40ClientsFromGuests')
      .addItem('üåê –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–π—Ç–∞', 'buildSiteAnalytics')
      .addItem('üîó –°–∫–≤–æ–∑–Ω–∞—è –°–∞–π—Ç ‚Üí AMO', 'buildSiteToAmoAnalytics')
      .addSeparator();
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const triggerMenu = ui.createMenu('‚è∞ –¢—Ä–∏–≥–≥–µ—Ä—ã')
    .addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –µ–∂–µ—á–∞—Å–Ω—ã–µ', 'setupAllHourlyTriggers')
    .addItem('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', 'removeAllTriggers')
    .addSeparator()
    .addItem('–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', 'showActiveTriggers');
  
  menu.addSubMenu(triggerMenu)
      .addSeparator()
      .addItem('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã', 'updateAllReports')
      .addItem('‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ', 'showAbout')
      .addToUi();
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–ù–Æ =====

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –µ–∂–µ—á–∞—Å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function setupAllHourlyTriggers() {
  const functions = [
    'buildWorkingFromFive',
    'buildAmoDashboard_v2', 
    'buildCalltrackingReport',
    'buildChannelDetailedReports',
    'buildE2E',
    'buildDailyStats'
  ];
  
  functions.forEach(fn => {
    try {
      setHourlyTrigger(fn);
    } catch (e) {
      Logger.log(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è ${fn}: ${e.toString()}`);
    }
  });
  
  SpreadsheetApp.getUi().alert(
    '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–∂–µ—á–∞—Å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${functions.length}\n${functions.join('\n')}`,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function removeAllTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(t => ScriptApp.deleteTrigger(t));
  
  SpreadsheetApp.getUi().alert(
    'üóëÔ∏è –¢—Ä–∏–≥–≥–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã',
    `–£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ${triggers.length}`,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/**
 * –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
 */
function showActiveTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  const info = triggers.map(t => 
    `‚Ä¢ ${t.getHandlerFunction()} (${t.getEventType()})`
  ).join('\n');
  
  SpreadsheetApp.getUi().alert(
    '‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    info || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/**
 * –ú–∞—Å—Ç–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤
 */
function updateAllReports() {
  const ui = SpreadsheetApp.getUi();
  const start = new Date();
  
  const reports = [
    { name: '–†–ê–ë–û–ß–ò–ô –ê–ú–û', fn: 'buildWorkingFromFive' },
    { name: '–°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', fn: 'buildAmoDashboard_v2' },
    { name: '–ö–æ–ª–ª-—Ç—Ä–µ–∫–∏–Ω–≥', fn: 'buildCalltrackingReport' },
    { name: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', fn: 'buildChannelComparison' },
    { name: '–ü–µ—Ä–≤—ã–µ –∫–∞—Å–∞–Ω–∏—è', fn: 'buildFirstTouchReport' }
  ];
  
  let success = 0;
  let errors = [];
  
  reports.forEach(report => {
    try {
      if (typeof this[report.fn] === 'function') {
        this[report.fn]();
        success++;
      } else {
        errors.push(`${report.name}: –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    } catch (e) {
      errors.push(`${report.name}: ${e.toString()}`);
    }
  });
  
  const duration = Math.round((new Date() - start) / 1000);
  
  ui.alert(
    'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    `–£—Å–ø–µ—à–Ω–æ: ${success}/${reports.length}\n` +
    `–í—Ä–µ–º—è: ${duration} —Å–µ–∫.\n` +
    (errors.length ? `\n–û—à–∏–±–∫–∏:\n${errors.join('\n')}` : ''),
    ui.ButtonSet.OK
  );
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
 */
function showAbout() {
  SpreadsheetApp.getUi().alert(
    '‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
    '–í–µ—Ä—Å–∏—è: 2.0\n' +
    '–í—Å–µ–≥–æ –æ—Ç—á—ë—Ç–æ–≤: 16+\n' +
    '–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: –†–ê–ë–û–ß–ò–ô –ê–ú–û\n' +
    'GPT –º–æ–¥–µ–ª—å: gpt-4o\n' +
    '–®—Ä–∏—Ñ—Ç: PT Sans\n\n' +
    '¬© 2025 –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

// ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–õ–ê–î–ö–ê =====

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
 */
function logToSheet(ss, message, level = 'INFO') {
  try {
    const logSheet = ss.getSheetByName('LOG') || ss.insertSheet('LOG');
    const timestamp = Utilities.formatDate(new Date(), CONFIG.TIMEZONE, 'dd.MM.yyyy HH:mm:ss');
    logSheet.appendRow([timestamp, level, message]);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
    const lastRow = logSheet.getLastRow();
    if (lastRow > 1000) {
      logSheet.deleteRows(2, lastRow - 1000);
    }
  } catch (e) {
    Logger.log('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ' + e.toString());
  }
}
