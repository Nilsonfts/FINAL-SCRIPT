/**********************************************************
 * –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –ö–ê–°–ê–ù–ò–ô (v2.0: —Å GPT –∏ –î–∞—à–±–æ—Ä–¥–æ–º)
 **********************************************************/
const FT_CFG = {
  RA_SHEET: '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
  OUT_SHEET: '–ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –ö–ê–°–ê–ù–ò–ô',
  FONT: 'Arial',
  GPT_MODEL: 'gpt-4o',

  COLORS: {
    PRIMARY: '#1E5AA7', SECONDARY: '#3AA655', ACCENT: '#E46C0A', HEADER: '#4a4a4a',
    CHART_PALETTE: ['#4285F4', '#DB4437', '#F4B400', '#0F9D58', '#AB47BC', '#00ACC1']
  },
  
  SUCCESS_RE: /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à.*–≤\s*—Ä–ø|—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑)/i,

  H: {
    ID:       ['ID','–°–¥–µ–ª–∫–∞.ID'], NAME: ['–ù–∞–∑–≤–∞–Ω–∏–µ','–°–¥–µ–ª–∫–∞'], MANAGER:  ['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'],
    STATUS:   ['–°—Ç–∞—Ç—É—Å'], BUDGET:   ['–ë—é–¥–∂–µ—Ç'], CREATED:  ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','DATE'],
    CLIENT:   ['–§–ò–û','–ö–æ–Ω—Ç–∞–∫—Ç','–ò–º—è','–ö–ª–∏–µ–Ω—Ç'], PHONE: ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone'],
    SRC_TEL:  ['R.–ò—Å—Ç–æ—á–Ω–∏–∫ –¢–ï–õ —Å–¥–µ–ª–∫–∏'], UTM_S: ['UTM_SOURCE','utm_source'],
    UTM_M:    ['UTM_MEDIUM','utm_medium'], UTM_C: ['UTM_CAMPAIGN','utm_campaign'],
    SUM_RUB:  ['–°—É–º–º–∞ ‚ÇΩ'],
  },

  MAP: {
    site: [/^osn[_\-]?tel$/i, /^site$/i, /^rp[_\-]?site$/i, /^direct$/i, /^–ø—Ä—è–º/i],
    yandex: [/^ya[_\-]?tel$/i, /^ya[_\-]?map/i, /^yandex/i], gis2: [/^2gis/i, /^2gis[_\-]?tel/i],
    telegram: [/^bot[_\-]?tg$/i, /^tg$/i, /^telegram/i], vk: [/^vk/i],
  },

  CHANNEL_TITLE: {
    site: '–°–∞–π—Ç', yandex: '–Ø–Ω–¥–µ–∫—Å', gis2: '2–ì–ò–°',
    telegram: 'Telegram', vk: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', other: '–î—Ä—É–≥–æ–µ',
  },
  DETAIL_LIMIT: 50
};

/* ==================== –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==================== */
function buildFirstTouchReport(){
  const OPENAI_API_KEY = PropertiesService.getScriptProperties().getProperty('OPENAI_API_KEY');
  if (!OPENAI_API_KEY) throw new Error('–ö–ª—é—á "OPENAI_API_KEY" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –°–≤–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä–∏–ø—Ç–∞.');

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sh = ss.getSheetByName(FT_CFG.RA_SHEET);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ "'+FT_CFG.RA_SHEET+'"');

  const {header, rows} = ft_readTable(sh);
  const idx = ft_getIdx(header);

  const byClient = ft_collectClientData(rows, idx);
  const { channels, details } = ft_aggregateChannelData(byClient);

  const sumRows = [...channels.values()]
    .sort((a,b)=>b.revenue - a.revenue)
    .map(v => {
      const conv = ft_pct(v.converted, v.firstCount);
      const ltv  = v.converted ? v.revenue / v.converted : 0;
      const grade = ft_effGrade(conv, ltv);
      return { ...v, conv, ltv, grade };
    });

  const detRows = details
    .sort((a,b) => (b.date || 0) - (a.date || 0))
    .slice(0, FT_CFG.DETAIL_LIMIT);

  const gptSummary = ft_getGptSummary(sumRows, OPENAI_API_KEY);

  ft_writeOutputSheet(ss, sumRows, detRows, gptSummary);
}

/* ==================== –í–´–í–û–î –ù–ê –õ–ò–°–¢ ==================== */
function ft_writeOutputSheet(ss, summaryData, detailData, gptSummary) {
  const out = ss.getSheetByName(FT_CFG.OUT_SHEET) || ss.insertSheet(FT_CFG.OUT_SHEET);
  out.clear();
  out.getCharts().forEach(chart => out.removeChart(chart));
  if(out.getMaxColumns() > 10) out.deleteColumns(11, out.getMaxColumns() - 10);
  if(out.getMaxRows() > 100) out.deleteRows(101, out.getMaxRows() - 100);
  ft_setFont(out, FT_CFG.FONT);

  let r=1, c=1;

  ft_band(out, r, c, 1, 10, FT_CFG.COLORS.HEADER);
  out.getRange(r, c, 1, 10).merge().setValue('ü•á –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –ö–ê–°–ê–ù–ò–ô –ö–õ–ò–ï–ù–¢–û–í')
    .setFontColor('#fff').setFontSize(18).setFontWeight('bold');
  r++;
  out.getRange(r, 1).setValue(`–û—Ç—á—ë—Ç –æ—Ç ${new Date().toLocaleString('ru-RU')}`).setFontStyle('italic');
  r+=2;

  ft_buildDashboard(out, r, summaryData);
  r += 16;

  ft_title(out, r, c, ' EXECUTIVE SUMMARY (–æ—Ç GPT)', 10, '#434343'); r++;
  out.getRange(r, c, 1, 10).merge().setValue(gptSummary).setWrap(true)
     .setVerticalAlignment('top').setBackground('#f8f9fa').setBorder(true,true,true,true,true,true);
  r += 4;

  ft_title(out, r, c, 'üìä –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ö–ê–ù–ê–õ–û–í –ü–ï–†–í–û–ì–û –ö–ê–°–ê–ù–ò–Ø', 10, FT_CFG.COLORS.PRIMARY); r++;
  const head1 = ['–ö–∞–Ω–∞–ª','–ü–µ—Ä–≤—ã—Ö –∫–∞—Å–∞–Ω–∏–π','–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å','–û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è','LTV ‚ÇΩ','–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'];
  const body1 = summaryData.map(v => [v.title, v.firstCount, v.converted, v.revenue, v.conv, v.ltv, v.grade]);
  ft_writeTable(out, r, c, head1, body1);
  const n1 = Math.max(1, body1.length);
  out.getRange(r+1, c+3, n1, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  out.getRange(r+1, c+4, n1, 1).setNumberFormat('0.0%');
  out.getRange(r+1, c+5, n1, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  ft_applyConditionalFormatting(out.getRange(r+1, c+6, n1, 1));
  r += (n1 + 3);

  ft_title(out, r, c, 'üîé –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–í–´–• –ö–ê–°–ê–ù–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ' + FT_CFG.DETAIL_LIMIT + ')', 10, FT_CFG.COLORS.ACCENT); r++;
  const head2 = ['–î–∞—Ç–∞','–ö–ª–∏–µ–Ω—Ç','–¢–µ–ª–µ—Ñ–æ–Ω','–ö–∞–Ω–∞–ª','–ò—Å—Ç–æ—á–Ω–∏–∫','UTM','–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫','–û–±—â–∏–π –¥–æ—Ö–æ–¥ ‚ÇΩ'];
  const body2 = detailData.map(d=>[ d.date, d.client, d.phone, d.chTitle, d.source, d.utm, d.dealsCount, d.revenue ]);
  ft_writeTable(out, r, c, head2, body2);
  const n2 = Math.max(1, body2.length);
  out.getRange(r+1, c, n2, 1).setNumberFormat('dd.MM.yyyy');
  out.getRange(r+1, c+7, n2, 1).setNumberFormat('#,##0" ‚ÇΩ"');
  
  ft_formatSheet(out);
}


/* ==================== –°–ë–û–† –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ==================== */
function ft_collectClientData(rows, idx) {
  const byClient = new Map();
  rows.forEach(r=>{
    const created = r[idx.CREATED] || '';
    const client  = String(r[idx.CLIENT] || '').trim() || '‚Äî';
    const phone   = ft_cleanPhone(r[idx.PHONE]);
    if (!phone && client === '‚Äî') return;
    const key     = (phone || client).toLowerCase();
    const status  = String(r[idx.STATUS]||'');
    const success = FT_CFG.SUCCESS_RE.test(status);
    const ax      = ft_money(r[idx.SUM_RUB]);
    const budget  = ft_money(r[idx.BUDGET]);
    const revenue = success ? (ax>0 ? ax : budget) : 0;
    const srcTel  = String(r[idx.SRC_TEL]||'').trim();
    const utmS    = String(r[idx.UTM_S]||'').trim();
    const source  = srcTel || utmS;
    const channel = ft_resolveChannel(source);
    const utm = [utmS, String(r[idx.UTM_M]||'').trim(), String(r[idx.UTM_C]||'').trim()].filter(Boolean).join(' / ');
    const deal = { created, status, success, revenue, src: source || '‚Äî', channel, utm, name: r[idx.NAME]||'‚Äî' };
    const obj = byClient.get(key) || {name:client, phone, first:null, deals:[], revenueTotal:0, succAny:false};
    obj.deals.push(deal);
    obj.revenueTotal += revenue;
    if (success) obj.succAny = true;
    const d = created instanceof Date ? created : (created ? new Date(created) : null);
    if (d && (!obj.first || !obj.first.date || d < obj.first.date)) {
      obj.first = { date: d, source: deal.src, channel: channel, utm: utm };
    }
    byClient.set(key, obj);
  });
  return byClient;
}

function ft_aggregateChannelData(byClient) {
  const channels = new Map();
  const details = [];
  for (const c of byClient.values()){
    const chKey = c.first ? (c.first.channel || 'other') : 'other';
    const chTitle = FT_CFG.CHANNEL_TITLE[chKey] || FT_CFG.CHANNEL_TITLE.other;
    const ch = channels.get(chKey) || {title: chTitle, firstCount:0, converted:0, revenue:0};
    ch.firstCount += 1;
    if (c.succAny){
      ch.converted += 1;
      ch.revenue   += c.revenueTotal;
    }
    channels.set(chKey, ch);
    details.push({
      date: c.first?.date || '', client: c.name, phone: c.phone,
      chTitle, source: c.first?.source || '‚Äî', utm: c.first?.utm || '‚Äî',
      dealsCount: c.deals.length, revenue: c.revenueTotal
    });
  }
  return { channels, details };
}

/* ==================== GPT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==================== */
function ft_getGptSummary(summaryData, apiKey) {
  try {
    const prompt = ft_buildGptSummaryPrompt(summaryData);
    return ft_callGPT(apiKey, prompt, FT_CFG.GPT_MODEL);
  } catch (e) {
    Logger.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ GPT Summary: ' + e.toString());
    return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT. ' + e.toString();
  }
}

function ft_buildGptSummaryPrompt(summaryData) {
  const dataText = summaryData.map(c => 
    `- –ö–∞–Ω–∞–ª "${c.title}": –ü—Ä–∏–≤—ë–ª ${c.firstCount} –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ–Ω–≤–µ—Ä—Å–∏—è ${ (c.conv * 100).toFixed(1) }%, LTV ${c.ltv.toFixed(0)} ‚ÇΩ, –æ–±—â–∏–π –¥–æ—Ö–æ–¥ ${c.revenue.toFixed(0)} ‚ÇΩ.`
  ).join('\n');
  return `–¢—ã ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–∞—Å–∞–Ω–∏—é.
–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) Executive Summary –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
–í—ã–¥–µ–ª–∏ —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–π LTV –∏ –¥–æ—Ö–æ–¥) –∏ —Å–∞–º—ã–π —Å–ª–∞–±—ã–π –∫–∞–Ω–∞–ª, —Ç—Ä–µ–±—É—é—â–∏–π –≤–Ω–∏–º–∞–Ω–∏—è. –î–∞–π –æ–¥–Ω—É –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.

–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n${dataText}`;
}

function ft_callGPT(apiKey, prompt, model) {
  const url = 'https://api.openai.com/v1/chat/completions';
  const payload = {
    model: model, temperature: 0.4, max_tokens: 500,
    messages: [ {role:'system', content:'–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏.'}, {role:'user', content: prompt} ]
  };
  const resp = UrlFetchApp.fetch(url, {
    method:'post', contentType:'application/json', payload: JSON.stringify(payload),
    headers: { Authorization: `Bearer ${apiKey}` }, muteHttpExceptions:true
  });
  if (resp.getResponseCode()>=300){ throw new Error('OpenAI –û—à–∏–±–∫–∞ '+resp.getResponseCode()+': '+resp.getContentText()); }
  const data = JSON.parse(resp.getContentText());
  return data?.choices?.[0]?.message?.content?.trim() || '‚Äî';
}

/* ==================== –ì–†–ê–§–ò–ö–ò –ò –û–§–û–†–ú–õ–ï–ù–ò–ï ==================== */
function ft_buildDashboard(sheet, startRow, data) {
  const chartData = [['–ö–∞–Ω–∞–ª', '–î–æ—Ö–æ–¥', 'LTV', '–ü–µ—Ä–≤—ã—Ö –∫–∞—Å–∞–Ω–∏–π']];
  data.forEach(x => chartData.push([x.title, x.revenue, x.ltv, x.firstCount]));
  
  const sourceRange = sheet.getRange(startRow, 1, chartData.length, chartData[0].length);
  sourceRange.setValues(chartData);

  const rangeCh = sourceRange.offset(0,0,data.length+1,1), rangeRev = sourceRange.offset(0,1,data.length+1,1),
        rangeLtv = sourceRange.offset(0,2,data.length+1,1), rangeCount = sourceRange.offset(0,3,data.length+1,1);

  const barChartRev = sheet.newChart().asBarChart()
    .addRange(rangeRev).addRange(rangeCh).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setOption('title', '–û–±—â–∏–π –¥–æ—Ö–æ–¥ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–∞—Å–∞–Ω–∏—é').setOption('colors', [FT_CFG.COLORS.PRIMARY])
    .setPosition(startRow, 1, 0, 0).build();

  const barChartLtv = sheet.newChart().asBarChart()
    .addRange(rangeLtv).addRange(rangeCh).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setOption('title', 'LTV –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–∞—Å–∞–Ω–∏—é').setOption('colors', [FT_CFG.COLORS.SECONDARY])
    .setPosition(startRow, 6, 0, 0).build();

  const pieChart = sheet.newChart().asPieChart()
    .addRange(rangeCount).addRange(rangeCh).setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
    .setOption('title', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –∫–∞—Å–∞–Ω–∏–π').setOption('is3D', true)
    .setOption('colors', FT_CFG.COLORS.CHART_PALETTE)
    .setPosition(startRow, 11, 0, 0).build();

  sheet.insertChart(barChartRev);
  sheet.insertChart(barChartLtv);
  sheet.insertChart(pieChart);
  sheet.hideRows(startRow, chartData.length);
}

function ft_applyConditionalFormatting(range) {
  const sheet = range.getSheet();
  const rules = sheet.getConditionalFormatRules();
  const newRules = rules.filter(rule => rule.getRanges().every(r => r.getA1Notation() !== range.getA1Notation()));
  
  newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextContains('‚ö†Ô∏è –°–ª–∞–±—ã–π').setBackground('#FCE8E6').setBold(true).setRanges([range]).build());
  newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextContains('üü° –°—Ä–µ–¥–Ω–∏–π').setBackground('#FFF4C2').setRanges([range]).build());
  newRules.push(SpreadsheetApp.newConditionalFormatRule().whenTextContains('üü¢ –°–∏–ª—å–Ω—ã–π').setBackground('#CEEAD6').setBold(true).setRanges([range]).build());
  sheet.setConditionalFormatRules(newRules);
}

function ft_formatSheet(sh) {
  sh.setColumnWidth(1, 100); sh.setColumnWidth(2, 180); sh.setColumnWidth(3, 120);
  sh.setColumnWidth(4, 100); sh.setColumnWidth(5, 120); sh.setColumnWidth(6, 180);
  sh.setColumnWidth(7, 100); sh.setColumnWidth(8, 120);
}

/* ==================== –£–¢–ò–õ–ò–¢–´ ==================== */
function ft_readTable(sh) {
  const vals = sh.getDataRange().getValues();
  const headerRow = (vals[1] && vals[1].some(v=>String(v).trim()!=='')) ? 1 : 0;
  return {header: (vals[headerRow]||[]).map(String), rows: vals.slice(headerRow+1).filter(r=>r.some(x=>String(x).trim()!==''))};
}
function ft_getIdx(header){
  const find = (names, rightmost=false)=>{
    const norm = header.map(h=>String(h||'').trim().toLowerCase());
    const keys = Array.isArray(names)?names:[names]; let res = -1;
    norm.forEach((h,i)=>{ keys.forEach(n=>{ const k = String(n).toLowerCase();
    if (h===k || h.includes(k)){ if (rightmost){ if (i>res) res=i; } else if (res===-1) res=i; } }); }); return res;
  };
  const H = FT_CFG.H;
  return { ID: find(H.ID), NAME: find(H.NAME), MANAGER: find(H.MANAGER), STATUS: find(H.STATUS), BUDGET: find(H.BUDGET),
    CREATED: find(H.CREATED), CLIENT: find(H.CLIENT), PHONE: find(H.PHONE), SRC_TEL: find(H.SRC_TEL),
    UTM_S: find(H.UTM_S), UTM_M: find(H.UTM_M), UTM_C: find(H.UTM_C), SUM_RUB: find(H.SUM_RUB, true) };
}
function ft_resolveChannel(source){
  const s = String(source||'').trim().toLowerCase();
  if (!s) return 'other'; const test = (reArr)=>reArr.some(re=>re.test(s));
  const MAP = FT_CFG.MAP;
  if (test(MAP.site)) return 'site'; if (test(MAP.yandex)) return 'yandex'; if (test(MAP.gis2)) return 'gis2';
  if (test(MAP.telegram)) return 'telegram'; if (test(MAP.vk)) return 'vk'; return 'other';
}
function ft_money(v){ if (v==null || v==='') return 0; const n = Number(String(v).replace(/\s+/g,'').replace(',','.')); return isNaN(n)?0:n; }
function ft_toDate(v){ return (v instanceof Date) ? v : (v? new Date(v) : null); }
function ft_cleanPhone(s){ const d = String(s||'').replace(/\D/g,''); if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1); if (d.length>=10) return d.slice(-10); return d;
}
function ft_pct(a,b){ return b ? (a/b) : 0; }
function ft_effGrade(conv, ltv){
  if (conv>=0.30 && ltv>=3000) return 'üü¢ –°–∏–ª—å–Ω—ã–π';
  if (conv>=0.15 && ltv>=1500) return 'üü° –°—Ä–µ–¥–Ω–∏–π';
  return '‚ö†Ô∏è –°–ª–∞–±—ã–π';
}
function ft_setFont(sh, font){ sh.getRange(1,1,Math.max(1,sh.getMaxRows()),Math.max(1,sh.getMaxColumns())).setFontFamily(font); }
function ft_band(sh, row, col, rows, cols, bg){ ensureSize_(sh, row+rows-1, col+cols-1); sh.getRange(row,col,rows,cols).setBackground(bg); }
function ft_title(sh, row, col, text, width, bg){ ensureSize_(sh, row, col+width-1);
  const rng = sh.getRange(row,col,1,width); try{ rng.merge(); }catch(e){}
  rng.setValue(text).setFontWeight('bold').setFontSize(12).setBackground(bg).setFontColor('#fff').setVerticalAlignment('middle');
}
function ft_writeTable(sh, row, col, header, data){
  ensureSize_(sh, row + Math.max(1,data.length), col + header.length - 1);
  const head = sh.getRange(row, col, 1, header.length);
  head.setValues([header]).setFontWeight('bold').setBackground('#E9F2FB').setBorder(true,true,true,true,true,true);
  if (data.length){
    const body = sh.getRange(row+1, col, data.length, header.length);
    body.setValues(data.map(r=>r.map(v=> (v===null||v===undefined)?'':v ))).setBorder(true,true,true,true,true,true);
    const bgs = []; for (let i=0;i<data.length;i++){ const color = (i%2===0)?'#FFFFFF':'#F8FCFF'; bgs.push(Array(header.length).fill(color)); }
    body.setBackgrounds(bgs);
  } else { sh.getRange(row+1, col, 1, header.length).setBorder(true,true,true,true,true,true); }
}
function ensureSize_(sh, needRow, needCol){
  if (sh.getMaxRows() < needRow) sh.insertRowsAfter(sh.getMaxRows(), needRow - sh.getMaxRows());
  if (sh.getMaxColumns() < needCol) sh.insertColumnsAfter(sh.getMaxColumns(), needCol - sh.getMaxColumns());
}

/* ==================== –ú–ï–ù–Æ –ò –¢–†–ò–ì–ì–ï–†–´ ==================== */
function onOpen(){
  SpreadsheetApp.getUi()
    .createMenu('First-Touch')
    .addItem('–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç', 'buildFirstTouchReport')
    .addItem('Hourly —Ç—Ä–∏–≥–≥–µ—Ä', 'ft_setHourlyTrigger')
    .addToUi();
}
function ft_setHourlyTrigger(){
  ScriptApp.getProjectTriggers()
    .filter(t=>t.getHandlerFunction()==='buildFirstTouchReport')
    .forEach(t=>Script.deleteTrigger(t));
  ScriptApp.newTrigger('buildFirstTouchReport').timeBased().everyHours(1).create();
}
