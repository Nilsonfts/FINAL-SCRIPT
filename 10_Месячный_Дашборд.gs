/**
 * –ú–û–î–£–õ–¨: –ú–ï–°–Ø–ß–ù–´–ô –î–ê–®–ë–û–†–î
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å KPI
 */

function runMonthlyDashboard() {
  console.log('–°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...');
  
  try {
    const data = getWorkingAmoData();
    if (!data || data.length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    const dashboard = createMonthlyDashboard(data);
    const sheet = createMonthlyDashboardReport(dashboard);
    
    console.log(`–°–æ–∑–¥–∞–Ω –¥–∞—à–±–æ—Ä–¥ –Ω–∞ –ª–∏—Å—Ç–µ "${CONFIG.SHEETS.MONTHLY_DASHBOARD}"`);
    console.log(`–ü–µ—Ä–∏–æ–¥: ${dashboard.currentMonth} ${dashboard.currentYear}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    throw error;
  }
}

function createMonthlyDashboard(data) {
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth();
  const currentYear = currentDate.getFullYear();
  const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1;
  const previousYear = currentMonth === 0 ? currentYear - 1 : currentYear;
  
  const monthNames = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const currentMonthData = {
    leads: 0,
    success: 0,
    refused: 0,
    budget: 0,
    revenue: 0,
    avgDeal: 0,
    conversion: 0,
    managers: new Set(),
    sources: {},
    days: {}
  };
  
  const previousMonthData = {
    leads: 0,
    success: 0,
    refused: 0,
    budget: 0,
    revenue: 0
  };
  
  const channelAnalysis = {};
  const managerPerformance = {};
  const dailyMetrics = {};
  const weeklyTrends = {};
  const goals = {
    leadsGoal: 100, // –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    revenueGoal: 5000000,
    conversionGoal: 25
  };
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
  for (let day = 1; day <= daysInMonth; day++) {
    dailyMetrics[day] = {
      day: day,
      leads: 0,
      success: 0,
      revenue: 0,
      calls: 0
    };
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  data.forEach(row => {
    const createdAt = row[CONFIG.WORKING_AMO_COLUMNS.CREATED_AT];
    if (!createdAt) return;
    
    const dealDate = new Date(createdAt);
    const dealMonth = dealDate.getMonth();
    const dealYear = dealDate.getFullYear();
    const dealDay = dealDate.getDate();
    
    const status = row[CONFIG.WORKING_AMO_COLUMNS.STATUS] || '';
    const responsible = row[CONFIG.WORKING_AMO_COLUMNS.RESPONSIBLE] || '';
    const budget = formatNumber(row[CONFIG.WORKING_AMO_COLUMNS.BUDGET]);
    const factAmount = formatNumber(row[CONFIG.WORKING_AMO_COLUMNS.FACT_AMOUNT]);
    const source = parseUtmSource(row);
    const channelType = getChannelType(source);
    
    const isSuccess = isSuccessStatus(status);
    const isRefusal = isRefusalStatus(status);
    
    // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if (dealMonth === currentMonth && dealYear === currentYear) {
      currentMonthData.leads++;
      currentMonthData.budget += budget;
      currentMonthData.managers.add(responsible);
      
      if (isSuccess) {
        currentMonthData.success++;
        currentMonthData.revenue += factAmount;
      }
      if (isRefusal) currentMonthData.refused++;
      
      // –ò—Å—Ç–æ—á–Ω–∏–∫–∏
      if (!currentMonthData.sources[source]) currentMonthData.sources[source] = 0;
      currentMonthData.sources[source]++;
      
      // –ü–æ –¥–Ω—è–º
      if (dealDay && dailyMetrics[dealDay]) {
        dailyMetrics[dealDay].leads++;
        if (isSuccess) {
          dailyMetrics[dealDay].success++;
          dailyMetrics[dealDay].revenue += factAmount;
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤
      if (!channelAnalysis[channelType]) {
        channelAnalysis[channelType] = {
          channel: channelType,
          leads: 0,
          success: 0,
          budget: 0,
          revenue: 0,
          conversion: 0,
          romi: 0
        };
      }
      
      channelAnalysis[channelType].leads++;
      channelAnalysis[channelType].budget += budget;
      if (isSuccess) {
        channelAnalysis[channelType].success++;
        channelAnalysis[channelType].revenue += factAmount;
      }
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      if (responsible && responsible !== '') {
        if (!managerPerformance[responsible]) {
          managerPerformance[responsible] = {
            manager: responsible,
            leads: 0,
            success: 0,
            revenue: 0,
            avgDeal: 0,
            efficiency: 0
          };
        }
        
        managerPerformance[responsible].leads++;
        if (isSuccess) {
          managerPerformance[responsible].success++;
          managerPerformance[responsible].revenue += factAmount;
        }
      }
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if (dealMonth === previousMonth && dealYear === previousYear) {
      previousMonthData.leads++;
      previousMonthData.budget += budget;
      
      if (isSuccess) {
        previousMonthData.success++;
        previousMonthData.revenue += factAmount;
      }
      if (isRefusal) previousMonthData.refused++;
    }
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  currentMonthData.conversion = currentMonthData.leads > 0 ? 
    (currentMonthData.success / currentMonthData.leads * 100) : 0;
  
  currentMonthData.avgDeal = currentMonthData.success > 0 ? 
    currentMonthData.revenue / currentMonthData.success : 0;
  
  currentMonthData.managers = currentMonthData.managers.size;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
  Object.values(channelAnalysis).forEach(channel => {
    channel.conversion = channel.leads > 0 ? (channel.success / channel.leads * 100) : 0;
    channel.romi = channel.budget > 0 ? ((channel.revenue - channel.budget) / channel.budget * 100) : 0;
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  Object.values(managerPerformance).forEach(manager => {
    manager.avgDeal = manager.success > 0 ? manager.revenue / manager.success : 0;
    manager.conversion = manager.leads > 0 ? (manager.success / manager.leads * 100) : 0;
    manager.efficiency = calculateManagerEfficiency({
      conversionRate: manager.conversion,
      totalDeals: manager.leads,
      currentMonthDeals: manager.leads
    });
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
  const weeks = groupDaysByWeeks(dailyMetrics);
  Object.entries(weeks).forEach(([weekNum, days]) => {
    weeklyTrends[weekNum] = {
      week: `–ù–µ–¥–µ–ª—è ${weekNum}`,
      leads: days.reduce((sum, day) => sum + day.leads, 0),
      success: days.reduce((sum, day) => sum + day.success, 0),
      revenue: days.reduce((sum, day) => sum + day.revenue, 0)
    };
  });
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
  const comparison = {
    leadsChange: calculateChange(currentMonthData.leads, previousMonthData.leads),
    revenueChange: calculateChange(currentMonthData.revenue, previousMonthData.revenue),
    conversionChange: {
      current: currentMonthData.conversion,
      previous: previousMonthData.leads > 0 ? (previousMonthData.success / previousMonthData.leads * 100) : 0
    }
  };
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º
  const goalProgress = {
    leadsProgress: currentMonthData.leads / goals.leadsGoal * 100,
    revenueProgress: currentMonthData.revenue / goals.revenueGoal * 100,
    conversionProgress: currentMonthData.conversion / goals.conversionGoal * 100
  };
  
  return {
    currentMonth: monthNames[currentMonth],
    currentYear: currentYear,
    currentMonthData,
    previousMonthData,
    comparison,
    channelAnalysis: Object.values(channelAnalysis).sort((a, b) => b.leads - a.leads),
    managerPerformance: Object.values(managerPerformance).sort((a, b) => b.efficiency - a.efficiency),
    dailyMetrics: Object.values(dailyMetrics),
    weeklyTrends: Object.values(weeklyTrends),
    goalProgress,
    goals,
    insights: generateDashboardInsights(currentMonthData, comparison, goalProgress)
  };
}

function groupDaysByWeeks(dailyMetrics) {
  const weeks = {};
  Object.values(dailyMetrics).forEach(day => {
    const weekNum = Math.ceil(day.day / 7);
    if (!weeks[weekNum]) weeks[weekNum] = [];
    weeks[weekNum].push(day);
  });
  return weeks;
}

function calculateChange(current, previous) {
  if (previous === 0) return { value: current, percent: 100, trend: 'up' };
  
  const change = ((current - previous) / previous) * 100;
  return {
    value: current - previous,
    percent: Math.abs(change),
    trend: change >= 0 ? 'up' : 'down'
  };
}

function generateDashboardInsights(currentData, comparison, goalProgress) {
  const insights = [];
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ª–∏–¥–∞–º
  if (goalProgress.leadsProgress >= 100) {
    insights.push('üéØ –¶–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
  } else if (goalProgress.leadsProgress >= 80) {
    insights.push('üìà –ë–ª–∏–∑–∫–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ü–µ–ª–∏ –ø–æ –ª–∏–¥–∞–º');
  } else {
    insights.push('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–∏–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –ª–∏–¥–æ–≤');
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
  if (currentData.conversion >= 30) {
    insights.push('üíö –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤');
  } else if (currentData.conversion >= 20) {
    insights.push('üìä –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞');
  } else {
    insights.push('üî¥ –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è, –Ω—É–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏');
  }
  
  // –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏
  if (comparison.leadsChange.trend === 'up' && comparison.leadsChange.percent > 10) {
    insights.push(`üìà –†–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏–¥–æ–≤ –Ω–∞ ${comparison.leadsChange.percent.toFixed(1)}% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É`);
  }
  
  if (comparison.revenueChange.trend === 'up' && comparison.revenueChange.percent > 15) {
    insights.push(`üí∞ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: +${comparison.revenueChange.percent.toFixed(1)}%`);
  }
  
  return insights;
}

function createMonthlyDashboardReport(dashboard) {
  const sheet = createOrUpdateSheet(CONFIG.SHEETS.MONTHLY_DASHBOARD);
  
  let currentRow = 1;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
  currentRow = addDashboardHeader(sheet, dashboard, currentRow);
  currentRow += 2;
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ KPI —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  currentRow = addMainKpis(sheet, dashboard, currentRow);
  currentRow += 2;
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
  currentRow = addMonthComparison(sheet, dashboard, currentRow);
  currentRow += 2;
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º
  currentRow = addGoalProgress(sheet, dashboard, currentRow);
  currentRow += 2;
  
  // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
  currentRow = addChannelDashboard(sheet, dashboard.channelAnalysis, currentRow);
  currentRow += 2;
  
  // –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ã
  currentRow = addManagerDashboard(sheet, dashboard.managerPerformance, currentRow);
  currentRow += 2;
  
  // –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
  currentRow = addWeeklyTrends(sheet, dashboard.weeklyTrends, currentRow);
  currentRow += 2;
  
  // –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  addInsightsDashboard(sheet, dashboard.insights, currentRow);
  
  return sheet;
}

function addDashboardHeader(sheet, dashboard, startRow) {
  const title = `–î–ê–®–ë–û–†–î ${dashboard.currentMonth.toUpperCase()} ${dashboard.currentYear}`;
  const titleRange = sheet.getRange(startRow, 1, 1, 8);
  titleRange.merge();
  titleRange.setValue(title);
  titleRange.setBackground('#1a237e')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontSize(16)
            .setHorizontalAlignment('center')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  return startRow + 1;
}

function addMainKpis(sheet, dashboard, startRow) {
  const headers = ['–û—Å–Ω–æ–≤–Ω—ã–µ KPI', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å'];
  const headerRange = sheet.getRange(startRow, 1, 1, 3);
  headerRange.setValues([headers]);
  headerRange.setBackground('#3949ab')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const kpiData = [
    ['–í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü', dashboard.currentMonthData.leads, getKpiStatus(dashboard.currentMonthData.leads, dashboard.goals.leadsGoal)],
    ['–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', dashboard.currentMonthData.success, ''],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤', dashboard.currentMonthData.conversion.toFixed(1) + '%', getKpiStatus(dashboard.currentMonthData.conversion, dashboard.goals.conversionGoal)],
    ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', formatCurrency(dashboard.currentMonthData.revenue), getKpiStatus(dashboard.currentMonthData.revenue, dashboard.goals.revenueGoal)],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', formatCurrency(dashboard.currentMonthData.avgDeal), ''],
    ['–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', dashboard.currentMonthData.managers, ''],
    ['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç', formatCurrency(dashboard.currentMonthData.budget), ''],
    ['ROMI', dashboard.currentMonthData.budget > 0 ? (((dashboard.currentMonthData.revenue - dashboard.currentMonthData.budget) / dashboard.currentMonthData.budget) * 100).toFixed(1) + '%' : '0%', '']
  ];
  
  const dataRange = sheet.getRange(startRow + 1, 1, kpiData.length, 3);
  dataRange.setValues(kpiData);
  dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  
  return startRow + kpiData.length + 1;
}

function getKpiStatus(current, target) {
  const progress = (current / target) * 100;
  if (progress >= 100) return '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ';
  if (progress >= 80) return 'üü° –ë–ª–∏–∑–∫–æ';
  return 'üî¥ –û—Ç—Å—Ç–∞–µ–º';
}

function addMonthComparison(sheet, dashboard, startRow) {
  const headers = ['–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º', '–¢–µ–∫—É—â–∏–π', '–ü—Ä–µ–¥—ã–¥—É—â–∏–π', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'];
  const headerRange = sheet.getRange(startRow, 1, 1, 4);
  headerRange.setValues([headers]);
  headerRange.setBackground('#2e7d32')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const comparisonData = [
    [
      '–õ–∏–¥—ã',
      dashboard.currentMonthData.leads,
      dashboard.previousMonthData.leads,
      formatChange(dashboard.comparison.leadsChange)
    ],
    [
      '–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏',
      dashboard.currentMonthData.success,
      dashboard.previousMonthData.success,
      ''
    ],
    [
      '–í—ã—Ä—É—á–∫–∞',
      formatCurrency(dashboard.currentMonthData.revenue),
      formatCurrency(dashboard.previousMonthData.revenue),
      formatChange(dashboard.comparison.revenueChange)
    ],
    [
      '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
      dashboard.comparison.conversionChange.current.toFixed(1) + '%',
      dashboard.comparison.conversionChange.previous.toFixed(1) + '%',
      formatConversionChange(dashboard.comparison.conversionChange)
    ]
  ];
  
  const dataRange = sheet.getRange(startRow + 1, 1, comparisonData.length, 4);
  dataRange.setValues(comparisonData);
  dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  
  return startRow + comparisonData.length + 1;
}

function formatChange(change) {
  const arrow = change.trend === 'up' ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è';
  const sign = change.trend === 'up' ? '+' : '-';
  return `${arrow} ${sign}${change.percent.toFixed(1)}%`;
}

function formatConversionChange(conversionChange) {
  const diff = conversionChange.current - conversionChange.previous;
  const arrow = diff >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è';
  const sign = diff >= 0 ? '+' : '';
  return `${arrow} ${sign}${diff.toFixed(1)}%`;
}

function addGoalProgress(sheet, dashboard, startRow) {
  const headers = ['–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º –º–µ—Å—è—Ü–∞', '–¶–µ–ª—å', '–¢–µ–∫—É—â–µ–µ', '–ü—Ä–æ–≥—Ä–µ—Å—Å %', '–û—Å—Ç–∞–ª–æ—Å—å'];
  const headerRange = sheet.getRange(startRow, 1, 1, 5);
  headerRange.setValues([headers]);
  headerRange.setBackground('#f57c00')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const progressData = [
    [
      '–õ–∏–¥—ã',
      dashboard.goals.leadsGoal,
      dashboard.currentMonthData.leads,
      Math.min(dashboard.goalProgress.leadsProgress, 100).toFixed(1) + '%',
      Math.max(0, dashboard.goals.leadsGoal - dashboard.currentMonthData.leads)
    ],
    [
      '–í—ã—Ä—É—á–∫–∞',
      formatCurrency(dashboard.goals.revenueGoal),
      formatCurrency(dashboard.currentMonthData.revenue),
      Math.min(dashboard.goalProgress.revenueProgress, 100).toFixed(1) + '%',
      formatCurrency(Math.max(0, dashboard.goals.revenueGoal - dashboard.currentMonthData.revenue))
    ],
    [
      '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
      dashboard.goals.conversionGoal + '%',
      dashboard.currentMonthData.conversion.toFixed(1) + '%',
      Math.min(dashboard.goalProgress.conversionProgress, 100).toFixed(1) + '%',
      dashboard.currentMonthData.conversion < dashboard.goals.conversionGoal ? 
        `+${(dashboard.goals.conversionGoal - dashboard.currentMonthData.conversion).toFixed(1)}%` : '0%'
    ]
  ];
  
  const dataRange = sheet.getRange(startRow + 1, 1, progressData.length, 5);
  dataRange.setValues(progressData);
  dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  
  return startRow + progressData.length + 1;
}

function addChannelDashboard(sheet, channels, startRow) {
  const headers = [
    '–ö–∞–Ω–∞–ª',
    '–õ–∏–¥—ã',
    '–£—Å–ø–µ—à–Ω—ã–µ',
    '–ö–æ–Ω–≤–µ—Ä—Å–∏—è %',
    '–í—ã—Ä—É—á–∫–∞',
    'ROMI %'
  ];
  
  const headerRange = sheet.getRange(startRow, 1, 1, headers.length);
  headerRange.setValues([headers]);
  headerRange.setBackground('#7b1fa2')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const channelData = channels.slice(0, 8).map(channel => [
    channel.channel,
    channel.leads,
    channel.success,
    channel.conversion.toFixed(1) + '%',
    formatCurrency(channel.revenue),
    channel.romi.toFixed(1) + '%'
  ]);
  
  if (channelData.length > 0) {
    const dataRange = sheet.getRange(startRow + 1, 1, channelData.length, headers.length);
    dataRange.setValues(channelData);
    dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  }
  
  return startRow + Math.max(channelData.length, 1) + 1;
}

function addManagerDashboard(sheet, managers, startRow) {
  const headers = [
    '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    '–õ–∏–¥—ã',
    '–£—Å–ø–µ—à–Ω—ã–µ',
    '–ö–æ–Ω–≤–µ—Ä—Å–∏—è %',
    '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
    '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
  ];
  
  const headerRange = sheet.getRange(startRow, 1, 1, headers.length);
  headerRange.setValues([headers]);
  headerRange.setBackground('#d32f2f')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const managerData = managers.slice(0, 10).map(manager => [
    manager.manager,
    manager.leads,
    manager.success,
    manager.conversion.toFixed(1) + '%',
    formatCurrency(manager.avgDeal),
    manager.efficiency.toFixed(1)
  ]);
  
  if (managerData.length > 0) {
    const dataRange = sheet.getRange(startRow + 1, 1, managerData.length, headers.length);
    dataRange.setValues(managerData);
    dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  }
  
  return startRow + Math.max(managerData.length, 1) + 1;
}

function addWeeklyTrends(sheet, trends, startRow) {
  const headers = ['–ù–µ–¥–µ–ª—è', '–õ–∏–¥—ã', '–£—Å–ø–µ—à–Ω—ã–µ', '–í—ã—Ä—É—á–∫–∞'];
  const headerRange = sheet.getRange(startRow, 1, 1, headers.length);
  headerRange.setValues([headers]);
  headerRange.setBackground('#00695c')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const trendData = trends.map(trend => [
    trend.week,
    trend.leads,
    trend.success,
    formatCurrency(trend.revenue)
  ]);
  
  if (trendData.length > 0) {
    const dataRange = sheet.getRange(startRow + 1, 1, trendData.length, headers.length);
    dataRange.setValues(trendData);
    dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
  }
  
  return startRow + Math.max(trendData.length, 1) + 1;
}

function addInsightsDashboard(sheet, insights, startRow) {
  const headers = ['–ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'];
  const headerRange = sheet.getRange(startRow, 1, 1, 1);
  headerRange.setValues([headers]);
  headerRange.setBackground('#4a148c')
            .setFontColor('#ffffff')
            .setFontWeight('bold')
            .setFontFamily(CONFIG.DEFAULT_FONT);
  
  const insightData = insights.map(insight => [insight]);
  
  if (insightData.length > 0) {
    const dataRange = sheet.getRange(startRow + 1, 1, insightData.length, 1);
    dataRange.setValues(insightData);
    dataRange.setFontFamily(CONFIG.DEFAULT_FONT);
    dataRange.setWrap(true);
  }
  
  sheet.autoResizeColumns(1, 8);
  
  return startRow + insightData.length + 1;
}
