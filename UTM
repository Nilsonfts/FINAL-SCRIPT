/**********************************************************
 * –°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (Site ‚Üí AMO)
 * –ê–≤—Ç–æ—Ä: –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 **********************************************************/
const XCFG = {
  SHEETS: {
    RA:   '–†–ê–ë–û–ß–ò–ô –ê–ú–û',
    SITE: '–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞',
    DASH: '–°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (Site ‚Üí AMO)'
  },
  FONT: 'PT Sans',
  // –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏
  SUCCESS_RE: /(–æ–ø–ª–∞—á|—É—Å–ø–µ—à.*–≤\s*—Ä–ø|—É—Å–ø–µ—à.*—Ä–µ–∞–ª–∏–∑)/i,
  // —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å–∞–π—Ç–∞ –∫ —Å–¥–µ–ª–∫–µ
  ATTRIB_WINDOW_DAYS: 30
};

/* ===================== –ü–£–ë–õ–ò–ß–ù–û ===================== */
function buildSiteToAmoDashboard(){
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const site = readSheetFlexible_(ss, XCFG.SHEETS.SITE);
  const ra   = readRAFlexible_(ss, XCFG.SHEETS.RA);

  if (!site.rows.length) throw new Error('–ù–∞ –ª–∏—Å—Ç–µ ¬´'+XCFG.SHEETS.SITE+'¬ª –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
  if (!ra.rows.length)   throw new Error('–ù–∞ –ª–∏—Å—Ç–µ ¬´'+XCFG.SHEETS.RA+'¬ª –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');

  // 1) –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å–∞–π—Ç–∞ –ø–æ ID
  const index = indexSiteEvents_(site);

  // 2) –ê—Ç—Ä–∏–±—É—Ü–∏—è: –∑–∞—è–≤–∫–∞ —Å–∞–π—Ç–∞ ‚Üí —Å–¥–µ–ª–∫–∞ AMO
  const attached = attachDealsToSite_(ra, site, index);

  // 3) –ê–≥—Ä–µ–≥–∞—Ü–∏–∏
  const kpi = calcKPI_(attached);                      // —Å–≤–æ–¥–Ω—ã–µ
  const bySrcMed   = aggregate_(attached, e => keyJoin_(e.src, e.med));            // source/medium
  const byCamp     = aggregate_(attached, e => keyJoin_(e.src, e.cmp));            // source|campaign
  const byTerm     = aggregate_(attached, e => cleanKey_(e.term||''));             // utm_term
  const byLanding  = aggregate_(attached, e => cleanKey_(e.landing||''));          // landing_page
  const byButton   = aggregate_(attached, e => cleanKey_(e.btn||''));              // button_text

  // 4) –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
  drawDashboard_(ss, {kpi, bySrcMed, byCamp, byTerm, byLanding, byButton, siteEvents:site.rows.length});
}

/* –µ–∂–µ—á–∞—Å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä */
function setHourlyTrigger_Site2Amo(){
  ScriptApp.getProjectTriggers().forEach(t=>{
    if (t.getHandlerFunction()==='buildSiteToAmoDashboard') ScriptApp.deleteTrigger(t);
  });
  ScriptApp.newTrigger('buildSiteToAmoDashboard').timeBased().everyHours(1).create();
}

/* ===================== –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• ===================== */

// –ì–∏–±–∫–æ–µ —á—Ç–µ–Ω–∏–µ ¬´–ó–∞—è–≤–∫–∏ —Å –°–∞–π—Ç–∞¬ª
function readSheetFlexible_(ss, name){
  const sh = ss.getSheetByName(name);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ ¬´'+name+'¬ª.');
  const vals = sh.getDataRange().getValues();
  const header = (vals[0]||[]).map(String);
  const rows = vals.slice(1).filter(r=>r.some(x=>String(x).trim()!==''));

  const idx = {
    // utm
    src: idxOf_(header, ['utm_source','UTM_SOURCE','source']),
    med: idxOf_(header, ['utm_medium','UTM_MEDIUM','medium']),
    cmp: idxOf_(header, ['utm_campaign','UTM_CAMPAIGN','campaign','utm_campa ign']),
    term: idxOf_(header, ['utm_term','UTM_TERM']),
    cont: idxOf_(header, ['utm_content','UTM_CONTENT']),
    // id
    ym: idxOf_(header, ['ym_client_id','YM_CLIENT_ID']),
    ga: idxOf_(header, ['ga_client_id','GA_CLIENT_ID']),
    phone: idxOf_(header, ['phone','–¢–µ–ª–µ—Ñ–æ–Ω']),
    // –ø–æ–≤–µ–¥–µ–Ω–∏–µ/—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    btn: idxOf_(header, ['button_text','BUTTON_TEXT','–ö–Ω–æ–ø–∫–∞']),
    ref: idxOf_(header, ['referrer','REFERER','utm_referrer']),
    land: idxOf_(header, ['landing_page','LANDING_PAGE','page']),
    // –≤—Ä–µ–º—è
    date: idxOf_(header, ['date','DATE']),
    time: idxOf_(header, ['time','TIME']),
    ts:   idxOf_(header, ['timestamp','TIMESTAMP'])
  };

  return {header, rows, idx};
}

// –ß—Ç–µ–Ω–∏–µ ¬´–†–ê–ë–û–ß–ò–ô –ê–ú–û¬ª (—à–∞–ø–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∞ 2-–π —Å—Ç—Ä–æ–∫–µ)
function readRAFlexible_(ss, name){
  const sh = ss.getSheetByName(name);
  if (!sh) throw new Error('–ù–µ—Ç –ª–∏—Å—Ç–∞ ¬´'+name+'¬ª.');

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const peek = sh.getRange(1,1,Math.min(5, sh.getLastRow()), Math.min(200, sh.getLastColumn())).getValues();
  let headerRow = 2;
  for (let r=0;r<peek.length;r++){
    const row = peek[r].map(String);
    if (row.includes('ID') && (row.includes('–°—Ç–∞—Ç—É—Å') || row.includes('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))) { headerRow = r+1; break; }
  }

  const lastRow = sh.getLastRow(), lastCol = sh.getLastColumn();
  const header = sh.getRange(headerRow,1,1,lastCol).getValues()[0].map(String);
  const rows   = sh.getRange(headerRow+1,1,lastRow-headerRow,lastCol).getValues()
                 .filter(r=>r.some(x=>String(x).trim()!==''));

  // –∏–Ω–¥–µ–∫—Å—ã
  const idx = {
    status: idxOf_(header, ['–°—Ç–∞—Ç—É—Å','–°–¥–µ–ª–∫–∞.–°—Ç–∞—Ç—É—Å']),
    budget: idxOf_(header, ['–ë—é–¥–∂–µ—Ç','–°–¥–µ–ª–∫–∞.–ë—é–¥–∂–µ—Ç']),
    phone:  idxOf_(header, ['–¢–µ–ª–µ—Ñ–æ–Ω','–ö–æ–Ω—Ç–∞–∫—Ç.–¢–µ–ª–µ—Ñ–æ–Ω','Phone']),
    ym:     idxOf_(header, ['YM_CLIENT_ID','ym_client_id']),
    ga:     idxOf_(header, ['GA_CLIENT_ID','ga_client_id']),
    formid: idxOf_(header, ['FORMID','formid']),
    refer:  idxOf_(header, ['REFERER','referer']),
    date:   idxOf_(header, ['DATE','–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è','–°–¥–µ–ª–∫–∞.DATE']),
    time:   idxOf_(header, ['TIME','–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞']),
  };

  // –ø–æ—Å–ª–µ–¥–Ω—è—è ¬´–°—É–º–º–∞ ‚ÇΩ¬ª (AX/‚Ä¶)
  let ax = -1;
  header.forEach((h,i)=>{ if (/—Å—É–º–º–∞\s*‚ÇΩ/i.test(String(h))) ax = i; });
  idx.ax = ax;

  return {header, rows, idx};
}

/* ===================== –ê–¢–†–ò–ë–£–¶–ò–Ø ===================== */

function indexSiteEvents_(site){
  const ymMap = new Map();
  const gaMap = new Map();
  const phMap = new Map();

  for (const r of site.rows){
    const ev = siteEventFromRow_(r, site.idx);
    if (!ev) continue;

    if (ev.ym) pushMapList_(ymMap, ev.ym, ev);
    if (ev.ga) pushMapList_(gaMap, ev.ga, ev);
    if (ev.phone) pushMapList_(phMap, ev.phone, ev);
  }
  return {ymMap, gaMap, phMap};
}

function siteEventFromRow_(r, i){
  const ts = eventTime_(r[i.ts], r[i.date], r[i.time]);
  if (!ts) return null;

  const ev = {
    ts,
    ym: cleanId_(r[i.ym]),
    ga: cleanId_(r[i.ga]),
    phone: cleanPhone_(r[i.phone]),
    src: asStr_(r[i.src]),
    med: asStr_(r[i.med]),
    cmp: asStr_(r[i.cmp]),
    term: asStr_(r[i.term]),
    cont: asStr_(r[i.cont]),
    btn: asStr_(r[i.btn]),
    ref: asStr_(r[i.ref]),
    landing: asStr_(r[i.land])
  };
  return ev;
}

function attachDealsToSite_(ra, site, index){
  const out = [];
  const wnd = XCFG.ATTRIB_WINDOW_DAYS * 86400000;

  for (const r of ra.rows){
    const created = eventTime_(null, r[ra.idx.date], r[ra.idx.time]) || new Date();
    const st = normalizeStatus_(r[ra.idx.status]);
    const ok = XCFG.SUCCESS_RE.test(st);

    const ym = cleanId_(r[ra.idx.ym]);
    const ga = cleanId_(r[ra.idx.ga]);
    const ph = cleanPhone_(r[ra.idx.phone]);

    let ev = null;
    // —Ü–µ–ø–æ—á–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: YM ‚Üí GA ‚Üí PHONE ‚Üí –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (ym) ev = pickClosestBefore_(index.ymMap.get(ym), created, wnd) || null;
    if (!ev && ga) ev = pickClosestBefore_(index.gaMap.get(ga), created, wnd) || null;
    if (!ev && ph) ev = pickClosestBefore_(index.phMap.get(ph), created, wnd) || null;
    if (!ev) ev = null; // –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏

    // –¥–æ—Ö–æ–¥
    const income = ok ? revenueFromRA_(r, ra.idx) : 0;

    out.push({
      ok,
      income,
      created,
      src:   ev ? ev.src   : '',
      med:   ev ? ev.med   : '',
      cmp:   ev ? ev.cmp   : '',
      term:  ev ? ev.term  : '',
      cont:  ev ? ev.cont  : '',
      btn:   ev ? ev.btn   : '',
      ref:   ev ? ev.ref   : '',
      landing: ev ? ev.landing : '',
      hasAttr: !!ev
    });
  }
  return out;
}

function pickClosestBefore_(list, pivot, wnd){
  if (!list || !list.length) return null;
  let best = null, bestDt = -1;
  for (const ev of list){
    const dt = pivot - ev.ts;
    if (dt>=0 && dt<=wnd){
      if (best===null || dt < bestDt){ best = ev; bestDt = dt; }
    }
  }
  return best;
}

/* ===================== –ê–ì–†–ï–ì–ê–¶–ò–ò ===================== */

function calcKPI_(items){
  const totalSiteToAmo = items.filter(x=>x.hasAttr).length;
  const succ = items.filter(x=>x.hasAttr && x.ok);
  const revenue = succ.reduce((s,x)=>s+x.income,0);
  const avg = succ.length ? revenue/succ.length : 0;
  const conv = totalSiteToAmo ? (succ.length/totalSiteToAmo) : 0;
  return { attached: totalSiteToAmo, succ: succ.length, revenue, avg, conv };
}

function aggregate_(items, keyFn){
  const map = new Map();
  for (const it of items){
    if (!it.hasAttr) continue;
    const k = cleanKey_(keyFn(it));
    const b = map.get(k) || {key:k, leads:0, succ:0, revenue:0};
    b.leads += 1;
    if (it.ok){ b.succ += 1; b.revenue += it.income; }
    map.set(k,b);
  }
  // —Ä–∞—Å—á—ë—Ç —á–µ–∫/–∫–æ–Ω–≤–µ—Ä—Å–∏—è + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ—Ö–æ–¥—É
  const arr = [...map.values()].map(b=>({
    key: b.key || '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)',
    deals: b.leads,
    success: b.succ,
    income: b.revenue,
    avg: b.succ ? b.revenue/b.succ : 0,
    conv: b.leads ? b.succ/b.leads : 0
  })).sort((a,b)=>b.income-a.income);
  return arr;
}

/* ===================== –†–ï–ù–î–ï–† ===================== */

function drawDashboard_(ss, data){
  const sh = ss.getSheetByName(XCFG.SHEETS.DASH) || ss.insertSheet(XCFG.SHEETS.DASH);
  sh.clear();

  // –æ–±—â–∞—è —Å–µ—Ç–∫–∞/—à—Ä–∏—Ñ—Ç
  ensureSize_(sh, 200, 12);
  sh.getRange(1,1,sh.getMaxRows(),sh.getMaxColumns()).setFontFamily(XCFG.FONT);

  // —à–∞–ø–∫–∞
  band_(sh,1,1,1,12,'#123E6B');
  sh.getRange(1,1,1,12).merge().setValue('üîó –°–ö–í–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê (Site ‚Üí AMO)')
    .setFontColor('#fff').setFontSize(18).setFontWeight('bold').setVerticalAlignment('middle');

  sh.getRange(2,1,1,2).setValues([['–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', new Date()]])
    .setNumberFormats([['@','dd.MM.yyyy, HH:mm:ss']]);

  let r = 5;

  // KPI
  section_(sh,r,1,'‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò','#DCEFD2'); r++;
  const kHead = ['–ú–µ—Ç—Ä–∏–∫–∞','–ó–Ω–∞—á–µ–Ω–∏–µ','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'];
  const kBody = [
    ['–°–∞–π—Ç-—Ñ–æ—Ä–º (events)', data.siteEvents, '–ò—Å—Ö–æ–¥–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å–∞–π—Ç–∞'],
    ['–°–¥–µ–ª–æ–∫ —Å –∞—Ç—Ä–∏–±—É—Ü–∏–µ–π', data.kpi.attached, '–ú–∞—Ç—á–∏ –ø–æ YM/GA/–¢–µ–ª–µ—Ñ–æ–Ω/–í—Ä–µ–º—è'],
    ['–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', data.kpi.succ, '–û–ø–ª–∞—á–µ–Ω–æ/–£—Å–ø–µ—à–Ω–æ –≤ –†–ü/–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'],
    ['–î–æ—Ö–æ–¥ ‚ÇΩ', data.kpi.revenue, 'AX, –µ—Å–ª–∏ 0 ‚Üí –ë—é–¥–∂–µ—Ç'],
    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚ÇΩ', data.kpi.avg, '–î–æ—Ö–æ–¥ / –£—Å–ø–µ—à–Ω—ã–µ'],
    ['–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–∞–π—Ç ‚Üí —É—Å–ø–µ—Ö', data.kpi.conv, '–£—Å–ø–µ—à–Ω—ã–µ / –°–¥–µ–ª–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ü–∏–µ–π']
  ];
  writeTable_(sh, r, 1, kHead, kBody);
  sh.getRange(r+1,2, kBody.length,1).setNumberFormats([['0'],['0'],['0'],['# ##0'],['# ##0'],['0.00%']]);
  r += kBody.length + 3;

  // –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (source/medium)
  section_(sh,r,1,'üìà –¢–û–ü –ò–°–¢–û–ß–ù–ò–ö–û–í (source/medium)','#EAF2FF'); r++;
  drawAgg_(sh, r, 1, data.bySrcMed); r += data.bySrcMed.length + 3;

  // –¢–æ–ø –∫–∞–º–ø–∞–Ω–∏–π (source|campaign)
  section_(sh,r,1,'üìä –¢–û–ü –ö–ê–ú–ü–ê–ù–ò–ô (source | campaign)','#EAF2FF'); r++;
  drawAgg_(sh, r, 1, data.byCamp); r += data.byCamp.length + 3;

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  section_(sh,r,1,'üîë –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê (utm_term)','#FFF3D6'); r++;
  drawAgg_(sh, r, 1, data.byTerm); r += data.byTerm.length + 3;

  // –ü–æ—Å–∞–¥–æ—á–Ω—ã–µ
  section_(sh,r,1,'üìç –ü–û–°–ê–î–û–ß–ù–´–ï –°–¢–†–ê–ù–ò–¶–´','#FFF3D6'); r++;
  drawAgg_(sh, r, 1, data.byLanding); r += data.byLanding.length + 3;

  // –ö–Ω–æ–ø–∫–∏
  section_(sh,r,1,'üü° –ö–ù–û–ü–ö–ò (button_text)','#FFF3D6'); r++;
  drawAgg_(sh, r, 1, data.byButton); r += data.byButton.length + 3;

  autoResize_(sh);
}

function drawAgg_(sh, r, c, arr){
  const head = ['–ö–ª—é—á','–°–¥–µ–ª–∫–∏','–£—Å–ø–µ—à–Ω—ã–µ','–î–æ—Ö–æ–¥ ‚ÇΩ','–°—Ä. —á–µ–∫ ‚ÇΩ','–ö–æ–Ω–≤–µ—Ä—Å–∏—è'];
  writeTable_(sh, r, c, head, arr.map(x=>[x.key, x.deals, x.success, x.income, x.avg, x.conv]));
  const n = Math.max(1, arr.length);
  sh.getRange(r+1,c+1,n,1).setNumberFormat('0');
  sh.getRange(r+1,c+2,n,1).setNumberFormat('0');
  sh.getRange(r+1,c+3,n,1).setNumberFormat('# ##0');
  sh.getRange(r+1,c+4,n,1).setNumberFormat('# ##0');
  sh.getRange(r+1,c+5,n,1).setNumberFormat('0.00%');
}

/* ===================== –£–¢–ò–õ–ò–¢–´ ===================== */

function idxOf_(header, names){
  const norm = header.map(h=>String(h||'').trim().toLowerCase());
  for (const nm of names){
    const q = String(nm).trim().toLowerCase();
    let i = norm.indexOf(q);
    if (i>-1) return i;
    i = norm.findIndex(h => h===q || h.replace(/\s+/g,'')===q.replace(/\s+/g,''));
    if (i>-1) return i;
  }
  return -1;
}

function eventTime_(ts, d, t){
  if (ts instanceof Date && !isNaN(ts)) return ts;
  const date = (d instanceof Date) ? d : (d ? new Date(d) : null);
  let time = null;
  if (t instanceof Date) time = t;
  else if (typeof t === 'string' && /\d{1,2}:\d{2}/.test(t)){
    const [hh,mm] = t.split(':').map(n=>+n);
    time = new Date(2000,0,1,hh||0,mm||0,0);
  }
  if (date){
    const dt = new Date(date);
    if (time){
      dt.setHours(time.getHours()||0, time.getMinutes()||0, 0, 0);
    }
    return dt;
  }
  return null;
}

function revenueFromRA_(row, idx){
  const ax = num_(row[idx.ax]);
  if (ax>0) return ax;
  return num_(row[idx.budget]);
}

function normalizeStatus_(s){
  s = asStr_(s).replace(/^\s*–≤—Å–µ\s*–±–∞—Ä—ã\s*—Å–µ—Ç–∏\s*(?:[\/\\|:\-‚Äì‚Äî]\s*)?/i,'')
               .replace(/\s*(?:-|‚Äì|‚Äî)\s*.*$/,'').trim();
  return s;
}

function asStr_(v){ return v==null ? '' : String(v).trim(); }
function num_(v){ const n = Number(String(v||'').replace(/\s/g,'').replace(',','.')); return isNaN(n)?0:n; }
function cleanId_(v){ const s = String(v||'').trim(); return s ? s : ''; }
function cleanPhone_(v){
  const d = String(v||'').replace(/\D/g,'');
  if (!d) return '';
  if (d.length===11 && /^[78]/.test(d)) return d.slice(1);
  if (d.length>=10) return d.slice(-10);
  return d;
}
function keyJoin_(a,b){ return [cleanKey_(a), cleanKey_(b||'(none)')].join(' | '); }
function cleanKey_(x){ x = asStr_(x); return x || '(none)'; }

function pushMapList_(m, k, v){ if(!k) return; const a = m.get(k)||[]; a.push(v); m.set(k,a); }

// –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
function section_(sh, r, c, title, bg){
  band_(sh,r,c,1,12,bg);
  sh.getRange(r,c,1,12).merge().setValue(title).setFontWeight('bold');
}
function band_(sh,r,c,rows,cols,bg){ ensureSize_(sh,r+rows-1,c+cols-1); sh.getRange(r,c,rows,cols).setBackground(bg); }
function writeTable_(sh, r, c, head, body){
  ensureSize_(sh, r + Math.max(1, body.length), c + head.length - 1);
  sh.getRange(r,c,1,head.length).setValues([head]).setFontWeight('bold').setBackground('#EEF4FB');
  if (body.length) sh.getRange(r+1,c,body.length,head.length).setValues(body.map(row=>row.map(x => (x===undefined||x===null)?'':x)));
  sh.getRange(r,c,Math.max(1,body.length+1),head.length).setBorder(true,true,true,true,true,true);
}
function ensureSize_(sh, needR, needC){
  if (sh.getMaxRows()<needR) sh.insertRowsAfter(sh.getMaxRows(), needR - sh.getMaxRows());
  if (sh.getMaxColumns()<needC) sh.insertColumnsAfter(sh.getMaxColumns(), needC - sh.getMaxColumns());
}
function autoResize_(sh){ const cols = sh.getLastColumn(); for (let i=1;i<=cols;i++) try{ sh.autoResizeColumn(i); }catch(e){} }
